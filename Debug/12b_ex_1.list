
12b_ex_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08007734  08007734  00017734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080079a8  080079a8  000179a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080079ac  080079ac  000179ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000004  080079b0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000028  080079d4  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003e  200000c4  08007a6d  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000104  08007aab  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000084  20000118  08007abc  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000002a8  2000019c  08007b40  0002019c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000444  08007b40  00020444  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 16 .debug_info   00024afd  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00004f47  00000000  00000000  00044cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000022c0  00000000  00000000  00049c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002058  00000000  00000000  0004bed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002aa94  00000000  00000000  0004df28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00022e72  00000000  00000000  000789bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f0b45  00000000  00000000  0009b82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  0018c373  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00008f50  00000000  00000000  0018c3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000019c 	.word	0x2000019c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800771c 	.word	0x0800771c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001a0 	.word	0x200001a0
 8000178:	0800771c 	.word	0x0800771c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f005 ff83 	bl	80060b4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f005 fa1e 	bl	80055f2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08007734 	.word	0x08007734

080001c4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 80001fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80001fe:	4905      	ldr	r1, [pc, #20]	; (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4313      	orrs	r3, r2
 8000204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	58000800 	.word	0x58000800

08000218 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000226:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800022a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000232:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	021b      	lsls	r3, r3, #8
 800023a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800023e:	4313      	orrs	r3, r2
 8000240:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	cafecafe 	.word	0xcafecafe

08000254 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800025c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4313      	orrs	r3, r2
 800026e:	608b      	str	r3, [r1, #8]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800028c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80002a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80002ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80002c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80002d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80002d4:	d101      	bne.n	80002da <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80002d6:	2301      	movs	r3, #1
 80002d8:	e000      	b.n	80002dc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80002da:	2300      	movs	r3, #0
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80002ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80002fa:	d101      	bne.n	8000300 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80002fc:	2301      	movs	r3, #1
 80002fe:	e000      	b.n	8000302 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000300:	2300      	movs	r3, #0
}
 8000302:	4618      	mov	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800031a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4313      	orrs	r3, r2
 8000322:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4013      	ands	r3, r2
 800032e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000330:	68fb      	ldr	r3, [r7, #12]
}
 8000332:	bf00      	nop
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <LL_DBGMCU_GetRevisionID+0x18>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	0c1b      	lsrs	r3, r3, #16
 800034a:	b29b      	uxth	r3, r3
}
 800034c:	4618      	mov	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	e0042000 	.word	0xe0042000

0800035c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	685a      	ldr	r2, [r3, #4]
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	041b      	lsls	r3, r3, #16
 800036e:	431a      	orrs	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	605a      	str	r2, [r3, #4]
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	685a      	ldr	r2, [r3, #4]
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	431a      	orrs	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	605a      	str	r2, [r3, #4]
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
 80003aa:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	695a      	ldr	r2, [r3, #20]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	041b      	lsls	r3, r3, #16
 80003b4:	431a      	orrs	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	615a      	str	r2, [r3, #20]
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b083      	sub	sp, #12
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
 80003ce:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	695a      	ldr	r2, [r3, #20]
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	431a      	orrs	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	615a      	str	r2, [r3, #20]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	683a      	ldr	r2, [r7, #0]
 80003f6:	609a      	str	r2, [r3, #8]
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	619a      	str	r2, [r3, #24]
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	22ff      	movs	r2, #255	; 0xff
 800042c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800043a:	b480      	push	{r7}
 800043c:	b083      	sub	sp, #12
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	22ca      	movs	r2, #202	; 0xca
 8000446:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2253      	movs	r2, #83	; 0x53
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800045a:	b480      	push	{r7}
 800045c:	b083      	sub	sp, #12
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
 8000462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	f023 0207 	bic.w	r2, r3, #7
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	431a      	orrs	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	609a      	str	r2, [r3, #8]
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000484:	4b04      	ldr	r3, [pc, #16]	; (8000498 <MX_APPE_Config+0x18>)
 8000486:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800048a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800048c:	f000 f824 	bl	80004d8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000490:	f000 f864 	bl	800055c <Config_HSE>

  return;
 8000494:	bf00      	nop
}
 8000496:	bd80      	pop	{r7, pc}
 8000498:	58004000 	.word	0x58004000

0800049c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80004a0:	f000 f870 	bl	8000584 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80004a4:	f000 f888 	bl	80005b8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004a8:	4903      	ldr	r1, [pc, #12]	; (80004b8 <MX_APPE_Init+0x1c>)
 80004aa:	2000      	movs	r0, #0
 80004ac:	f000 fdbe 	bl	800102c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004b0:	f000 f890 	bl	80005d4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004b4:	bf00      	nop
}
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000200 	.word	0x20000200

080004bc <Init_Smps>:

void Init_Smps(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80004c0:	bf00      	nop
}
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <Init_Exti>:

void Init_Exti(void)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80004ce:	2050      	movs	r0, #80	; 0x50
 80004d0:	f7ff fe8e 	bl	80001f0 <LL_EXTI_EnableIT_32_63>

  return;
 80004d4:	bf00      	nop
}
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80004dc:	f000 f804 	bl	80004e8 <Reset_BackupDomain>

  Reset_IPCC();
 80004e0:	f000 f81a 	bl	8000518 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80004e4:	bf00      	nop
}
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80004ec:	f7ff fee8 	bl	80002c0 <LL_RCC_IsActiveFlag_PINRST>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d00d      	beq.n	8000512 <Reset_BackupDomain+0x2a>
 80004f6:	f7ff fef6 	bl	80002e6 <LL_RCC_IsActiveFlag_SFTRST>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d108      	bne.n	8000512 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000500:	f001 ff1c 	bl	800233c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000504:	f001 ff1a 	bl	800233c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000508:	f7ff feb8 	bl	800027c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800050c:	f7ff fec7 	bl	800029e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000510:	bf00      	nop
 8000512:	bf00      	nop
}
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800051c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000520:	f7ff fef4 	bl	800030c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000524:	213f      	movs	r1, #63	; 0x3f
 8000526:	480c      	ldr	r0, [pc, #48]	; (8000558 <Reset_IPCC+0x40>)
 8000528:	f7ff ff5e 	bl	80003e8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800052c:	213f      	movs	r1, #63	; 0x3f
 800052e:	480a      	ldr	r0, [pc, #40]	; (8000558 <Reset_IPCC+0x40>)
 8000530:	f7ff ff68 	bl	8000404 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000534:	213f      	movs	r1, #63	; 0x3f
 8000536:	4808      	ldr	r0, [pc, #32]	; (8000558 <Reset_IPCC+0x40>)
 8000538:	f7ff ff10 	bl	800035c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800053c:	213f      	movs	r1, #63	; 0x3f
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <Reset_IPCC+0x40>)
 8000540:	f7ff ff2f 	bl	80003a2 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000544:	213f      	movs	r1, #63	; 0x3f
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <Reset_IPCC+0x40>)
 8000548:	f7ff ff1a 	bl	8000380 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800054c:	213f      	movs	r1, #63	; 0x3f
 800054e:	4802      	ldr	r0, [pc, #8]	; (8000558 <Reset_IPCC+0x40>)
 8000550:	f7ff ff39 	bl	80003c6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000554:	bf00      	nop
}
 8000556:	bd80      	pop	{r7, pc}
 8000558:	58000c00 	.word	0x58000c00

0800055c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000562:	2000      	movs	r0, #0
 8000564:	f005 fe32 	bl	80061cc <OTP_Read>
 8000568:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d005      	beq.n	800057c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	799b      	ldrb	r3, [r3, #6]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fe4f 	bl	8000218 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800057a:	bf00      	nop
 800057c:	bf00      	nop
}
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <System_Init>:

static void System_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  Init_Smps();
 8000588:	f7ff ff98 	bl	80004bc <Init_Smps>

  Init_Exti();
 800058c:	f7ff ff9d 	bl	80004ca <Init_Exti>

  Init_Rtc();
 8000590:	f000 f802 	bl	8000598 <Init_Rtc>

  return;
 8000594:	bf00      	nop
}
 8000596:	bd80      	pop	{r7, pc}

08000598 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <Init_Rtc+0x1c>)
 800059e:	f7ff ff4c 	bl	800043a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80005a2:	2100      	movs	r1, #0
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <Init_Rtc+0x1c>)
 80005a6:	f7ff ff58 	bl	800045a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80005aa:	4802      	ldr	r0, [pc, #8]	; (80005b4 <Init_Rtc+0x1c>)
 80005ac:	f7ff ff38 	bl	8000420 <LL_RTC_EnableWriteProtection>

  return;
 80005b0:	bf00      	nop
}
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40002800 	.word	0x40002800

080005b8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80005bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005c0:	f7ff fe48 	bl	8000254 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80005c4:	f006 fdf0 	bl	80071a8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80005c8:	2004      	movs	r0, #4
 80005ca:	f7ff fdfb 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80005ce:	bf00      	nop
}
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80005da:	f005 fbb5 	bl	8005d48 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <appe_Tl_Init+0x50>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	2008      	movs	r0, #8
 80005e4:	f006 ff1e 	bl	8007424 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <appe_Tl_Init+0x54>)
 80005ea:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <appe_Tl_Init+0x58>)
 80005ee:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	480e      	ldr	r0, [pc, #56]	; (8000630 <appe_Tl_Init+0x5c>)
 80005f6:	f005 fa6d 	bl	8005ad4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <appe_Tl_Init+0x60>)
 80005fc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <appe_Tl_Init+0x64>)
 8000600:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <appe_Tl_Init+0x68>)
 8000604:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000606:	f240 533c 	movw	r3, #1340	; 0x53c
 800060a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fcdb 	bl	8005fcc <TL_MM_Init>

  TL_Enable();
 8000616:	f005 fb91 	bl	8005d3c <TL_Enable>

  return;
 800061a:	bf00      	nop
}
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08005b0d 	.word	0x08005b0d
 8000628:	20030734 	.word	0x20030734
 800062c:	08000641 	.word	0x08000641
 8000630:	08000659 	.word	0x08000659
 8000634:	2003094c 	.word	0x2003094c
 8000638:	20030840 	.word	0x20030840
 800063c:	200301f8 	.word	0x200301f8

08000640 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800064a:	bf00      	nop
}
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	330b      	adds	r3, #11
 8000666:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	b29b      	uxth	r3, r3
 800066e:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000672:	2b07      	cmp	r3, #7
 8000674:	d81f      	bhi.n	80006b6 <APPE_SysUserEvtRx+0x5e>
 8000676:	a201      	add	r2, pc, #4	; (adr r2, 800067c <APPE_SysUserEvtRx+0x24>)
 8000678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067c:	0800069d 	.word	0x0800069d
 8000680:	080006af 	.word	0x080006af
 8000684:	080006b7 	.word	0x080006b7
 8000688:	080006b7 	.word	0x080006b7
 800068c:	080006b7 	.word	0x080006b7
 8000690:	080006b7 	.word	0x080006b7
 8000694:	080006b7 	.word	0x080006b7
 8000698:	080006b7 	.word	0x080006b7
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4618      	mov	r0, r3
 80006a2:	f004 ffd3 	bl	800564c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 f81b 	bl	80006e2 <APPE_SysEvtReadyProcessing>
    break;
 80006ac:	e004      	b.n	80006b8 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 f806 	bl	80006c0 <APPE_SysEvtError>
    break;
 80006b4:	e000      	b.n	80006b8 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80006b6:	bf00      	nop
  }

  return;
 80006b8:	bf00      	nop
}
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	330b      	adds	r3, #11
 80006ce:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3302      	adds	r3, #2
 80006d4:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80006d6:	bf00      	nop
}
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b08a      	sub	sp, #40	; 0x28
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	330b      	adds	r3, #11
 8000702:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000704:	6a3b      	ldr	r3, [r7, #32]
 8000706:	3302      	adds	r3, #2
 8000708:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d117      	bne.n	8000742 <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000712:	f7ff fd3b 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000716:	230d      	movs	r3, #13
 8000718:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800071a:	237f      	movs	r3, #127	; 0x7f
 800071c:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800071e:	f7ff fe0f 	bl	8000340 <LL_DBGMCU_GetRevisionID>
 8000722:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = RevisionID;
 8000724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000726:	b29b      	uxth	r3, r3
 8000728:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	4618      	mov	r0, r3
 8000730:	f004 ff76 	bl	8005620 <SHCI_C2_Config>

    APP_BLE_Init();
 8000734:	f005 fe54 	bl	80063e0 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000738:	2100      	movs	r1, #0
 800073a:	2001      	movs	r0, #1
 800073c:	f006 fd46 	bl	80071cc <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000740:	e007      	b.n	8000752 <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d103      	bne.n	8000752 <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
  return;
 8000750:	bf00      	nop
 8000752:	bf00      	nop
}
 8000754:	3728      	adds	r7, #40	; 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800075e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000762:	f006 fd63 	bl	800722c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}

0800076a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800076e:	bf00      	nop
}
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000786:	f006 fd51 	bl	800722c <UTIL_SEQ_Run>

  return;
 800078a:	bf00      	nop
}
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800079a:	2100      	movs	r1, #0
 800079c:	2008      	movs	r0, #8
 800079e:	f006 fe63 	bl	8007468 <UTIL_SEQ_SetTask>
  return;
 80007a2:	bf00      	nop
}
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80007b2:	2002      	movs	r0, #2
 80007b4:	f006 fec4 	bl	8007540 <UTIL_SEQ_SetEvt>
  return;
 80007b8:	bf00      	nop
}
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80007c8:	2002      	movs	r0, #2
 80007ca:	f006 fed9 	bl	8007580 <UTIL_SEQ_WaitEvt>
  return;
 80007ce:	bf00      	nop
}
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <LL_EXTI_EnableIT_0_31>:
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <LL_EXTI_EnableIT_0_31+0x24>)
 80007e2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80007e6:	4905      	ldr	r1, [pc, #20]	; (80007fc <LL_EXTI_EnableIT_0_31+0x24>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	58000800 	.word	0x58000800

08000800 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4904      	ldr	r1, [pc, #16]	; (8000820 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4313      	orrs	r3, r2
 8000812:	600b      	str	r3, [r1, #0]

}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	58000800 	.word	0x58000800

08000824 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <ReadRtcSsrValue+0x3c>)
 800082c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800082e:	b29b      	uxth	r3, r3
 8000830:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <ReadRtcSsrValue+0x3c>)
 8000834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000836:	b29b      	uxth	r3, r3
 8000838:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800083a:	e005      	b.n	8000848 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <ReadRtcSsrValue+0x3c>)
 8000842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000844:	b29b      	uxth	r3, r3
 8000846:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	429a      	cmp	r2, r3
 800084e:	d1f5      	bne.n	800083c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000850:	683b      	ldr	r3, [r7, #0]
}
 8000852:	4618      	mov	r0, r3
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40002800 	.word	0x40002800

08000864 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	460a      	mov	r2, r1
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	4613      	mov	r3, r2
 8000872:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000874:	79ba      	ldrb	r2, [r7, #6]
 8000876:	491d      	ldr	r1, [pc, #116]	; (80008ec <LinkTimerAfter+0x88>)
 8000878:	4613      	mov	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	440b      	add	r3, r1
 8000882:	3315      	adds	r3, #21
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	2b06      	cmp	r3, #6
 800088c:	d009      	beq.n	80008a2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800088e:	7bfa      	ldrb	r2, [r7, #15]
 8000890:	4916      	ldr	r1, [pc, #88]	; (80008ec <LinkTimerAfter+0x88>)
 8000892:	4613      	mov	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	4413      	add	r3, r2
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	440b      	add	r3, r1
 800089c:	3314      	adds	r3, #20
 800089e:	79fa      	ldrb	r2, [r7, #7]
 80008a0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80008a2:	79fa      	ldrb	r2, [r7, #7]
 80008a4:	4911      	ldr	r1, [pc, #68]	; (80008ec <LinkTimerAfter+0x88>)
 80008a6:	4613      	mov	r3, r2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	4413      	add	r3, r2
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	440b      	add	r3, r1
 80008b0:	3315      	adds	r3, #21
 80008b2:	7bfa      	ldrb	r2, [r7, #15]
 80008b4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80008b6:	79fa      	ldrb	r2, [r7, #7]
 80008b8:	490c      	ldr	r1, [pc, #48]	; (80008ec <LinkTimerAfter+0x88>)
 80008ba:	4613      	mov	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	4413      	add	r3, r2
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	440b      	add	r3, r1
 80008c4:	3314      	adds	r3, #20
 80008c6:	79ba      	ldrb	r2, [r7, #6]
 80008c8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80008ca:	79ba      	ldrb	r2, [r7, #6]
 80008cc:	4907      	ldr	r1, [pc, #28]	; (80008ec <LinkTimerAfter+0x88>)
 80008ce:	4613      	mov	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	440b      	add	r3, r1
 80008d8:	3315      	adds	r3, #21
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	701a      	strb	r2, [r3, #0]

  return;
 80008de:	bf00      	nop
}
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	20000028 	.word	0x20000028

080008f0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	460a      	mov	r2, r1
 80008fa:	71fb      	strb	r3, [r7, #7]
 80008fc:	4613      	mov	r3, r2
 80008fe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <LinkTimerBefore+0xb8>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	79ba      	ldrb	r2, [r7, #6]
 8000908:	429a      	cmp	r2, r3
 800090a:	d032      	beq.n	8000972 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800090c:	79ba      	ldrb	r2, [r7, #6]
 800090e:	4927      	ldr	r1, [pc, #156]	; (80009ac <LinkTimerBefore+0xbc>)
 8000910:	4613      	mov	r3, r2
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	4413      	add	r3, r2
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	440b      	add	r3, r1
 800091a:	3314      	adds	r3, #20
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000920:	7bfa      	ldrb	r2, [r7, #15]
 8000922:	4922      	ldr	r1, [pc, #136]	; (80009ac <LinkTimerBefore+0xbc>)
 8000924:	4613      	mov	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	4413      	add	r3, r2
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	440b      	add	r3, r1
 800092e:	3315      	adds	r3, #21
 8000930:	79fa      	ldrb	r2, [r7, #7]
 8000932:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	491d      	ldr	r1, [pc, #116]	; (80009ac <LinkTimerBefore+0xbc>)
 8000938:	4613      	mov	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	4413      	add	r3, r2
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	440b      	add	r3, r1
 8000942:	3315      	adds	r3, #21
 8000944:	79ba      	ldrb	r2, [r7, #6]
 8000946:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000948:	79fa      	ldrb	r2, [r7, #7]
 800094a:	4918      	ldr	r1, [pc, #96]	; (80009ac <LinkTimerBefore+0xbc>)
 800094c:	4613      	mov	r3, r2
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	4413      	add	r3, r2
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	440b      	add	r3, r1
 8000956:	3314      	adds	r3, #20
 8000958:	7bfa      	ldrb	r2, [r7, #15]
 800095a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800095c:	79ba      	ldrb	r2, [r7, #6]
 800095e:	4913      	ldr	r1, [pc, #76]	; (80009ac <LinkTimerBefore+0xbc>)
 8000960:	4613      	mov	r3, r2
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	4413      	add	r3, r2
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	440b      	add	r3, r1
 800096a:	3314      	adds	r3, #20
 800096c:	79fa      	ldrb	r2, [r7, #7]
 800096e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000970:	e014      	b.n	800099c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000972:	79fa      	ldrb	r2, [r7, #7]
 8000974:	490d      	ldr	r1, [pc, #52]	; (80009ac <LinkTimerBefore+0xbc>)
 8000976:	4613      	mov	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	4413      	add	r3, r2
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	440b      	add	r3, r1
 8000980:	3315      	adds	r3, #21
 8000982:	79ba      	ldrb	r2, [r7, #6]
 8000984:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000986:	79ba      	ldrb	r2, [r7, #6]
 8000988:	4908      	ldr	r1, [pc, #32]	; (80009ac <LinkTimerBefore+0xbc>)
 800098a:	4613      	mov	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	4413      	add	r3, r2
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	440b      	add	r3, r1
 8000994:	3314      	adds	r3, #20
 8000996:	79fa      	ldrb	r2, [r7, #7]
 8000998:	701a      	strb	r2, [r3, #0]
  return;
 800099a:	bf00      	nop
}
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	200000b8 	.word	0x200000b8
 80009ac:	20000028 	.word	0x20000028

080009b0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009ba:	4b4e      	ldr	r3, [pc, #312]	; (8000af4 <linkTimer+0x144>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b06      	cmp	r3, #6
 80009c2:	d118      	bne.n	80009f6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009c4:	4b4b      	ldr	r3, [pc, #300]	; (8000af4 <linkTimer+0x144>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b4b      	ldr	r3, [pc, #300]	; (8000af8 <linkTimer+0x148>)
 80009cc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80009ce:	4a49      	ldr	r2, [pc, #292]	; (8000af4 <linkTimer+0x144>)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80009d4:	79fa      	ldrb	r2, [r7, #7]
 80009d6:	4949      	ldr	r1, [pc, #292]	; (8000afc <linkTimer+0x14c>)
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	440b      	add	r3, r1
 80009e2:	3315      	adds	r3, #21
 80009e4:	2206      	movs	r2, #6
 80009e6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80009e8:	4b45      	ldr	r3, [pc, #276]	; (8000b00 <linkTimer+0x150>)
 80009ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009ee:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	81fb      	strh	r3, [r7, #14]
 80009f4:	e078      	b.n	8000ae8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80009f6:	f000 f909 	bl	8000c0c <ReturnTimeElapsed>
 80009fa:	4603      	mov	r3, r0
 80009fc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80009fe:	79fa      	ldrb	r2, [r7, #7]
 8000a00:	493e      	ldr	r1, [pc, #248]	; (8000afc <linkTimer+0x14c>)
 8000a02:	4613      	mov	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	4413      	add	r3, r2
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	440b      	add	r3, r1
 8000a0c:	3308      	adds	r3, #8
 8000a0e:	6819      	ldr	r1, [r3, #0]
 8000a10:	89fb      	ldrh	r3, [r7, #14]
 8000a12:	79fa      	ldrb	r2, [r7, #7]
 8000a14:	4419      	add	r1, r3
 8000a16:	4839      	ldr	r0, [pc, #228]	; (8000afc <linkTimer+0x14c>)
 8000a18:	4613      	mov	r3, r2
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	4413      	add	r3, r2
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	4403      	add	r3, r0
 8000a22:	3308      	adds	r3, #8
 8000a24:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	4934      	ldr	r1, [pc, #208]	; (8000afc <linkTimer+0x14c>)
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	440b      	add	r3, r1
 8000a34:	3308      	adds	r3, #8
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <linkTimer+0x144>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4619      	mov	r1, r3
 8000a42:	4a2e      	ldr	r2, [pc, #184]	; (8000afc <linkTimer+0x14c>)
 8000a44:	460b      	mov	r3, r1
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	440b      	add	r3, r1
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	4413      	add	r3, r2
 8000a4e:	3308      	adds	r3, #8
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d337      	bcc.n	8000ac8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000a58:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <linkTimer+0x144>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000a5e:	7b7a      	ldrb	r2, [r7, #13]
 8000a60:	4926      	ldr	r1, [pc, #152]	; (8000afc <linkTimer+0x14c>)
 8000a62:	4613      	mov	r3, r2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4413      	add	r3, r2
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	440b      	add	r3, r1
 8000a6c:	3315      	adds	r3, #21
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a72:	e013      	b.n	8000a9c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000a74:	7b7a      	ldrb	r2, [r7, #13]
 8000a76:	4921      	ldr	r1, [pc, #132]	; (8000afc <linkTimer+0x14c>)
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	440b      	add	r3, r1
 8000a82:	3315      	adds	r3, #21
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000a88:	7b7a      	ldrb	r2, [r7, #13]
 8000a8a:	491c      	ldr	r1, [pc, #112]	; (8000afc <linkTimer+0x14c>)
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	440b      	add	r3, r1
 8000a96:	3315      	adds	r3, #21
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a9c:	7b3b      	ldrb	r3, [r7, #12]
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d00b      	beq.n	8000aba <linkTimer+0x10a>
 8000aa2:	7b3a      	ldrb	r2, [r7, #12]
 8000aa4:	4915      	ldr	r1, [pc, #84]	; (8000afc <linkTimer+0x14c>)
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	440b      	add	r3, r1
 8000ab0:	3308      	adds	r3, #8
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	68ba      	ldr	r2, [r7, #8]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d2dc      	bcs.n	8000a74 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000aba:	7b7a      	ldrb	r2, [r7, #13]
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fecf 	bl	8000864 <LinkTimerAfter>
 8000ac6:	e00f      	b.n	8000ae8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <linkTimer+0x144>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff0c 	bl	80008f0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <linkTimer+0x144>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <linkTimer+0x148>)
 8000ae0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <linkTimer+0x144>)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000ae8:	89fb      	ldrh	r3, [r7, #14]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000b8 	.word	0x200000b8
 8000af8:	200000b9 	.word	0x200000b9
 8000afc:	20000028 	.word	0x20000028
 8000b00:	200000bc 	.word	0x200000bc

08000b04 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	4613      	mov	r3, r2
 8000b12:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000b14:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <UnlinkTimer+0xf8>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	79fa      	ldrb	r2, [r7, #7]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d111      	bne.n	8000b44 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000b20:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <UnlinkTimer+0xf8>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <UnlinkTimer+0xfc>)
 8000b28:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000b2a:	79fa      	ldrb	r2, [r7, #7]
 8000b2c:	4935      	ldr	r1, [pc, #212]	; (8000c04 <UnlinkTimer+0x100>)
 8000b2e:	4613      	mov	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	4413      	add	r3, r2
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	440b      	add	r3, r1
 8000b38:	3315      	adds	r3, #21
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <UnlinkTimer+0xf8>)
 8000b40:	701a      	strb	r2, [r3, #0]
 8000b42:	e03e      	b.n	8000bc2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000b44:	79fa      	ldrb	r2, [r7, #7]
 8000b46:	492f      	ldr	r1, [pc, #188]	; (8000c04 <UnlinkTimer+0x100>)
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	440b      	add	r3, r1
 8000b52:	3314      	adds	r3, #20
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000b58:	79fa      	ldrb	r2, [r7, #7]
 8000b5a:	492a      	ldr	r1, [pc, #168]	; (8000c04 <UnlinkTimer+0x100>)
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	4413      	add	r3, r2
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	440b      	add	r3, r1
 8000b66:	3315      	adds	r3, #21
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000b6c:	79f9      	ldrb	r1, [r7, #7]
 8000b6e:	7bfa      	ldrb	r2, [r7, #15]
 8000b70:	4824      	ldr	r0, [pc, #144]	; (8000c04 <UnlinkTimer+0x100>)
 8000b72:	460b      	mov	r3, r1
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	440b      	add	r3, r1
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	4403      	add	r3, r0
 8000b7c:	3315      	adds	r3, #21
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b2d8      	uxtb	r0, r3
 8000b82:	4920      	ldr	r1, [pc, #128]	; (8000c04 <UnlinkTimer+0x100>)
 8000b84:	4613      	mov	r3, r2
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	4413      	add	r3, r2
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	440b      	add	r3, r1
 8000b8e:	3315      	adds	r3, #21
 8000b90:	4602      	mov	r2, r0
 8000b92:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b94:	7bbb      	ldrb	r3, [r7, #14]
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d013      	beq.n	8000bc2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000b9a:	79f9      	ldrb	r1, [r7, #7]
 8000b9c:	7bba      	ldrb	r2, [r7, #14]
 8000b9e:	4819      	ldr	r0, [pc, #100]	; (8000c04 <UnlinkTimer+0x100>)
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	440b      	add	r3, r1
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	4403      	add	r3, r0
 8000baa:	3314      	adds	r3, #20
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2d8      	uxtb	r0, r3
 8000bb0:	4914      	ldr	r1, [pc, #80]	; (8000c04 <UnlinkTimer+0x100>)
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	440b      	add	r3, r1
 8000bbc:	3314      	adds	r3, #20
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000bc2:	79fa      	ldrb	r2, [r7, #7]
 8000bc4:	490f      	ldr	r1, [pc, #60]	; (8000c04 <UnlinkTimer+0x100>)
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	440b      	add	r3, r1
 8000bd0:	330c      	adds	r3, #12
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <UnlinkTimer+0xf8>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b06      	cmp	r3, #6
 8000bde:	d107      	bne.n	8000bf0 <UnlinkTimer+0xec>
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d104      	bne.n	8000bf0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <UnlinkTimer+0x104>)
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bec:	601a      	str	r2, [r3, #0]
  }

  return;
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
}
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	200000b8 	.word	0x200000b8
 8000c00:	200000b9 	.word	0x200000b9
 8000c04:	20000028 	.word	0x20000028
 8000c08:	200000bc 	.word	0x200000bc

08000c0c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <ReturnTimeElapsed+0x70>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c1a:	d026      	beq.n	8000c6a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000c1c:	f7ff fe02 	bl	8000824 <ReadRtcSsrValue>
 8000c20:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <ReturnTimeElapsed+0x70>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d805      	bhi.n	8000c38 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <ReturnTimeElapsed+0x70>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	e00a      	b.n	8000c4e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <ReturnTimeElapsed+0x74>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <ReturnTimeElapsed+0x70>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <ReturnTimeElapsed+0x78>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	fb02 f303 	mul.w	r3, r2, r3
 8000c5a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <ReturnTimeElapsed+0x7c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	40d3      	lsrs	r3, r2
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	e001      	b.n	8000c6e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	b29b      	uxth	r3, r3
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200000bc 	.word	0x200000bc
 8000c80:	200001be 	.word	0x200001be
 8000c84:	200001bd 	.word	0x200001bd
 8000c88:	200001bc 	.word	0x200001bc

08000c8c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d108      	bne.n	8000cae <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000c9c:	f7ff fdc2 	bl	8000824 <ReadRtcSsrValue>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a24      	ldr	r2, [pc, #144]	; (8000d34 <RestartWakeupCounter+0xa8>)
 8000ca4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ca6:	2003      	movs	r0, #3
 8000ca8:	f001 f8c7 	bl	8001e3a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000cac:	e03e      	b.n	8000d2c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d803      	bhi.n	8000cbc <RestartWakeupCounter+0x30>
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <RestartWakeupCounter+0xac>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d002      	beq.n	8000cc2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000cc2:	bf00      	nop
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <RestartWakeupCounter+0xb0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0f7      	beq.n	8000cc4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <RestartWakeupCounter+0xb0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <RestartWakeupCounter+0xb0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ce8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <RestartWakeupCounter+0xb4>)
 8000cec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000cf0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f001 f8af 	bl	8001e56 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <RestartWakeupCounter+0xb8>)
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	0c1b      	lsrs	r3, r3, #16
 8000cfe:	041b      	lsls	r3, r3, #16
 8000d00:	88fa      	ldrh	r2, [r7, #6]
 8000d02:	4910      	ldr	r1, [pc, #64]	; (8000d44 <RestartWakeupCounter+0xb8>)
 8000d04:	4313      	orrs	r3, r2
 8000d06:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000d08:	f7ff fd8c 	bl	8000824 <ReadRtcSsrValue>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	4a09      	ldr	r2, [pc, #36]	; (8000d34 <RestartWakeupCounter+0xa8>)
 8000d10:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <RestartWakeupCounter+0xb0>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <RestartWakeupCounter+0xb0>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d24:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000d26:	f3af 8000 	nop.w
  return ;
 8000d2a:	bf00      	nop
}
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200000bc 	.word	0x200000bc
 8000d38:	200001bc 	.word	0x200001bc
 8000d3c:	200001b8 	.word	0x200001b8
 8000d40:	58000800 	.word	0x58000800
 8000d44:	40002800 	.word	0x40002800

08000d48 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d4e:	4b47      	ldr	r3, [pc, #284]	; (8000e6c <RescheduleTimerList+0x124>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d5a:	d108      	bne.n	8000d6e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000d5c:	bf00      	nop
 8000d5e:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <RescheduleTimerList+0x128>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1f7      	bne.n	8000d5e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000d6e:	4b40      	ldr	r3, [pc, #256]	; (8000e70 <RescheduleTimerList+0x128>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	4b3e      	ldr	r3, [pc, #248]	; (8000e70 <RescheduleTimerList+0x128>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d80:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000d82:	4b3c      	ldr	r3, [pc, #240]	; (8000e74 <RescheduleTimerList+0x12c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000d88:	7bfa      	ldrb	r2, [r7, #15]
 8000d8a:	493b      	ldr	r1, [pc, #236]	; (8000e78 <RescheduleTimerList+0x130>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3308      	adds	r3, #8
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000d9c:	f7ff ff36 	bl	8000c0c <ReturnTimeElapsed>
 8000da0:	4603      	mov	r3, r0
 8000da2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d205      	bcs.n	8000db8 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000db0:	4b32      	ldr	r3, [pc, #200]	; (8000e7c <RescheduleTimerList+0x134>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
 8000db6:	e04d      	b.n	8000e54 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	4a31      	ldr	r2, [pc, #196]	; (8000e80 <RescheduleTimerList+0x138>)
 8000dbc:	8812      	ldrh	r2, [r2, #0]
 8000dbe:	b292      	uxth	r2, r2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d906      	bls.n	8000dd8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000dca:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <RescheduleTimerList+0x138>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000dd0:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <RescheduleTimerList+0x134>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e03d      	b.n	8000e54 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <RescheduleTimerList+0x134>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000de8:	e034      	b.n	8000e54 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000dea:	7bfa      	ldrb	r2, [r7, #15]
 8000dec:	4922      	ldr	r1, [pc, #136]	; (8000e78 <RescheduleTimerList+0x130>)
 8000dee:	4613      	mov	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	440b      	add	r3, r1
 8000df8:	3308      	adds	r3, #8
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d20a      	bcs.n	8000e18 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000e02:	7bfa      	ldrb	r2, [r7, #15]
 8000e04:	491c      	ldr	r1, [pc, #112]	; (8000e78 <RescheduleTimerList+0x130>)
 8000e06:	4613      	mov	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	440b      	add	r3, r1
 8000e10:	3308      	adds	r3, #8
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e013      	b.n	8000e40 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000e18:	7bfa      	ldrb	r2, [r7, #15]
 8000e1a:	4917      	ldr	r1, [pc, #92]	; (8000e78 <RescheduleTimerList+0x130>)
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	440b      	add	r3, r1
 8000e26:	3308      	adds	r3, #8
 8000e28:	6819      	ldr	r1, [r3, #0]
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	7bfa      	ldrb	r2, [r7, #15]
 8000e2e:	1ac9      	subs	r1, r1, r3
 8000e30:	4811      	ldr	r0, [pc, #68]	; (8000e78 <RescheduleTimerList+0x130>)
 8000e32:	4613      	mov	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	4403      	add	r3, r0
 8000e3c:	3308      	adds	r3, #8
 8000e3e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000e40:	7bfa      	ldrb	r2, [r7, #15]
 8000e42:	490d      	ldr	r1, [pc, #52]	; (8000e78 <RescheduleTimerList+0x130>)
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	440b      	add	r3, r1
 8000e4e:	3315      	adds	r3, #21
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d1c7      	bne.n	8000dea <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000e5a:	89bb      	ldrh	r3, [r7, #12]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff15 	bl	8000c8c <RestartWakeupCounter>

  return ;
 8000e62:	bf00      	nop
}
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40002800 	.word	0x40002800
 8000e70:	200001b8 	.word	0x200001b8
 8000e74:	200000b8 	.word	0x200000b8
 8000e78:	20000028 	.word	0x20000028
 8000e7c:	200000c0 	.word	0x200000c0
 8000e80:	200001c0 	.word	0x200001c0

08000e84 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8000e8e:	617b      	str	r3, [r7, #20]
  return(result);
 8000e90:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e98:	4b5f      	ldr	r3, [pc, #380]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	22ca      	movs	r2, #202	; 0xca
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
 8000ea2:	4b5d      	ldr	r3, [pc, #372]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2253      	movs	r2, #83	; 0x53
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000eac:	4b5a      	ldr	r3, [pc, #360]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	4b58      	ldr	r3, [pc, #352]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ebe:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000ec0:	4b56      	ldr	r3, [pc, #344]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000ec8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ecc:	4954      	ldr	r1, [pc, #336]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	330c      	adds	r3, #12
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d172      	bne.n	8000fc8 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000ee2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ee6:	494e      	ldr	r1, [pc, #312]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	440b      	add	r3, r1
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000ef6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000efa:	4949      	ldr	r1, [pc, #292]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	3310      	adds	r3, #16
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000f0c:	4b45      	ldr	r3, [pc, #276]	; (8001024 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d050      	beq.n	8000fb8 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000f16:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f1a:	4941      	ldr	r1, [pc, #260]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	440b      	add	r3, r1
 8000f26:	330d      	adds	r3, #13
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d126      	bne.n	8000f7e <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000f30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f34:	2101      	movs	r1, #1
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fde4 	bl	8000b04 <UnlinkTimer>
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	f383 8810 	msr	PRIMASK, r3
}
 8000f46:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000f48:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f4c:	4934      	ldr	r1, [pc, #208]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	440b      	add	r3, r1
 8000f58:	3304      	adds	r3, #4
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f9d4 	bl	8001310 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f68:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	22ca      	movs	r2, #202	; 0xca
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2253      	movs	r2, #83	; 0x53
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
 8000f7c:	e014      	b.n	8000fa8 <HW_TS_RTC_Wakeup_Handler+0x124>
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f383 8810 	msr	PRIMASK, r3
}
 8000f88:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000f8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f932 	bl	80011f8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f94:	4b20      	ldr	r3, [pc, #128]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	22ca      	movs	r2, #202	; 0xca
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2253      	movs	r2, #83	; 0x53
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	69b8      	ldr	r0, [r7, #24]
 8000fb2:	f000 fa35 	bl	8001420 <HW_TS_RTC_Int_AppNot>
 8000fb6:	e025      	b.n	8001004 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8000fb8:	f7ff fec6 	bl	8000d48 <RescheduleTimerList>
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	f383 8810 	msr	PRIMASK, r3
}
 8000fc6:	e01d      	b.n	8001004 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000fc8:	bf00      	nop
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f7      	beq.n	8000fca <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000fee:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8000ff2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f383 8810 	msr	PRIMASK, r3
}
 8001002:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	22ff      	movs	r2, #255	; 0xff
 800100c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800100e:	bf00      	nop
}
 8001010:	3728      	adds	r7, #40	; 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001b8 	.word	0x200001b8
 800101c:	200000b8 	.word	0x200000b8
 8001020:	20000028 	.word	0x20000028
 8001024:	200000c0 	.word	0x200000c0
 8001028:	58000800 	.word	0x58000800

0800102c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001038:	4a64      	ldr	r2, [pc, #400]	; (80011cc <HW_TS_Init+0x1a0>)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800103e:	4b63      	ldr	r3, [pc, #396]	; (80011cc <HW_TS_Init+0x1a0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	22ca      	movs	r2, #202	; 0xca
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
 8001048:	4b60      	ldr	r3, [pc, #384]	; (80011cc <HW_TS_Init+0x1a0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2253      	movs	r2, #83	; 0x53
 8001050:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001052:	4b5f      	ldr	r3, [pc, #380]	; (80011d0 <HW_TS_Init+0x1a4>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	4a5e      	ldr	r2, [pc, #376]	; (80011d0 <HW_TS_Init+0x1a4>)
 8001058:	f043 0320 	orr.w	r3, r3, #32
 800105c:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800105e:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <HW_TS_Init+0x1a4>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	b2db      	uxtb	r3, r3
 800106a:	f1c3 0304 	rsb	r3, r3, #4
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b58      	ldr	r3, [pc, #352]	; (80011d4 <HW_TS_Init+0x1a8>)
 8001072:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001074:	4b56      	ldr	r3, [pc, #344]	; (80011d0 <HW_TS_Init+0x1a4>)
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800107c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001080:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	fa92 f2a2 	rbit	r2, r2
 8001088:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	2a00      	cmp	r2, #0
 8001092:	d101      	bne.n	8001098 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001094:	2220      	movs	r2, #32
 8001096:	e003      	b.n	80010a0 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	fab2 f282 	clz	r2, r2
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	40d3      	lsrs	r3, r2
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	3301      	adds	r3, #1
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b4b      	ldr	r3, [pc, #300]	; (80011d8 <HW_TS_Init+0x1ac>)
 80010aa:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80010ac:	4b48      	ldr	r3, [pc, #288]	; (80011d0 <HW_TS_Init+0x1a4>)
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	3301      	adds	r3, #1
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	4b47      	ldr	r3, [pc, #284]	; (80011dc <HW_TS_Init+0x1b0>)
 80010be:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <HW_TS_Init+0x1b0>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	4a44      	ldr	r2, [pc, #272]	; (80011d8 <HW_TS_Init+0x1ac>)
 80010c8:	7812      	ldrb	r2, [r2, #0]
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80010d2:	4a40      	ldr	r2, [pc, #256]	; (80011d4 <HW_TS_Init+0x1a8>)
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	40d3      	lsrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d904      	bls.n	80010ee <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80010e4:	4b3e      	ldr	r3, [pc, #248]	; (80011e0 <HW_TS_Init+0x1b4>)
 80010e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ea:	801a      	strh	r2, [r3, #0]
 80010ec:	e003      	b.n	80010f6 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <HW_TS_Init+0x1b4>)
 80010f4:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80010f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010fa:	f7ff fb81 	bl	8000800 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80010fe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001102:	f7ff fb69 	bl	80007d8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d143      	bne.n	8001194 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800110c:	4b35      	ldr	r3, [pc, #212]	; (80011e4 <HW_TS_Init+0x1b8>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001112:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <HW_TS_Init+0x1bc>)
 8001114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001118:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800111a:	2300      	movs	r3, #0
 800111c:	77fb      	strb	r3, [r7, #31]
 800111e:	e00c      	b.n	800113a <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001120:	7ffa      	ldrb	r2, [r7, #31]
 8001122:	4932      	ldr	r1, [pc, #200]	; (80011ec <HW_TS_Init+0x1c0>)
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	330c      	adds	r3, #12
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001134:	7ffb      	ldrb	r3, [r7, #31]
 8001136:	3301      	adds	r3, #1
 8001138:	77fb      	strb	r3, [r7, #31]
 800113a:	7ffb      	ldrb	r3, [r7, #31]
 800113c:	2b05      	cmp	r3, #5
 800113e:	d9ef      	bls.n	8001120 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001140:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <HW_TS_Init+0x1c4>)
 8001142:	2206      	movs	r2, #6
 8001144:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <HW_TS_Init+0x1a0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <HW_TS_Init+0x1a0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001158:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HW_TS_Init+0x1a0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HW_TS_Init+0x1a0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800116e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <HW_TS_Init+0x1c8>)
 8001172:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001176:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001178:	2003      	movs	r0, #3
 800117a:	f000 fe6c 	bl	8001e56 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HW_TS_Init+0x1a0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HW_TS_Init+0x1a0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	e00a      	b.n	80011aa <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HW_TS_Init+0x1a0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 fe48 	bl	8001e3a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HW_TS_Init+0x1a0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	22ff      	movs	r2, #255	; 0xff
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80011b4:	2200      	movs	r2, #0
 80011b6:	2103      	movs	r1, #3
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 fdfc 	bl	8001db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011be:	2003      	movs	r0, #3
 80011c0:	f000 fe13 	bl	8001dea <HAL_NVIC_EnableIRQ>

  return;
 80011c4:	bf00      	nop
}
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200001b8 	.word	0x200001b8
 80011d0:	40002800 	.word	0x40002800
 80011d4:	200001bc 	.word	0x200001bc
 80011d8:	200001bd 	.word	0x200001bd
 80011dc:	200001be 	.word	0x200001be
 80011e0:	200001c0 	.word	0x200001c0
 80011e4:	200000c0 	.word	0x200000c0
 80011e8:	200000bc 	.word	0x200000bc
 80011ec:	20000028 	.word	0x20000028
 80011f0:	200000b8 	.word	0x200000b8
 80011f4:	58000800 	.word	0x58000800

080011f8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001202:	f3ef 8310 	mrs	r3, PRIMASK
 8001206:	60fb      	str	r3, [r7, #12]
  return(result);
 8001208:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800120a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001210:	2003      	movs	r0, #3
 8001212:	f000 fdf8 	bl	8001e06 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001216:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <HW_TS_Stop+0x100>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	22ca      	movs	r2, #202	; 0xca
 800121e:	625a      	str	r2, [r3, #36]	; 0x24
 8001220:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <HW_TS_Stop+0x100>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2253      	movs	r2, #83	; 0x53
 8001228:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800122a:	79fa      	ldrb	r2, [r7, #7]
 800122c:	4933      	ldr	r1, [pc, #204]	; (80012fc <HW_TS_Stop+0x104>)
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	440b      	add	r3, r1
 8001238:	330c      	adds	r3, #12
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d148      	bne.n	80012d4 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fc5c 	bl	8000b04 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800124c:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <HW_TS_Stop+0x108>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001252:	7cfb      	ldrb	r3, [r7, #19]
 8001254:	2b06      	cmp	r3, #6
 8001256:	d135      	bne.n	80012c4 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001258:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HW_TS_Stop+0x10c>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001264:	d108      	bne.n	8001278 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001266:	bf00      	nop
 8001268:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <HW_TS_Stop+0x100>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f7      	bne.n	8001268 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HW_TS_Stop+0x100>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <HW_TS_Stop+0x100>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800128a:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800128c:	bf00      	nop
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <HW_TS_Stop+0x100>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f7      	beq.n	800128e <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HW_TS_Stop+0x100>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <HW_TS_Stop+0x100>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80012b2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <HW_TS_Stop+0x110>)
 80012b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012ba:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 fdca 	bl	8001e56 <HAL_NVIC_ClearPendingIRQ>
 80012c2:	e007      	b.n	80012d4 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <HW_TS_Stop+0x114>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	7cfa      	ldrb	r2, [r7, #19]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d001      	beq.n	80012d4 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 80012d0:	f7ff fd3a 	bl	8000d48 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HW_TS_Stop+0x100>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	22ff      	movs	r2, #255	; 0xff
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012de:	2003      	movs	r0, #3
 80012e0:	f000 fd83 	bl	8001dea <HAL_NVIC_EnableIRQ>
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	f383 8810 	msr	PRIMASK, r3
}
 80012ee:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80012f0:	bf00      	nop
}
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200001b8 	.word	0x200001b8
 80012fc:	20000028 	.word	0x20000028
 8001300:	200000b8 	.word	0x200000b8
 8001304:	40002800 	.word	0x40002800
 8001308:	58000800 	.word	0x58000800
 800130c:	200000b9 	.word	0x200000b9

08001310 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800131c:	79fa      	ldrb	r2, [r7, #7]
 800131e:	493c      	ldr	r1, [pc, #240]	; (8001410 <HW_TS_Start+0x100>)
 8001320:	4613      	mov	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4413      	add	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	440b      	add	r3, r1
 800132a:	330c      	adds	r3, #12
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d103      	bne.n	800133c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff5e 	bl	80011f8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800133c:	f3ef 8310 	mrs	r3, PRIMASK
 8001340:	60fb      	str	r3, [r7, #12]
  return(result);
 8001342:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001344:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001346:	b672      	cpsid	i
}
 8001348:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800134a:	2003      	movs	r0, #3
 800134c:	f000 fd5b 	bl	8001e06 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <HW_TS_Start+0x104>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	22ca      	movs	r2, #202	; 0xca
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <HW_TS_Start+0x104>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2253      	movs	r2, #83	; 0x53
 8001362:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001364:	79fa      	ldrb	r2, [r7, #7]
 8001366:	492a      	ldr	r1, [pc, #168]	; (8001410 <HW_TS_Start+0x100>)
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	440b      	add	r3, r1
 8001372:	330c      	adds	r3, #12
 8001374:	2202      	movs	r2, #2
 8001376:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001378:	79fa      	ldrb	r2, [r7, #7]
 800137a:	4925      	ldr	r1, [pc, #148]	; (8001410 <HW_TS_Start+0x100>)
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	3308      	adds	r3, #8
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800138c:	79fa      	ldrb	r2, [r7, #7]
 800138e:	4920      	ldr	r1, [pc, #128]	; (8001410 <HW_TS_Start+0x100>)
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	440b      	add	r3, r1
 800139a:	3304      	adds	r3, #4
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fb04 	bl	80009b0 <linkTimer>
 80013a8:	4603      	mov	r3, r0
 80013aa:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HW_TS_Start+0x108>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HW_TS_Start+0x10c>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	7c7a      	ldrb	r2, [r7, #17]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d002      	beq.n	80013c4 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 80013be:	f7ff fcc3 	bl	8000d48 <RescheduleTimerList>
 80013c2:	e013      	b.n	80013ec <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80013c4:	79fa      	ldrb	r2, [r7, #7]
 80013c6:	4912      	ldr	r1, [pc, #72]	; (8001410 <HW_TS_Start+0x100>)
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	3308      	adds	r3, #8
 80013d4:	6819      	ldr	r1, [r3, #0]
 80013d6:	8a7b      	ldrh	r3, [r7, #18]
 80013d8:	79fa      	ldrb	r2, [r7, #7]
 80013da:	1ac9      	subs	r1, r1, r3
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <HW_TS_Start+0x100>)
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4403      	add	r3, r0
 80013e8:	3308      	adds	r3, #8
 80013ea:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HW_TS_Start+0x104>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	22ff      	movs	r2, #255	; 0xff
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013f6:	2003      	movs	r0, #3
 80013f8:	f000 fcf7 	bl	8001dea <HAL_NVIC_EnableIRQ>
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	f383 8810 	msr	PRIMASK, r3
}
 8001406:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001408:	bf00      	nop
}
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000028 	.word	0x20000028
 8001414:	200001b8 	.word	0x200001b8
 8001418:	200000b8 	.word	0x200000b8
 800141c:	200000b9 	.word	0x200000b9

08001420 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	460b      	mov	r3, r1
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4798      	blx	r3

  return;
 8001432:	bf00      	nop
}
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <LL_RCC_LSE_SetDriveCapability>:
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800144a:	f023 0218 	bic.w	r2, r3, #24
 800144e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4313      	orrs	r3, r2
 8001456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <LL_AHB2_GRP1_EnableClock>:
{
 8001466:	b480      	push	{r7}
 8001468:	b085      	sub	sp, #20
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800146e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001474:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4313      	orrs	r3, r2
 800147c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800147e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4013      	ands	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149c:	f000 faca 	bl	8001a34 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80014a0:	f7fe ffee 	bl	8000480 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a4:	f000 f810 	bl	80014c8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014a8:	f000 f870 	bl	800158c <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80014ac:	f000 f88e 	bl	80015cc <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b0:	f000 f8dc 	bl	800166c <MX_GPIO_Init>
  MX_RF_Init();
 80014b4:	f000 f89e 	bl	80015f4 <MX_RF_Init>
  MX_RTC_Init();
 80014b8:	f000 f8a4 	bl	8001604 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80014bc:	f7fe ffee 	bl	800049c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80014c0:	f7ff f94b 	bl	800075a <MX_APPE_Process>
 80014c4:	e7fc      	b.n	80014c0 <main+0x28>
	...

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b09a      	sub	sp, #104	; 0x68
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	2248      	movs	r2, #72	; 0x48
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f006 f918 	bl	800770c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
 80014ea:	615a      	str	r2, [r3, #20]
 80014ec:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014ee:	f000 ff25 	bl	800233c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff ffa1 	bl	800143a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <SystemClock_Config+0xc0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001500:	4a21      	ldr	r2, [pc, #132]	; (8001588 <SystemClock_Config+0xc0>)
 8001502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <SystemClock_Config+0xc0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001514:	2327      	movs	r3, #39	; 0x27
 8001516:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800151e:	2301      	movs	r3, #1
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001528:	2301      	movs	r3, #1
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800152c:	2340      	movs	r3, #64	; 0x40
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001530:	2300      	movs	r3, #0
 8001532:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001534:	23a0      	movs	r3, #160	; 0xa0
 8001536:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001538:	2300      	movs	r3, #0
 800153a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153c:	f107 0320 	add.w	r3, r7, #32
 8001540:	4618      	mov	r0, r3
 8001542:	f001 fa77 	bl	8002a34 <HAL_RCC_OscConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800154c:	f000 f8f6 	bl	800173c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001550:	236f      	movs	r3, #111	; 0x6f
 8001552:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2101      	movs	r1, #1
 8001570:	4618      	mov	r0, r3
 8001572:	f001 fdd3 	bl	800311c <HAL_RCC_ClockConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800157c:	f000 f8de 	bl	800173c <Error_Handler>
  }
}
 8001580:	bf00      	nop
 8001582:	3768      	adds	r7, #104	; 0x68
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	58000400 	.word	0x58000400

0800158c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b094      	sub	sp, #80	; 0x50
 8001590:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001592:	463b      	mov	r3, r7
 8001594:	2250      	movs	r2, #80	; 0x50
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f006 f8b7 	bl	800770c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800159e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015a2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80015a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015a8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80015aa:	2300      	movs	r3, #0
 80015ac:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b2:	463b      	mov	r3, r7
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 f9c2 	bl	800393e <HAL_RCCEx_PeriphCLKConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80015c0:	f000 f8bc 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80015c4:	bf00      	nop
 80015c6:	3750      	adds	r7, #80	; 0x50
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_IPCC_Init+0x20>)
 80015d2:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <MX_IPCC_Init+0x24>)
 80015d4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_IPCC_Init+0x20>)
 80015d8:	f000 fe2a 	bl	8002230 <HAL_IPCC_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80015e2:	f000 f8ab 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200001c4 	.word	0x200001c4
 80015f0:	58000c00 	.word	0x58000c00

080015f4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_RTC_Init+0x60>)
 800160a:	4a17      	ldr	r2, [pc, #92]	; (8001668 <MX_RTC_Init+0x64>)
 800160c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <MX_RTC_Init+0x60>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <MX_RTC_Init+0x60>)
 8001616:	220f      	movs	r2, #15
 8001618:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_RTC_Init+0x60>)
 800161c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001620:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <MX_RTC_Init+0x60>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_RTC_Init+0x60>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <MX_RTC_Init+0x60>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_RTC_Init+0x60>)
 8001636:	2200      	movs	r2, #0
 8001638:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800163a:	480a      	ldr	r0, [pc, #40]	; (8001664 <MX_RTC_Init+0x60>)
 800163c:	f002 fc06 	bl	8003e4c <HAL_RTC_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001646:	f000 f879 	bl	800173c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_RTC_Init+0x60>)
 8001650:	f002 fcea 	bl	8004028 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800165a:	f000 f86f 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000200 	.word	0x20000200
 8001668:	40002800 	.word	0x40002800

0800166c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001680:	2004      	movs	r0, #4
 8001682:	f7ff fef0 	bl	8001466 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	2002      	movs	r0, #2
 8001688:	f7ff feed 	bl	8001466 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	2001      	movs	r0, #1
 800168e:	f7ff feea 	bl	8001466 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001692:	2008      	movs	r0, #8
 8001694:	f7ff fee7 	bl	8001466 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2123      	movs	r1, #35	; 0x23
 800169c:	4824      	ldr	r0, [pc, #144]	; (8001730 <MX_GPIO_Init+0xc4>)
 800169e:	f000 fd71 	bl	8002184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016a2:	2310      	movs	r3, #16
 80016a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4820      	ldr	r0, [pc, #128]	; (8001734 <MX_GPIO_Init+0xc8>)
 80016b4:	f000 fbde 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80016b8:	2323      	movs	r3, #35	; 0x23
 80016ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4818      	ldr	r0, [pc, #96]	; (8001730 <MX_GPIO_Init+0xc4>)
 80016ce:	f000 fbd1 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80016e4:	230a      	movs	r3, #10
 80016e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	4619      	mov	r1, r3
 80016ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f0:	f000 fbc0 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80016f4:	2303      	movs	r3, #3
 80016f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	4619      	mov	r1, r3
 8001704:	480c      	ldr	r0, [pc, #48]	; (8001738 <MX_GPIO_Init+0xcc>)
 8001706:	f000 fbb5 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800170a:	23c0      	movs	r3, #192	; 0xc0
 800170c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800171a:	2307      	movs	r3, #7
 800171c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4803      	ldr	r0, [pc, #12]	; (8001730 <MX_GPIO_Init+0xc4>)
 8001724:	f000 fba6 	bl	8001e74 <HAL_GPIO_Init>

}
 8001728:	bf00      	nop
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	48000400 	.word	0x48000400
 8001734:	48000800 	.word	0x48000800
 8001738:	48000c00 	.word	0x48000c00

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001744:	e7fe      	b.n	8001744 <Error_Handler+0x8>

08001746 <LL_RCC_EnableRTC>:
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800174a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001752:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800175a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_AHB3_GRP1_EnableClock>:
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4313      	orrs	r3, r2
 800177e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001784:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800178c:	68fb      	ldr	r3, [r7, #12]
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4013      	ands	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80017d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80017d4:	f7ff ffc8 	bl	8001768 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	202e      	movs	r0, #46	; 0x2e
 80017de:	f000 faea 	bl	8001db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80017e2:	202e      	movs	r0, #46	; 0x2e
 80017e4:	f000 fb01 	bl	8001dea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <HAL_IPCC_MspInit+0x44>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d113      	bne.n	8001826 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80017fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001802:	f7ff ffb1 	bl	8001768 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	202c      	movs	r0, #44	; 0x2c
 800180c:	f000 fad3 	bl	8001db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001810:	202c      	movs	r0, #44	; 0x2c
 8001812:	f000 faea 	bl	8001dea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	202d      	movs	r0, #45	; 0x2d
 800181c:	f000 facb 	bl	8001db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001820:	202d      	movs	r0, #45	; 0x2d
 8001822:	f000 fae2 	bl	8001dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	58000c00 	.word	0x58000c00

08001834 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b096      	sub	sp, #88	; 0x58
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	2250      	movs	r2, #80	; 0x50
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f005 ff61 	bl	800770c <memset>
  if(hrtc->Instance==RTC)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <HAL_RTC_MspInit+0x64>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d11d      	bne.n	8001890 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001854:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001858:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800185a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800185e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	4618      	mov	r0, r3
 8001866:	f002 f86a 	bl	800393e <HAL_RCCEx_PeriphCLKConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001870:	f7ff ff64 	bl	800173c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001874:	f7ff ff67 	bl	8001746 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001878:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800187c:	f7ff ff8d 	bl	800179a <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	2003      	movs	r0, #3
 8001886:	f000 fa96 	bl	8001db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800188a:	2003      	movs	r0, #3
 800188c:	f000 faad 	bl	8001dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3758      	adds	r7, #88	; 0x58
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40002800 	.word	0x40002800

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <NMI_Handler+0x4>

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler+0x4>

080018ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler+0x4>

080018ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 f8fe 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80018f4:	f7ff fac6 	bl	8000e84 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001900:	f005 fb0e 	bl	8006f20 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800190c:	f005 fb40 	bl	8006f90 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001918:	f000 fc66 	bl	80021e8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <SystemInit+0x98>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a23      	ldr	r2, [pc, #140]	; (80019b8 <SystemInit+0x98>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001948:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800194c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800194e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <SystemInit+0x9c>)
 800195a:	4013      	ands	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800196a:	f023 0305 	bic.w	r3, r3, #5
 800196e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800197a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198a:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <SystemInit+0xa0>)
 800198c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800198e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <SystemInit+0xa0>)
 8001994:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00
 80019bc:	faf6fefb 	.word	0xfaf6fefb
 80019c0:	22041000 	.word	0x22041000

080019c4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80019c4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c8:	3304      	adds	r3, #4

080019ca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019cc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80019ce:	d3f9      	bcc.n	80019c4 <CopyDataInit>
  bx lr
 80019d0:	4770      	bx	lr

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80019d2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80019d4:	3004      	adds	r0, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80019d6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>
  bx lr
 80019da:	4770      	bx	lr

080019dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80019de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019e0:	f7ff ff9e 	bl	8001920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80019e4:	480b      	ldr	r0, [pc, #44]	; (8001a14 <LoopForever+0x8>)
 80019e6:	490c      	ldr	r1, [pc, #48]	; (8001a18 <LoopForever+0xc>)
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <LoopForever+0x10>)
 80019ea:	2300      	movs	r3, #0
 80019ec:	f7ff ffed 	bl	80019ca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80019f0:	480b      	ldr	r0, [pc, #44]	; (8001a20 <LoopForever+0x14>)
 80019f2:	490c      	ldr	r1, [pc, #48]	; (8001a24 <LoopForever+0x18>)
 80019f4:	2300      	movs	r3, #0
 80019f6:	f7ff ffee 	bl	80019d6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80019fa:	480b      	ldr	r0, [pc, #44]	; (8001a28 <LoopForever+0x1c>)
 80019fc:	490b      	ldr	r1, [pc, #44]	; (8001a2c <LoopForever+0x20>)
 80019fe:	2300      	movs	r3, #0
 8001a00:	f7ff ffe9 	bl	80019d6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a04:	f005 fe50 	bl	80076a8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001a08:	f7ff fd46 	bl	8001498 <main>

08001a0c <LoopForever>:

LoopForever:
  b LoopForever
 8001a0c:	e7fe      	b.n	8001a0c <LoopForever>
 8001a0e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001a10:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001a14:	20000004 	.word	0x20000004
 8001a18:	20000028 	.word	0x20000028
 8001a1c:	080079b0 	.word	0x080079b0
  INIT_BSS _sbss, _ebss
 8001a20:	2000019c 	.word	0x2000019c
 8001a24:	20000444 	.word	0x20000444
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001a28:	200301e4 	.word	0x200301e4
 8001a2c:	20030a67 	.word	0x20030a67

08001a30 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC1_IRQHandler>
	...

08001a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_Init+0x3c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <HAL_Init+0x3c>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	f000 f9a8 	bl	8001da0 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a50:	2000      	movs	r0, #0
 8001a52:	f000 f80f 	bl	8001a74 <HAL_InitTick>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	e001      	b.n	8001a66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a62:	f7ff feb3 	bl	80017cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a66:	79fb      	ldrb	r3, [r7, #7]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	58004000 	.word	0x58004000

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_InitTick+0x6c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d024      	beq.n	8001ad2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a88:	f001 fcf4 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <HAL_InitTick+0x6c>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	4619      	mov	r1, r3
 8001a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a98:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f9be 	bl	8001e22 <HAL_SYSTICK_Config>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10f      	bne.n	8001acc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b0f      	cmp	r3, #15
 8001ab0:	d809      	bhi.n	8001ac6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aba:	f000 f97c 	bl	8001db6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_InitTick+0x70>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e007      	b.n	8001ad6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	e004      	b.n	8001ad6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	e001      	b.n	8001ad6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	2000000c 	.word	0x2000000c
 8001ae4:	20000008 	.word	0x20000008

08001ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x20>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x24>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_IncTick+0x24>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	2000000c 	.word	0x2000000c
 8001b0c:	20000224 	.word	0x20000224

08001b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_GetTick+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000224 	.word	0x20000224

08001b28 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_GetTickPrio+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000008 	.word	0x20000008

08001b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b72:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60d3      	str	r3, [r2, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0b      	blt.n	8001bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4907      	ldr	r1, [pc, #28]	; (8001bdc <__NVIC_EnableIRQ+0x38>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db12      	blt.n	8001c18 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	490a      	ldr	r1, [pc, #40]	; (8001c24 <__NVIC_DisableIRQ+0x44>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	3320      	adds	r3, #32
 8001c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c0c:	f3bf 8f4f 	dsb	sy
}
 8001c10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c12:	f3bf 8f6f 	isb	sy
}
 8001c16:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100

08001c28 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db0c      	blt.n	8001c54 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	f003 021f 	and.w	r2, r3, #31
 8001c40:	4907      	ldr	r1, [pc, #28]	; (8001c60 <__NVIC_SetPendingIRQ+0x38>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	2001      	movs	r0, #1
 8001c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4e:	3340      	adds	r3, #64	; 0x40
 8001c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db0c      	blt.n	8001c90 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	4907      	ldr	r1, [pc, #28]	; (8001c9c <__NVIC_ClearPendingIRQ+0x38>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	2001      	movs	r0, #1
 8001c86:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8a:	3360      	adds	r3, #96	; 0x60
 8001c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100

08001ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	db0a      	blt.n	8001cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	490c      	ldr	r1, [pc, #48]	; (8001cec <__NVIC_SetPriority+0x4c>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc8:	e00a      	b.n	8001ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4908      	ldr	r1, [pc, #32]	; (8001cf0 <__NVIC_SetPriority+0x50>)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	3b04      	subs	r3, #4
 8001cd8:	0112      	lsls	r2, r2, #4
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	440b      	add	r3, r1
 8001cde:	761a      	strb	r2, [r3, #24]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000e100 	.word	0xe000e100
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f1c3 0307 	rsb	r3, r3, #7
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	bf28      	it	cs
 8001d12:	2304      	movcs	r3, #4
 8001d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	2b06      	cmp	r3, #6
 8001d1c:	d902      	bls.n	8001d24 <NVIC_EncodePriority+0x30>
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3b03      	subs	r3, #3
 8001d22:	e000      	b.n	8001d26 <NVIC_EncodePriority+0x32>
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	401a      	ands	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43d9      	mvns	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	4313      	orrs	r3, r2
         );
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3724      	adds	r7, #36	; 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d6c:	d301      	bcc.n	8001d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00f      	b.n	8001d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <SysTick_Config+0x40>)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d80:	f7ff ff8e 	bl	8001ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <SysTick_Config+0x40>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <SysTick_Config+0x40>)
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	e000e010 	.word	0xe000e010

08001da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff fec9 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc4:	f7ff fee0 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001dc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	6978      	ldr	r0, [r7, #20]
 8001dd0:	f7ff ff90 	bl	8001cf4 <NVIC_EncodePriority>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff5f 	bl	8001ca0 <__NVIC_SetPriority>
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fed3 	bl	8001ba4 <__NVIC_EnableIRQ>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fee3 	bl	8001be0 <__NVIC_DisableIRQ>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ff96 	bl	8001d5c <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff feed 	bl	8001c28 <__NVIC_SetPendingIRQ>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fefd 	bl	8001c64 <__NVIC_ClearPendingIRQ>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e82:	e14c      	b.n	800211e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 813e 	beq.w	8002118 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d005      	beq.n	8001eb4 <HAL_GPIO_Init+0x40>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d130      	bne.n	8001f16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eea:	2201      	movs	r2, #1
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f003 0201 	and.w	r2, r3, #1
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d017      	beq.n	8001f52 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d123      	bne.n	8001fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	220f      	movs	r2, #15
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	08da      	lsrs	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3208      	adds	r2, #8
 8001fa0:	6939      	ldr	r1, [r7, #16]
 8001fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0203 	and.w	r2, r3, #3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8098 	beq.w	8002118 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001fe8:	4a54      	ldr	r2, [pc, #336]	; (800213c <HAL_GPIO_Init+0x2c8>)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	3302      	adds	r3, #2
 8001ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	220f      	movs	r2, #15
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002012:	d019      	beq.n	8002048 <HAL_GPIO_Init+0x1d4>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a4a      	ldr	r2, [pc, #296]	; (8002140 <HAL_GPIO_Init+0x2cc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d013      	beq.n	8002044 <HAL_GPIO_Init+0x1d0>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a49      	ldr	r2, [pc, #292]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00d      	beq.n	8002040 <HAL_GPIO_Init+0x1cc>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a48      	ldr	r2, [pc, #288]	; (8002148 <HAL_GPIO_Init+0x2d4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d007      	beq.n	800203c <HAL_GPIO_Init+0x1c8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a47      	ldr	r2, [pc, #284]	; (800214c <HAL_GPIO_Init+0x2d8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d101      	bne.n	8002038 <HAL_GPIO_Init+0x1c4>
 8002034:	2304      	movs	r3, #4
 8002036:	e008      	b.n	800204a <HAL_GPIO_Init+0x1d6>
 8002038:	2307      	movs	r3, #7
 800203a:	e006      	b.n	800204a <HAL_GPIO_Init+0x1d6>
 800203c:	2303      	movs	r3, #3
 800203e:	e004      	b.n	800204a <HAL_GPIO_Init+0x1d6>
 8002040:	2302      	movs	r3, #2
 8002042:	e002      	b.n	800204a <HAL_GPIO_Init+0x1d6>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_GPIO_Init+0x1d6>
 8002048:	2300      	movs	r3, #0
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	f002 0203 	and.w	r2, r2, #3
 8002050:	0092      	lsls	r2, r2, #2
 8002052:	4093      	lsls	r3, r2
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800205a:	4938      	ldr	r1, [pc, #224]	; (800213c <HAL_GPIO_Init+0x2c8>)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3302      	adds	r3, #2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002068:	4b39      	ldr	r3, [pc, #228]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	43db      	mvns	r3, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800208c:	4a30      	ldr	r2, [pc, #192]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002092:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020b6:	4a26      	ldr	r2, [pc, #152]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020bc:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 80020be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020e2:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 80020ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002110:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3301      	adds	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	f47f aeab 	bne.w	8001e84 <HAL_GPIO_Init+0x10>
  }
}
 800212e:	bf00      	nop
 8002130:	bf00      	nop
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40010000 	.word	0x40010000
 8002140:	48000400 	.word	0x48000400
 8002144:	48000800 	.word	0x48000800
 8002148:	48000c00 	.word	0x48000c00
 800214c:	48001000 	.word	0x48001000
 8002150:	58000800 	.word	0x58000800

08002154 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	887b      	ldrh	r3, [r7, #2]
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e001      	b.n	8002176 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
 8002190:	4613      	mov	r3, r2
 8002192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002194:	787b      	ldrb	r3, [r7, #1]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021a0:	e002      	b.n	80021a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4013      	ands	r3, r2
 80021cc:	041a      	lsls	r2, r3, #16
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	43d9      	mvns	r1, r3
 80021d2:	887b      	ldrh	r3, [r7, #2]
 80021d4:	400b      	ands	r3, r1
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	619a      	str	r2, [r3, #24]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_HSEM_IRQHandler+0x30>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80021f4:	4b08      	ldr	r3, [pc, #32]	; (8002218 <HAL_HSEM_IRQHandler+0x30>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	4906      	ldr	r1, [pc, #24]	; (8002218 <HAL_HSEM_IRQHandler+0x30>)
 80021fe:	4013      	ands	r3, r2
 8002200:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <HAL_HSEM_IRQHandler+0x30>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f807 	bl	800221c <HAL_HSEM_FreeCallback>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	58001500 	.word	0x58001500

0800221c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d01e      	beq.n	8002280 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_IPCC_Init+0x60>)
 8002244:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d102      	bne.n	8002258 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff faca 	bl	80017ec <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002258:	68b8      	ldr	r0, [r7, #8]
 800225a:	f000 f85b 	bl	8002314 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f82c 	bl	80022c8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800227e:	e001      	b.n	8002284 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	58000c00 	.word	0x58000c00

08002294 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	4613      	mov	r3, r2
 80022a0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	4613      	mov	r3, r2
 80022ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	e00f      	b.n	80022f6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	4a0b      	ldr	r2, [pc, #44]	; (800230c <IPCC_SetDefaultCallbacks+0x44>)
 80022e0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3306      	adds	r3, #6
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	4a08      	ldr	r2, [pc, #32]	; (8002310 <IPCC_SetDefaultCallbacks+0x48>)
 80022ee:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	3301      	adds	r3, #1
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2b05      	cmp	r3, #5
 80022fa:	d9ec      	bls.n	80022d6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	08002295 	.word	0x08002295
 8002310:	080022af 	.word	0x080022af

08002314 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002328:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	223f      	movs	r2, #63	; 0x3f
 800232e:	609a      	str	r2, [r3, #8]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a04      	ldr	r2, [pc, #16]	; (8002358 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	58000400 	.word	0x58000400

0800235c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <HAL_PWREx_GetVoltageRange+0x18>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	58000400 	.word	0x58000400

08002378 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800238a:	d101      	bne.n	8002390 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_RCC_HSE_Enable>:
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <LL_RCC_HSE_Disable>:
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80023be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_RCC_HSE_IsReady>:
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80023dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023ea:	d101      	bne.n	80023f0 <LL_RCC_HSE_IsReady+0x18>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <LL_RCC_HSE_IsReady+0x1a>
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_RCC_HSI_Enable>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800240a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <LL_RCC_HSI_Disable>:
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800242c:	6013      	str	r3, [r2, #0]
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_RCC_HSI_IsReady>:
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800243c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244a:	d101      	bne.n	8002450 <LL_RCC_HSI_IsReady+0x18>
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <LL_RCC_HSI_IsReady+0x1a>
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_RCC_HSI_SetCalibTrimming>:
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	061b      	lsls	r3, r3, #24
 8002472:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_RCC_HSI48_Enable>:
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002492:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_RCC_HSI48_Disable>:
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80024ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <LL_RCC_HSI48_IsReady>:
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80024ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d101      	bne.n	80024e2 <LL_RCC_HSI48_IsReady+0x18>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <LL_RCC_HSI48_IsReady+0x1a>
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_RCC_LSE_Enable>:
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_RCC_LSE_Disable>:
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <LL_RCC_LSE_EnableBypass>:
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800254a:	bf00      	nop
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_RCC_LSE_DisableBypass>:
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002564:	f023 0304 	bic.w	r3, r3, #4
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <LL_RCC_LSE_IsReady>:
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800257a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b02      	cmp	r3, #2
 8002588:	d101      	bne.n	800258e <LL_RCC_LSE_IsReady+0x18>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <LL_RCC_LSE_IsReady+0x1a>
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <LL_RCC_LSI1_Enable>:
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800259e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_RCC_LSI1_Disable>:
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80025c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_RCC_LSI1_IsReady>:
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80025e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d101      	bne.n	80025f6 <LL_RCC_LSI1_IsReady+0x18>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <LL_RCC_LSI1_IsReady+0x1a>
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_RCC_LSI2_Enable>:
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002612:	f043 0304 	orr.w	r3, r3, #4
 8002616:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_RCC_LSI2_Disable>:
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_RCC_LSI2_IsReady>:
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b08      	cmp	r3, #8
 8002658:	d101      	bne.n	800265e <LL_RCC_LSI2_IsReady+0x18>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <LL_RCC_LSI2_IsReady+0x1a>
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <LL_RCC_LSI2_SetTrimming>:
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_RCC_MSI_Enable>:
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800269c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6013      	str	r3, [r2, #0]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <LL_RCC_MSI_Disable>:
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80026ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	6013      	str	r3, [r2, #0]
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_RCC_MSI_IsReady>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80026d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d101      	bne.n	80026ea <LL_RCC_MSI_IsReady+0x16>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <LL_RCC_MSI_IsReady+0x18>
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <LL_RCC_MSI_SetRange>:
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <LL_RCC_MSI_GetRange>:
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800272e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2bb0      	cmp	r3, #176	; 0xb0
 8002734:	d901      	bls.n	800273a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002736:	23b0      	movs	r3, #176	; 0xb0
 8002738:	607b      	str	r3, [r7, #4]
  return msiRange;
 800273a:	687b      	ldr	r3, [r7, #4]
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <LL_RCC_SetSysClkSource>:
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800277a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f023 0203 	bic.w	r2, r3, #3
 8002784:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_RCC_GetSysClkSource>:
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800279e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 030c 	and.w	r3, r3, #12
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_RCC_SetAHBPrescaler>:
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80027ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <LL_C2_RCC_SetAHBPrescaler>:
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80027e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_RCC_SetAHB4Prescaler>:
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800280e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002812:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002816:	f023 020f 	bic.w	r2, r3, #15
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_RCC_SetAPB1Prescaler>:
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800283c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002846:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4313      	orrs	r3, r2
 800284e:	608b      	str	r3, [r1, #8]
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_RCC_SetAPB2Prescaler>:
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800286e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_RCC_GetAHBPrescaler>:
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_RCC_GetAHB4Prescaler>:
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <LL_RCC_PLL_Enable>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ca:	6013      	str	r3, [r2, #0]
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <LL_RCC_PLL_Disable>:
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80028da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028e8:	6013      	str	r3, [r2, #0]
}
 80028ea:	bf00      	nop
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_RCC_PLL_IsReady>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80028f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002906:	d101      	bne.n	800290c <LL_RCC_PLL_IsReady+0x18>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <LL_RCC_PLL_IsReady+0x1a>
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_RCC_PLL_GetN>:
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_RCC_PLL_GetR>:
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <LL_RCC_PLL_GetDivider>:
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800294e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <LL_RCC_PLL_GetMainSource>:
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0303 	and.w	r3, r3, #3
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_RCC_IsActiveFlag_HPRE>:
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298c:	d101      	bne.n	8002992 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029b2:	d101      	bne.n	80029b8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d101      	bne.n	80029de <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_RCC_IsActiveFlag_PPRE1>:
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80029ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029fc:	d101      	bne.n	8002a02 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <LL_RCC_IsActiveFlag_PPRE2>:
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a20:	d101      	bne.n	8002a26 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b08d      	sub	sp, #52	; 0x34
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e363      	b.n	800310e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 808d 	beq.w	8002b6e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a54:	f7ff fea1 	bl	800279a <LL_RCC_GetSysClkSource>
 8002a58:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a5a:	f7ff ff82 	bl	8002962 <LL_RCC_PLL_GetMainSource>
 8002a5e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_RCC_OscConfig+0x3e>
 8002a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a68:	2b0c      	cmp	r3, #12
 8002a6a:	d147      	bne.n	8002afc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d144      	bne.n	8002afc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e347      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002a82:	f7ff fe4c 	bl	800271e <LL_RCC_MSI_GetRange>
 8002a86:	4603      	mov	r3, r0
 8002a88:	429c      	cmp	r4, r3
 8002a8a:	d914      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fd03 	bl	800349c <RCC_SetFlashLatencyFromMSIRange>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e336      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fe26 	bl	80026f6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fe4a 	bl	8002748 <LL_RCC_MSI_SetCalibTrimming>
 8002ab4:	e013      	b.n	8002ade <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fe1b 	bl	80026f6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fe3f 	bl	8002748 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fce4 	bl	800349c <RCC_SetFlashLatencyFromMSIRange>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e317      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ade:	f000 fcc9 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4aa4      	ldr	r2, [pc, #656]	; (8002d78 <HAL_RCC_OscConfig+0x344>)
 8002ae6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ae8:	4ba4      	ldr	r3, [pc, #656]	; (8002d7c <HAL_RCC_OscConfig+0x348>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fe ffc1 	bl	8001a74 <HAL_InitTick>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d039      	beq.n	8002b6c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e308      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01e      	beq.n	8002b42 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b04:	f7ff fdc8 	bl	8002698 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b08:	f7ff f802 	bl	8001b10 <HAL_GetTick>
 8002b0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b10:	f7fe fffe 	bl	8001b10 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e2f5      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002b22:	f7ff fdd7 	bl	80026d4 <LL_RCC_MSI_IsReady>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f1      	beq.n	8002b10 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fde0 	bl	80026f6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fe04 	bl	8002748 <LL_RCC_MSI_SetCalibTrimming>
 8002b40:	e015      	b.n	8002b6e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b42:	f7ff fdb8 	bl	80026b6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b46:	f7fe ffe3 	bl	8001b10 <HAL_GetTick>
 8002b4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b4e:	f7fe ffdf 	bl	8001b10 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e2d6      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002b60:	f7ff fdb8 	bl	80026d4 <LL_RCC_MSI_IsReady>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f1      	bne.n	8002b4e <HAL_RCC_OscConfig+0x11a>
 8002b6a:	e000      	b.n	8002b6e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002b6c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d047      	beq.n	8002c0a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7a:	f7ff fe0e 	bl	800279a <LL_RCC_GetSysClkSource>
 8002b7e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b80:	f7ff feef 	bl	8002962 <LL_RCC_PLL_GetMainSource>
 8002b84:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_OscConfig+0x164>
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	2b0c      	cmp	r3, #12
 8002b90:	d108      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d105      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d134      	bne.n	8002c0a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e2b4      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bac:	d102      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x180>
 8002bae:	f7ff fbf5 	bl	800239c <LL_RCC_HSE_Enable>
 8002bb2:	e001      	b.n	8002bb8 <HAL_RCC_OscConfig+0x184>
 8002bb4:	f7ff fc01 	bl	80023ba <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d012      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe ffa6 	bl	8001b10 <HAL_GetTick>
 8002bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7fe ffa2 	bl	8001b10 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	; 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e299      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002bda:	f7ff fbfd 	bl	80023d8 <LL_RCC_HSE_IsReady>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f1      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x194>
 8002be4:	e011      	b.n	8002c0a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fe ff93 	bl	8001b10 <HAL_GetTick>
 8002bea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bee:	f7fe ff8f 	bl	8001b10 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b64      	cmp	r3, #100	; 0x64
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e286      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002c00:	f7ff fbea 	bl	80023d8 <LL_RCC_HSE_IsReady>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f1      	bne.n	8002bee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d04c      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c16:	f7ff fdc0 	bl	800279a <LL_RCC_GetSysClkSource>
 8002c1a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c1c:	f7ff fea1 	bl	8002962 <LL_RCC_PLL_GetMainSource>
 8002c20:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_OscConfig+0x200>
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d10e      	bne.n	8002c4c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d10b      	bne.n	8002c4c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e266      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fc09 	bl	800245c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c4a:	e031      	b.n	8002cb0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d019      	beq.n	8002c88 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c54:	f7ff fbd2 	bl	80023fc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe ff5a 	bl	8001b10 <HAL_GetTick>
 8002c5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c60:	f7fe ff56 	bl	8001b10 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e24d      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c72:	f7ff fbe1 	bl	8002438 <LL_RCC_HSI_IsReady>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f1      	beq.n	8002c60 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fbeb 	bl	800245c <LL_RCC_HSI_SetCalibTrimming>
 8002c86:	e013      	b.n	8002cb0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c88:	f7ff fbc7 	bl	800241a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe ff40 	bl	8001b10 <HAL_GetTick>
 8002c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c94:	f7fe ff3c 	bl	8001b10 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e233      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002ca6:	f7ff fbc7 	bl	8002438 <LL_RCC_HSI_IsReady>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f1      	bne.n	8002c94 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80a3 	beq.w	8002e10 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d076      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d046      	beq.n	8002d6c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002cde:	f7ff fc7e 	bl	80025de <LL_RCC_LSI1_IsReady>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d113      	bne.n	8002d10 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002ce8:	f7ff fc57 	bl	800259a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cec:	f7fe ff10 	bl	8001b10 <HAL_GetTick>
 8002cf0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002cf4:	f7fe ff0c 	bl	8001b10 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e203      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002d06:	f7ff fc6a 	bl	80025de <LL_RCC_LSI1_IsReady>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f1      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002d10:	f7ff fc77 	bl	8002602 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe fefc 	bl	8001b10 <HAL_GetTick>
 8002d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002d1c:	f7fe fef8 	bl	8001b10 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e1ef      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002d2e:	f7ff fc8a 	bl	8002646 <LL_RCC_LSI2_IsReady>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f1      	beq.n	8002d1c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fc94 	bl	800266a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002d42:	f7ff fc3b 	bl	80025bc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7fe fee3 	bl	8001b10 <HAL_GetTick>
 8002d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002d4e:	f7fe fedf 	bl	8001b10 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e1d6      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002d60:	f7ff fc3d 	bl	80025de <LL_RCC_LSI1_IsReady>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f1      	bne.n	8002d4e <HAL_RCC_OscConfig+0x31a>
 8002d6a:	e051      	b.n	8002e10 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002d6c:	f7ff fc15 	bl	800259a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe fece 	bl	8001b10 <HAL_GetTick>
 8002d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002d76:	e00c      	b.n	8002d92 <HAL_RCC_OscConfig+0x35e>
 8002d78:	20000004 	.word	0x20000004
 8002d7c:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002d80:	f7fe fec6 	bl	8001b10 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e1bd      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002d92:	f7ff fc24 	bl	80025de <LL_RCC_LSI1_IsReady>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f1      	beq.n	8002d80 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002d9c:	f7ff fc42 	bl	8002624 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002da2:	f7fe feb5 	bl	8001b10 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e1ac      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002db4:	f7ff fc47 	bl	8002646 <LL_RCC_LSI2_IsReady>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f1      	bne.n	8002da2 <HAL_RCC_OscConfig+0x36e>
 8002dbe:	e027      	b.n	8002e10 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002dc0:	f7ff fc30 	bl	8002624 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc4:	f7fe fea4 	bl	8001b10 <HAL_GetTick>
 8002dc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002dcc:	f7fe fea0 	bl	8001b10 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e197      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002dde:	f7ff fc32 	bl	8002646 <LL_RCC_LSI2_IsReady>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f1      	bne.n	8002dcc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002de8:	f7ff fbe8 	bl	80025bc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7fe fe90 	bl	8001b10 <HAL_GetTick>
 8002df0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002df4:	f7fe fe8c 	bl	8001b10 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e183      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002e06:	f7ff fbea 	bl	80025de <LL_RCC_LSI1_IsReady>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f1      	bne.n	8002df4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d05b      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e1c:	4ba7      	ldr	r3, [pc, #668]	; (80030bc <HAL_RCC_OscConfig+0x688>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d114      	bne.n	8002e52 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e28:	f7ff fa88 	bl	800233c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2c:	f7fe fe70 	bl	8001b10 <HAL_GetTick>
 8002e30:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e34:	f7fe fe6c 	bl	8001b10 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e163      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e46:	4b9d      	ldr	r3, [pc, #628]	; (80030bc <HAL_RCC_OscConfig+0x688>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d102      	bne.n	8002e60 <HAL_RCC_OscConfig+0x42c>
 8002e5a:	f7ff fb48 	bl	80024ee <LL_RCC_LSE_Enable>
 8002e5e:	e00c      	b.n	8002e7a <HAL_RCC_OscConfig+0x446>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d104      	bne.n	8002e72 <HAL_RCC_OscConfig+0x43e>
 8002e68:	f7ff fb63 	bl	8002532 <LL_RCC_LSE_EnableBypass>
 8002e6c:	f7ff fb3f 	bl	80024ee <LL_RCC_LSE_Enable>
 8002e70:	e003      	b.n	8002e7a <HAL_RCC_OscConfig+0x446>
 8002e72:	f7ff fb4d 	bl	8002510 <LL_RCC_LSE_Disable>
 8002e76:	f7ff fb6d 	bl	8002554 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d014      	beq.n	8002eac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fe fe45 	bl	8001b10 <HAL_GetTick>
 8002e86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fe fe41 	bl	8001b10 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e136      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ea0:	f7ff fb69 	bl	8002576 <LL_RCC_LSE_IsReady>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0ef      	beq.n	8002e8a <HAL_RCC_OscConfig+0x456>
 8002eaa:	e013      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fe fe30 	bl	8001b10 <HAL_GetTick>
 8002eb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fe2c 	bl	8001b10 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e121      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002eca:	f7ff fb54 	bl	8002576 <LL_RCC_LSE_IsReady>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1ef      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d02c      	beq.n	8002f3a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d014      	beq.n	8002f12 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ee8:	f7ff facd 	bl	8002486 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eec:	f7fe fe10 	bl	8001b10 <HAL_GetTick>
 8002ef0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ef4:	f7fe fe0c 	bl	8001b10 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e103      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002f06:	f7ff fae0 	bl	80024ca <LL_RCC_HSI48_IsReady>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f1      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x4c0>
 8002f10:	e013      	b.n	8002f3a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f12:	f7ff fac9 	bl	80024a8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f16:	f7fe fdfb 	bl	8001b10 <HAL_GetTick>
 8002f1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f1e:	f7fe fdf7 	bl	8001b10 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e0ee      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002f30:	f7ff facb 	bl	80024ca <LL_RCC_HSI48_IsReady>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f1      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80e4 	beq.w	800310c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f44:	f7ff fc29 	bl	800279a <LL_RCC_GetSysClkSource>
 8002f48:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	f040 80b4 	bne.w	80030c4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0203 	and.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d123      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d11c      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d114      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d10d      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d106      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d05d      	beq.n	800306e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b0c      	cmp	r3, #12
 8002fb6:	d058      	beq.n	800306a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e0a1      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fca:	f7ff fc84 	bl	80028d6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fce:	f7fe fd9f 	bl	8001b10 <HAL_GetTick>
 8002fd2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fe fd9b 	bl	8001b10 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e092      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1ef      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <HAL_RCC_OscConfig+0x68c>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003008:	4311      	orrs	r1, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800300e:	0212      	lsls	r2, r2, #8
 8003010:	4311      	orrs	r1, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003016:	4311      	orrs	r1, r2
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800301c:	4311      	orrs	r1, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003022:	430a      	orrs	r2, r1
 8003024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003028:	4313      	orrs	r3, r2
 800302a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800302c:	f7ff fc44 	bl	80028b8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800303a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003040:	f7fe fd66 	bl	8001b10 <HAL_GetTick>
 8003044:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003048:	f7fe fd62 	bl	8001b10 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e059      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ef      	beq.n	8003048 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003068:	e050      	b.n	800310c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e04f      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d147      	bne.n	800310c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800307c:	f7ff fc1c 	bl	80028b8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800308a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003090:	f7fe fd3e 	bl	8001b10 <HAL_GetTick>
 8003094:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003098:	f7fe fd3a 	bl	8001b10 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e031      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ef      	beq.n	8003098 <HAL_RCC_OscConfig+0x664>
 80030b8:	e028      	b.n	800310c <HAL_RCC_OscConfig+0x6d8>
 80030ba:	bf00      	nop
 80030bc:	58000400 	.word	0x58000400
 80030c0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b0c      	cmp	r3, #12
 80030c8:	d01e      	beq.n	8003108 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	f7ff fc04 	bl	80028d6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fe fd1f 	bl	8001b10 <HAL_GetTick>
 80030d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fe fd1b 	bl	8001b10 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e012      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1ef      	bne.n	80030d6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80030f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_RCC_OscConfig+0x6e4>)
 8003102:	4013      	ands	r3, r2
 8003104:	60cb      	str	r3, [r1, #12]
 8003106:	e001      	b.n	800310c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3734      	adds	r7, #52	; 0x34
 8003112:	46bd      	mov	sp, r7
 8003114:	bd90      	pop	{r4, r7, pc}
 8003116:	bf00      	nop
 8003118:	eefefffc 	.word	0xeefefffc

0800311c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e12d      	b.n	800338c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003130:	4b98      	ldr	r3, [pc, #608]	; (8003394 <HAL_RCC_ClockConfig+0x278>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d91b      	bls.n	8003176 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b95      	ldr	r3, [pc, #596]	; (8003394 <HAL_RCC_ClockConfig+0x278>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 0207 	bic.w	r2, r3, #7
 8003146:	4993      	ldr	r1, [pc, #588]	; (8003394 <HAL_RCC_ClockConfig+0x278>)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800314e:	f7fe fcdf 	bl	8001b10 <HAL_GetTick>
 8003152:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003154:	e008      	b.n	8003168 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003156:	f7fe fcdb 	bl	8001b10 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e111      	b.n	800338c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003168:	4b8a      	ldr	r3, [pc, #552]	; (8003394 <HAL_RCC_ClockConfig+0x278>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d1ef      	bne.n	8003156 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d016      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fb13 	bl	80027b2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800318c:	f7fe fcc0 	bl	8001b10 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003194:	f7fe fcbc 	bl	8001b10 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e0f2      	b.n	800338c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80031a6:	f7ff fbe8 	bl	800297a <LL_RCC_IsActiveFlag_HPRE>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f1      	beq.n	8003194 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d016      	beq.n	80031ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fb0a 	bl	80027da <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031c6:	f7fe fca3 	bl	8001b10 <HAL_GetTick>
 80031ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031ce:	f7fe fc9f 	bl	8001b10 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e0d5      	b.n	800338c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80031e0:	f7ff fbdd 	bl	800299e <LL_RCC_IsActiveFlag_C2HPRE>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f1      	beq.n	80031ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d016      	beq.n	8003224 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fb03 	bl	8002806 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003200:	f7fe fc86 	bl	8001b10 <HAL_GetTick>
 8003204:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003208:	f7fe fc82 	bl	8001b10 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e0b8      	b.n	800338c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800321a:	f7ff fbd3 	bl	80029c4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f1      	beq.n	8003208 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d016      	beq.n	800325e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fafd 	bl	8002834 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800323a:	f7fe fc69 	bl	8001b10 <HAL_GetTick>
 800323e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003240:	e008      	b.n	8003254 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003242:	f7fe fc65 	bl	8001b10 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e09b      	b.n	800338c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003254:	f7ff fbc9 	bl	80029ea <LL_RCC_IsActiveFlag_PPRE1>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f1      	beq.n	8003242 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d017      	beq.n	800329a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff faf3 	bl	800285c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003276:	f7fe fc4b 	bl	8001b10 <HAL_GetTick>
 800327a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800327e:	f7fe fc47 	bl	8001b10 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e07d      	b.n	800338c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003290:	f7ff fbbd 	bl	8002a0e <LL_RCC_IsActiveFlag_PPRE2>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f1      	beq.n	800327e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d043      	beq.n	800332e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d106      	bne.n	80032bc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80032ae:	f7ff f893 	bl	80023d8 <LL_RCC_HSE_IsReady>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d11e      	bne.n	80032f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e067      	b.n	800338c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80032c4:	f7ff fb16 	bl	80028f4 <LL_RCC_PLL_IsReady>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d113      	bne.n	80032f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e05c      	b.n	800338c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80032da:	f7ff f9fb 	bl	80026d4 <LL_RCC_MSI_IsReady>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d108      	bne.n	80032f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e051      	b.n	800338c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80032e8:	f7ff f8a6 	bl	8002438 <LL_RCC_HSI_IsReady>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e04a      	b.n	800338c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fa39 	bl	8002772 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003300:	f7fe fc06 	bl	8001b10 <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	e00a      	b.n	800331e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003308:	f7fe fc02 	bl	8001b10 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	; 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e036      	b.n	800338c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331e:	f7ff fa3c 	bl	800279a <LL_RCC_GetSysClkSource>
 8003322:	4602      	mov	r2, r0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	429a      	cmp	r2, r3
 800332c:	d1ec      	bne.n	8003308 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800332e:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_RCC_ClockConfig+0x278>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d21b      	bcs.n	8003374 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333c:	4b15      	ldr	r3, [pc, #84]	; (8003394 <HAL_RCC_ClockConfig+0x278>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 0207 	bic.w	r2, r3, #7
 8003344:	4913      	ldr	r1, [pc, #76]	; (8003394 <HAL_RCC_ClockConfig+0x278>)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334c:	f7fe fbe0 	bl	8001b10 <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	e008      	b.n	8003366 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003354:	f7fe fbdc 	bl	8001b10 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e012      	b.n	800338c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCC_ClockConfig+0x278>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d1ef      	bne.n	8003354 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003374:	f000 f87e 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 8003378:	4603      	mov	r3, r0
 800337a:	4a07      	ldr	r2, [pc, #28]	; (8003398 <HAL_RCC_ClockConfig+0x27c>)
 800337c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800337e:	f7fe fbd3 	bl	8001b28 <HAL_GetTickPrio>
 8003382:	4603      	mov	r3, r0
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe fb75 	bl	8001a74 <HAL_InitTick>
 800338a:	4603      	mov	r3, r0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	58004000 	.word	0x58004000
 8003398:	20000004 	.word	0x20000004

0800339c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a2:	f7ff f9fa 	bl	800279a <LL_RCC_GetSysClkSource>
 80033a6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10a      	bne.n	80033c4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80033ae:	f7ff f9b6 	bl	800271e <LL_RCC_MSI_GetRange>
 80033b2:	4603      	mov	r3, r0
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	4a2b      	ldr	r2, [pc, #172]	; (8003468 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e04b      	b.n	800345c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d102      	bne.n	80033d0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033ca:	4b28      	ldr	r3, [pc, #160]	; (800346c <HAL_RCC_GetSysClockFreq+0xd0>)
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	e045      	b.n	800345c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d10a      	bne.n	80033ec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80033d6:	f7fe ffcf 	bl	8002378 <LL_RCC_HSE_IsEnabledDiv2>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d102      	bne.n	80033e6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80033e0:	4b22      	ldr	r3, [pc, #136]	; (800346c <HAL_RCC_GetSysClockFreq+0xd0>)
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e03a      	b.n	800345c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_RCC_GetSysClockFreq+0xd4>)
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	e037      	b.n	800345c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80033ec:	f7ff fab9 	bl	8002962 <LL_RCC_PLL_GetMainSource>
 80033f0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d003      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x64>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d003      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0x6a>
 80033fe:	e00d      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003400:	4b1a      	ldr	r3, [pc, #104]	; (800346c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003402:	60bb      	str	r3, [r7, #8]
        break;
 8003404:	e015      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003406:	f7fe ffb7 	bl	8002378 <LL_RCC_HSE_IsEnabledDiv2>
 800340a:	4603      	mov	r3, r0
 800340c:	2b01      	cmp	r3, #1
 800340e:	d102      	bne.n	8003416 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003410:	4b16      	ldr	r3, [pc, #88]	; (800346c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003412:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003414:	e00d      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003416:	4b16      	ldr	r3, [pc, #88]	; (8003470 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003418:	60bb      	str	r3, [r7, #8]
        break;
 800341a:	e00a      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800341c:	f7ff f97f 	bl	800271e <LL_RCC_MSI_GetRange>
 8003420:	4603      	mov	r3, r0
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	4a0f      	ldr	r2, [pc, #60]	; (8003468 <HAL_RCC_GetSysClockFreq+0xcc>)
 800342a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800342e:	60bb      	str	r3, [r7, #8]
        break;
 8003430:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003432:	f7ff fa71 	bl	8002918 <LL_RCC_PLL_GetN>
 8003436:	4602      	mov	r2, r0
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	fb03 f402 	mul.w	r4, r3, r2
 800343e:	f7ff fa84 	bl	800294a <LL_RCC_PLL_GetDivider>
 8003442:	4603      	mov	r3, r0
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	3301      	adds	r3, #1
 8003448:	fbb4 f4f3 	udiv	r4, r4, r3
 800344c:	f7ff fa71 	bl	8002932 <LL_RCC_PLL_GetR>
 8003450:	4603      	mov	r3, r0
 8003452:	0f5b      	lsrs	r3, r3, #29
 8003454:	3301      	adds	r3, #1
 8003456:	fbb4 f3f3 	udiv	r3, r4, r3
 800345a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800345c:	68fb      	ldr	r3, [r7, #12]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	bd90      	pop	{r4, r7, pc}
 8003466:	bf00      	nop
 8003468:	08007930 	.word	0x08007930
 800346c:	00f42400 	.word	0x00f42400
 8003470:	01e84800 	.word	0x01e84800

08003474 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003474:	b598      	push	{r3, r4, r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003478:	f7ff ff90 	bl	800339c <HAL_RCC_GetSysClockFreq>
 800347c:	4604      	mov	r4, r0
 800347e:	f7ff fa01 	bl	8002884 <LL_RCC_GetAHBPrescaler>
 8003482:	4603      	mov	r3, r0
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	4a03      	ldr	r2, [pc, #12]	; (8003498 <HAL_RCC_GetHCLKFreq+0x24>)
 800348c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003490:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003494:	4618      	mov	r0, r3
 8003496:	bd98      	pop	{r3, r4, r7, pc}
 8003498:	080078f0 	.word	0x080078f0

0800349c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800349c:	b590      	push	{r4, r7, lr}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2bb0      	cmp	r3, #176	; 0xb0
 80034a8:	d903      	bls.n	80034b2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80034aa:	4b15      	ldr	r3, [pc, #84]	; (8003500 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e007      	b.n	80034c2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	4a11      	ldr	r2, [pc, #68]	; (8003500 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80034bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80034c2:	f7ff f9eb 	bl	800289c <LL_RCC_GetAHB4Prescaler>
 80034c6:	4603      	mov	r3, r0
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	4a0d      	ldr	r2, [pc, #52]	; (8003504 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80034d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034da:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	0c9c      	lsrs	r4, r3, #18
 80034e6:	f7fe ff39 	bl	800235c <HAL_PWREx_GetVoltageRange>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4619      	mov	r1, r3
 80034ee:	4620      	mov	r0, r4
 80034f0:	f000 f80c 	bl	800350c <RCC_SetFlashLatency>
 80034f4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd90      	pop	{r4, r7, pc}
 80034fe:	bf00      	nop
 8003500:	08007930 	.word	0x08007930
 8003504:	080078f0 	.word	0x080078f0
 8003508:	431bde83 	.word	0x431bde83

0800350c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800350c:	b590      	push	{r4, r7, lr}
 800350e:	b093      	sub	sp, #76	; 0x4c
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003516:	4b37      	ldr	r3, [pc, #220]	; (80035f4 <RCC_SetFlashLatency+0xe8>)
 8003518:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800351c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800351e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003522:	4a35      	ldr	r2, [pc, #212]	; (80035f8 <RCC_SetFlashLatency+0xec>)
 8003524:	f107 031c 	add.w	r3, r7, #28
 8003528:	ca07      	ldmia	r2, {r0, r1, r2}
 800352a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800352e:	4b33      	ldr	r3, [pc, #204]	; (80035fc <RCC_SetFlashLatency+0xf0>)
 8003530:	f107 040c 	add.w	r4, r7, #12
 8003534:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003536:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800353a:	2300      	movs	r3, #0
 800353c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003544:	d11a      	bne.n	800357c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003546:	2300      	movs	r3, #0
 8003548:	643b      	str	r3, [r7, #64]	; 0x40
 800354a:	e013      	b.n	8003574 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800354c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	3348      	adds	r3, #72	; 0x48
 8003552:	443b      	add	r3, r7
 8003554:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	429a      	cmp	r2, r3
 800355c:	d807      	bhi.n	800356e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800355e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	3348      	adds	r3, #72	; 0x48
 8003564:	443b      	add	r3, r7
 8003566:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800356a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800356c:	e020      	b.n	80035b0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800356e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003570:	3301      	adds	r3, #1
 8003572:	643b      	str	r3, [r7, #64]	; 0x40
 8003574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003576:	2b03      	cmp	r3, #3
 8003578:	d9e8      	bls.n	800354c <RCC_SetFlashLatency+0x40>
 800357a:	e019      	b.n	80035b0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800357c:	2300      	movs	r3, #0
 800357e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003580:	e013      	b.n	80035aa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	3348      	adds	r3, #72	; 0x48
 8003588:	443b      	add	r3, r7
 800358a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d807      	bhi.n	80035a4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	3348      	adds	r3, #72	; 0x48
 800359a:	443b      	add	r3, r7
 800359c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80035a0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80035a2:	e005      	b.n	80035b0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80035a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a6:	3301      	adds	r3, #1
 80035a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d9e8      	bls.n	8003582 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80035b0:	4b13      	ldr	r3, [pc, #76]	; (8003600 <RCC_SetFlashLatency+0xf4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f023 0207 	bic.w	r2, r3, #7
 80035b8:	4911      	ldr	r1, [pc, #68]	; (8003600 <RCC_SetFlashLatency+0xf4>)
 80035ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035bc:	4313      	orrs	r3, r2
 80035be:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035c0:	f7fe faa6 	bl	8001b10 <HAL_GetTick>
 80035c4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80035c6:	e008      	b.n	80035da <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80035c8:	f7fe faa2 	bl	8001b10 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e007      	b.n	80035ea <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <RCC_SetFlashLatency+0xf4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d1ef      	bne.n	80035c8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	374c      	adds	r7, #76	; 0x4c
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd90      	pop	{r4, r7, pc}
 80035f2:	bf00      	nop
 80035f4:	08007750 	.word	0x08007750
 80035f8:	08007760 	.word	0x08007760
 80035fc:	0800776c 	.word	0x0800776c
 8003600:	58004000 	.word	0x58004000

08003604 <LL_RCC_LSE_IsEnabled>:
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <LL_RCC_LSE_IsEnabled+0x18>
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <LL_RCC_LSE_IsEnabled+0x1a>
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <LL_RCC_LSE_IsReady>:
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800362c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b02      	cmp	r3, #2
 800363a:	d101      	bne.n	8003640 <LL_RCC_LSE_IsReady+0x18>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <LL_RCC_LSE_IsReady+0x1a>
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <LL_RCC_SetRFWKPClockSource>:
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800365c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_RCC_SetSMPSClockSource>:
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	f023 0203 	bic.w	r2, r3, #3
 800368a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4313      	orrs	r3, r2
 8003692:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <LL_RCC_SetSMPSPrescaler>:
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80036a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	624b      	str	r3, [r1, #36]	; 0x24
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LL_RCC_SetUSARTClockSource>:
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80036d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d8:	f023 0203 	bic.w	r2, r3, #3
 80036dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <LL_RCC_SetLPUARTClockSource>:
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80036fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <LL_RCC_SetI2CClockSource>:
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003738:	43db      	mvns	r3, r3
 800373a:	401a      	ands	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003744:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <LL_RCC_SetLPTIMClockSource>:
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003766:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0c1b      	lsrs	r3, r3, #16
 800376e:	041b      	lsls	r3, r3, #16
 8003770:	43db      	mvns	r3, r3
 8003772:	401a      	ands	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	041b      	lsls	r3, r3, #16
 8003778:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <LL_RCC_SetSAIClockSource>:
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <LL_RCC_SetRNGClockSource>:
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80037c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80037ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <LL_RCC_SetCLK48ClockSource>:
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80037ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <LL_RCC_SetUSBClockSource>:
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ffe3 	bl	80037e6 <LL_RCC_SetCLK48ClockSource>
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <LL_RCC_SetADCClockSource>:
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003838:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800383c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_RCC_SetRTCClockSource>:
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003868:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <LL_RCC_GetRTCClockSource>:
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_RCC_ForceBackupDomainReset>:
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800389e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038b2:	bf00      	nop
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <LL_RCC_ReleaseBackupDomainReset>:
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <LL_RCC_PLLSAI1_Enable>:
{
 80038de:	b480      	push	{r7}
 80038e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80038e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038f0:	6013      	str	r3, [r2, #0]
}
 80038f2:	bf00      	nop
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <LL_RCC_PLLSAI1_Disable>:
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800390a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800390e:	6013      	str	r3, [r2, #0]
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <LL_RCC_PLLSAI1_IsReady>:
{
 800391a:	b480      	push	{r7}
 800391c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800391e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800392c:	d101      	bne.n	8003932 <LL_RCC_PLLSAI1_IsReady+0x18>
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b088      	sub	sp, #32
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003946:	2300      	movs	r3, #0
 8003948:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800394a:	2300      	movs	r3, #0
 800394c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d034      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003962:	d021      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003964:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003968:	d81b      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800396a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800396e:	d01d      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003970:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003974:	d815      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800397a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800397e:	d110      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800398a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003990:	e00d      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3304      	adds	r3, #4
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f947 	bl	8003c2a <RCCEx_PLLSAI1_ConfigNP>
 800399c:	4603      	mov	r3, r0
 800399e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039a0:	e005      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	77fb      	strb	r3, [r7, #31]
        break;
 80039a6:	e002      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80039a8:	bf00      	nop
 80039aa:	e000      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80039ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ae:	7ffb      	ldrb	r3, [r7, #31]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d105      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff fee8 	bl	800378e <LL_RCC_SetSAIClockSource>
 80039be:	e001      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c0:	7ffb      	ldrb	r3, [r7, #31]
 80039c2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d046      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80039d0:	f7ff ff56 	bl	8003880 <LL_RCC_GetRTCClockSource>
 80039d4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d03c      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80039e0:	f7fe fcac 	bl	800233c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d105      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ff30 	bl	8003854 <LL_RCC_SetRTCClockSource>
 80039f4:	e02e      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80039f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003a00:	f7ff ff4b 	bl	800389a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003a04:	f7ff ff5a 	bl	80038bc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003a20:	f7ff fdf0 	bl	8003604 <LL_RCC_LSE_IsEnabled>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d114      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a2a:	f7fe f871 	bl	8001b10 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003a30:	e00b      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fe f86d 	bl	8001b10 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d902      	bls.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	77fb      	strb	r3, [r7, #31]
              break;
 8003a48:	e004      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003a4a:	f7ff fded 	bl	8003628 <LL_RCC_LSE_IsReady>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d1ee      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003a54:	7ffb      	ldrb	r3, [r7, #31]
 8003a56:	77bb      	strb	r3, [r7, #30]
 8003a58:	e001      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5a:	7ffb      	ldrb	r3, [r7, #31]
 8003a5c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fe2a 	bl	80036c8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fe35 	bl	80036f4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d004      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff fe5d 	bl	800375a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fe52 	bl	800375a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d004      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff fe2a 	bl	8003720 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff fe1f 	bl	8003720 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d022      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff fe8d 	bl	8003812 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b00:	d107      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b10:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b1a:	d10b      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 f8dd 	bl	8003ce0 <RCCEx_PLLSAI1_ConfigNQ>
 8003b26:	4603      	mov	r3, r0
 8003b28:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003b2a:	7ffb      	ldrb	r3, [r7, #31]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003b30:	7ffb      	ldrb	r3, [r7, #31]
 8003b32:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d02b      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b48:	d008      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b52:	d003      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fe2a 	bl	80037ba <LL_RCC_SetRNGClockSource>
 8003b66:	e00a      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	2000      	movs	r0, #0
 8003b74:	f7ff fe21 	bl	80037ba <LL_RCC_SetRNGClockSource>
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f7ff fe34 	bl	80037e6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003b86:	d107      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d022      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fe3d 	bl	8003828 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bb6:	d107      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bd0:	d10b      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f8dd 	bl	8003d96 <RCCEx_PLLSAI1_ConfigNR>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003be0:	7ffb      	ldrb	r3, [r7, #31]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003be6:	7ffb      	ldrb	r3, [r7, #31]
 8003be8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d004      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff fd26 	bl	800364c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fd45 	bl	80036a0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fd2c 	bl	8003678 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003c20:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003c36:	f7ff fe61 	bl	80038fc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c3a:	f7fd ff69 	bl	8001b10 <HAL_GetTick>
 8003c3e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c40:	e009      	b.n	8003c56 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c42:	f7fd ff65 	bl	8001b10 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d902      	bls.n	8003c56 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	73fb      	strb	r3, [r7, #15]
      break;
 8003c54:	e004      	b.n	8003c60 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c56:	f7ff fe60 	bl	800391a <LL_RCC_PLLSAI1_IsReady>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f0      	bne.n	8003c42 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d137      	bne.n	8003cd6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c90:	4313      	orrs	r3, r2
 8003c92:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003c94:	f7ff fe23 	bl	80038de <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c98:	f7fd ff3a 	bl	8001b10 <HAL_GetTick>
 8003c9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003c9e:	e009      	b.n	8003cb4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ca0:	f7fd ff36 	bl	8001b10 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d902      	bls.n	8003cb4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	73fb      	strb	r3, [r7, #15]
        break;
 8003cb2:	e004      	b.n	8003cbe <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003cb4:	f7ff fe31 	bl	800391a <LL_RCC_PLLSAI1_IsReady>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d1f0      	bne.n	8003ca0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d108      	bne.n	8003cd6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003cec:	f7ff fe06 	bl	80038fc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003cf0:	f7fd ff0e 	bl	8001b10 <HAL_GetTick>
 8003cf4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003cf6:	e009      	b.n	8003d0c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cf8:	f7fd ff0a 	bl	8001b10 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d902      	bls.n	8003d0c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	73fb      	strb	r3, [r7, #15]
      break;
 8003d0a:	e004      	b.n	8003d16 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d0c:	f7ff fe05 	bl	800391a <LL_RCC_PLLSAI1_IsReady>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d137      	bne.n	8003d8c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	021b      	lsls	r3, r3, #8
 8003d2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d30:	4313      	orrs	r3, r2
 8003d32:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d46:	4313      	orrs	r3, r2
 8003d48:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003d4a:	f7ff fdc8 	bl	80038de <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d4e:	f7fd fedf 	bl	8001b10 <HAL_GetTick>
 8003d52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003d54:	e009      	b.n	8003d6a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d56:	f7fd fedb 	bl	8001b10 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d902      	bls.n	8003d6a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	73fb      	strb	r3, [r7, #15]
        break;
 8003d68:	e004      	b.n	8003d74 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003d6a:	f7ff fdd6 	bl	800391a <LL_RCC_PLLSAI1_IsReady>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d1f0      	bne.n	8003d56 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d108      	bne.n	8003d8c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003da2:	f7ff fdab 	bl	80038fc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003da6:	f7fd feb3 	bl	8001b10 <HAL_GetTick>
 8003daa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003dac:	e009      	b.n	8003dc2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dae:	f7fd feaf 	bl	8001b10 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d902      	bls.n	8003dc2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc0:	e004      	b.n	8003dcc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003dc2:	f7ff fdaa 	bl	800391a <LL_RCC_PLLSAI1_IsReady>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f0      	bne.n	8003dae <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d137      	bne.n	8003e42 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	021b      	lsls	r3, r3, #8
 8003de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003de6:	4313      	orrs	r3, r2
 8003de8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003e00:	f7ff fd6d 	bl	80038de <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e04:	f7fd fe84 	bl	8001b10 <HAL_GetTick>
 8003e08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e0a:	e009      	b.n	8003e20 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e0c:	f7fd fe80 	bl	8001b10 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d902      	bls.n	8003e20 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e1e:	e004      	b.n	8003e2a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e20:	f7ff fd7b 	bl	800391a <LL_RCC_PLLSAI1_IsReady>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d1f0      	bne.n	8003e0c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d108      	bne.n	8003e42 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e090      	b.n	8003f80 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fd fcde 	bl	8001834 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	22ca      	movs	r2, #202	; 0xca
 8003e86:	625a      	str	r2, [r3, #36]	; 0x24
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2253      	movs	r2, #83	; 0x53
 8003e8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f89f 	bl	8003fd4 <RTC_EnterInitMode>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d009      	beq.n	8003eb0 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	22ff      	movs	r2, #255	; 0xff
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e067      	b.n	8003f80 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6899      	ldr	r1, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68d2      	ldr	r2, [r2, #12]
 8003eea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6919      	ldr	r1, [r3, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	041a      	lsls	r2, r3, #16
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f0e:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0203 	bic.w	r2, r2, #3
 8003f1e:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d113      	bne.n	8003f6e <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f81e 	bl	8003f88 <HAL_RTC_WaitForSynchro>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	22ff      	movs	r2, #255	; 0xff
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e008      	b.n	8003f80 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	22ff      	movs	r2, #255	; 0xff
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
  }
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f9e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003fa0:	f7fd fdb6 	bl	8001b10 <HAL_GetTick>
 8003fa4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003fa6:	e009      	b.n	8003fbc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fa8:	f7fd fdb2 	bl	8001b10 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fb6:	d901      	bls.n	8003fbc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e007      	b.n	8003fcc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0ee      	beq.n	8003fa8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d119      	bne.n	800401e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ff2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003ff4:	f7fd fd8c 	bl	8001b10 <HAL_GetTick>
 8003ff8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ffa:	e009      	b.n	8004010 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003ffc:	f7fd fd88 	bl	8001b10 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800400a:	d901      	bls.n	8004010 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e007      	b.n	8004020 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0ee      	beq.n	8003ffc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800403e:	2302      	movs	r3, #2
 8004040:	e0a8      	b.n	8004194 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2202      	movs	r2, #2
 800404e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	22ca      	movs	r2, #202	; 0xca
 8004058:	625a      	str	r2, [r3, #36]	; 0x24
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2253      	movs	r2, #83	; 0x53
 8004060:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406c:	2b00      	cmp	r3, #0
 800406e:	d020      	beq.n	80040b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8004070:	f7fd fd4e 	bl	8001b10 <HAL_GetTick>
 8004074:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004076:	e015      	b.n	80040a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004078:	f7fd fd4a 	bl	8001b10 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004086:	d90d      	bls.n	80040a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	22ff      	movs	r2, #255	; 0xff
 800408e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2203      	movs	r2, #3
 8004094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e077      	b.n	8004194 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1e2      	bne.n	8004078 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80040d2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80040d4:	f7fd fd1c 	bl	8001b10 <HAL_GetTick>
 80040d8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80040da:	e015      	b.n	8004108 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040dc:	f7fd fd18 	bl	8001b10 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ea:	d90d      	bls.n	8004108 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	22ff      	movs	r2, #255	; 0xff
 80040f2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2203      	movs	r2, #3
 80040f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e045      	b.n	8004194 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0e2      	beq.n	80040dc <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0207 	bic.w	r2, r2, #7
 800412c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6899      	ldr	r1, [r3, #8]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	430a      	orrs	r2, r1
 800413c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004144:	4a15      	ldr	r2, [pc, #84]	; (800419c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004146:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800414a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a12      	ldr	r2, [pc, #72]	; (800419c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004154:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004158:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004168:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004178:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	22ff      	movs	r2, #255	; 0xff
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	58000800 	.word	0x58000800

080041a0 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80041aa:	f107 0308 	add.w	r3, r7, #8
 80041ae:	2218      	movs	r2, #24
 80041b0:	2100      	movs	r1, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 f8d8 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 80041b8:	233f      	movs	r3, #63	; 0x3f
 80041ba:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80041bc:	2381      	movs	r3, #129	; 0x81
 80041be:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80041c0:	1dfb      	adds	r3, r7, #7
 80041c2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80041c4:	2301      	movs	r3, #1
 80041c6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80041c8:	f107 0308 	add.w	r3, r7, #8
 80041cc:	2100      	movs	r1, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 fb54 	bl	800587c <hci_send_req>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	da01      	bge.n	80041de <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80041da:	23ff      	movs	r3, #255	; 0xff
 80041dc:	e000      	b.n	80041e0 <aci_gap_set_non_discoverable+0x40>
  return status;
 80041de:	79fb      	ldrb	r3, [r7, #7]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80041e8:	b5b0      	push	{r4, r5, r7, lr}
 80041ea:	b0ce      	sub	sp, #312	; 0x138
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4605      	mov	r5, r0
 80041f0:	460c      	mov	r4, r1
 80041f2:	4610      	mov	r0, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80041fa:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80041fe:	462a      	mov	r2, r5
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004206:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800420a:	4622      	mov	r2, r4
 800420c:	801a      	strh	r2, [r3, #0]
 800420e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004212:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8004216:	4602      	mov	r2, r0
 8004218:	801a      	strh	r2, [r3, #0]
 800421a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800421e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004222:	460a      	mov	r2, r1
 8004224:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8004226:	f107 0310 	add.w	r3, r7, #16
 800422a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800422e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004232:	3308      	adds	r3, #8
 8004234:	f107 0210 	add.w	r2, r7, #16
 8004238:	4413      	add	r3, r2
 800423a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800423e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004242:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004246:	4413      	add	r3, r2
 8004248:	3309      	adds	r3, #9
 800424a:	f107 0210 	add.w	r2, r7, #16
 800424e:	4413      	add	r3, r2
 8004250:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004254:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004258:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8004266:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800426a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800426e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8004272:	7812      	ldrb	r2, [r2, #0]
 8004274:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004276:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800427a:	3301      	adds	r3, #1
 800427c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8004280:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004284:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004288:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800428c:	8812      	ldrh	r2, [r2, #0]
 800428e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8004292:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004296:	3302      	adds	r3, #2
 8004298:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800429c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042a0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80042a4:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80042a8:	8812      	ldrh	r2, [r2, #0]
 80042aa:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80042ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042b2:	3302      	adds	r3, #2
 80042b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80042b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042bc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80042c0:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80042c4:	7812      	ldrb	r2, [r2, #0]
 80042c6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80042c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042cc:	3301      	adds	r3, #1
 80042ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80042d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042d6:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80042da:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80042dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042e0:	3301      	adds	r3, #1
 80042e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80042e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042ea:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80042ee:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80042f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042f4:	3301      	adds	r3, #1
 80042f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80042fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042fe:	3308      	adds	r3, #8
 8004300:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004304:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004308:	4618      	mov	r0, r3
 800430a:	f001 f81d 	bl	8005348 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800430e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004312:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004316:	4413      	add	r3, r2
 8004318:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800431c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004320:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004324:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004326:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800432a:	3301      	adds	r3, #1
 800432c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8004330:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004334:	3301      	adds	r3, #1
 8004336:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800433a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800433e:	4618      	mov	r0, r3
 8004340:	f001 f802 	bl	8005348 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8004344:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004348:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800434c:	4413      	add	r3, r2
 800434e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8004352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004356:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800435a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800435c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004360:	3302      	adds	r3, #2
 8004362:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8004366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800436a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800436e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004370:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004374:	3302      	adds	r3, #2
 8004376:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800437a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800437e:	2218      	movs	r2, #24
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fff0 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004388:	233f      	movs	r3, #63	; 0x3f
 800438a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800438e:	2383      	movs	r3, #131	; 0x83
 8004390:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004394:	f107 0310 	add.w	r3, r7, #16
 8004398:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800439c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80043a4:	f107 030f 	add.w	r3, r7, #15
 80043a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80043b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043b6:	2100      	movs	r1, #0
 80043b8:	4618      	mov	r0, r3
 80043ba:	f001 fa5f 	bl	800587c <hci_send_req>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	da01      	bge.n	80043c8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80043c4:	23ff      	movs	r3, #255	; 0xff
 80043c6:	e004      	b.n	80043d2 <aci_gap_set_discoverable+0x1ea>
  return status;
 80043c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80043cc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80043d0:	781b      	ldrb	r3, [r3, #0]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80043d8:	46bd      	mov	sp, r7
 80043da:	bdb0      	pop	{r4, r5, r7, pc}

080043dc <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b0cc      	sub	sp, #304	; 0x130
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4602      	mov	r2, r0
 80043e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043e8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80043ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80043ee:	f107 0310 	add.w	r3, r7, #16
 80043f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80043f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043fa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8004408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800440c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004410:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004414:	7812      	ldrb	r2, [r2, #0]
 8004416:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004418:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800441c:	3301      	adds	r3, #1
 800441e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004422:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004426:	2218      	movs	r2, #24
 8004428:	2100      	movs	r1, #0
 800442a:	4618      	mov	r0, r3
 800442c:	f000 ff9c 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004430:	233f      	movs	r3, #63	; 0x3f
 8004432:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8004436:	2385      	movs	r3, #133	; 0x85
 8004438:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800443c:	f107 0310 	add.w	r3, r7, #16
 8004440:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004444:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004448:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800444c:	f107 030f 	add.w	r3, r7, #15
 8004450:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004454:	2301      	movs	r3, #1
 8004456:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800445a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800445e:	2100      	movs	r1, #0
 8004460:	4618      	mov	r0, r3
 8004462:	f001 fa0b 	bl	800587c <hci_send_req>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	da01      	bge.n	8004470 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800446c:	23ff      	movs	r3, #255	; 0xff
 800446e:	e004      	b.n	800447a <aci_gap_set_io_capability+0x9e>
  return status;
 8004470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004474:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004478:	781b      	ldrb	r3, [r3, #0]
}
 800447a:	4618      	mov	r0, r3
 800447c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8004484:	b5b0      	push	{r4, r5, r7, lr}
 8004486:	b0cc      	sub	sp, #304	; 0x130
 8004488:	af00      	add	r7, sp, #0
 800448a:	4605      	mov	r5, r0
 800448c:	460c      	mov	r4, r1
 800448e:	4610      	mov	r0, r2
 8004490:	4619      	mov	r1, r3
 8004492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004496:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800449a:	462a      	mov	r2, r5
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80044a6:	4622      	mov	r2, r4
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ae:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80044b2:	4602      	mov	r2, r0
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044be:	460a      	mov	r2, r1
 80044c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80044c2:	f107 0310 	add.w	r3, r7, #16
 80044c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80044ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80044dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80044e4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80044e8:	7812      	ldrb	r2, [r2, #0]
 80044ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80044ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80044f0:	3301      	adds	r3, #1
 80044f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80044f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80044fe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004502:	7812      	ldrb	r2, [r2, #0]
 8004504:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004506:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800450a:	3301      	adds	r3, #1
 800450c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8004510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004514:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004518:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004520:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004524:	3301      	adds	r3, #1
 8004526:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800452a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800452e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004532:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004536:	7812      	ldrb	r2, [r2, #0]
 8004538:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800453a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800453e:	3301      	adds	r3, #1
 8004540:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8004544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004548:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800454c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800454e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004552:	3301      	adds	r3, #1
 8004554:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8004558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800455c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8004560:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004562:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004566:	3301      	adds	r3, #1
 8004568:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800456c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004570:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8004574:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004576:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800457a:	3301      	adds	r3, #1
 800457c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8004580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004584:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004588:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800458c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004590:	3304      	adds	r3, #4
 8004592:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8004596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800459a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800459e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80045a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045a4:	3301      	adds	r3, #1
 80045a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80045aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045ae:	2218      	movs	r2, #24
 80045b0:	2100      	movs	r1, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fed8 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 80045b8:	233f      	movs	r3, #63	; 0x3f
 80045ba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80045be:	2386      	movs	r3, #134	; 0x86
 80045c0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80045c4:	f107 0310 	add.w	r3, r7, #16
 80045c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80045cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80045d4:	f107 030f 	add.w	r3, r7, #15
 80045d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80045dc:	2301      	movs	r3, #1
 80045de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80045e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045e6:	2100      	movs	r1, #0
 80045e8:	4618      	mov	r0, r3
 80045ea:	f001 f947 	bl	800587c <hci_send_req>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	da01      	bge.n	80045f8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80045f4:	23ff      	movs	r3, #255	; 0xff
 80045f6:	e004      	b.n	8004602 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80045f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045fc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004600:	781b      	ldrb	r3, [r3, #0]
}
 8004602:	4618      	mov	r0, r3
 8004604:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004608:	46bd      	mov	sp, r7
 800460a:	bdb0      	pop	{r4, r5, r7, pc}

0800460c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b0cc      	sub	sp, #304	; 0x130
 8004610:	af00      	add	r7, sp, #0
 8004612:	4602      	mov	r2, r0
 8004614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800461c:	6019      	str	r1, [r3, #0]
 800461e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004622:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004626:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8004628:	f107 0310 	add.w	r3, r7, #16
 800462c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004634:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8004642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004646:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800464a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800464e:	8812      	ldrh	r2, [r2, #0]
 8004650:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004652:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004656:	3302      	adds	r3, #2
 8004658:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800465c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004660:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004664:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8004668:	6812      	ldr	r2, [r2, #0]
 800466a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800466e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004672:	3304      	adds	r3, #4
 8004674:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004678:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800467c:	2218      	movs	r2, #24
 800467e:	2100      	movs	r1, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fe71 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004686:	233f      	movs	r3, #63	; 0x3f
 8004688:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800468c:	2388      	movs	r3, #136	; 0x88
 800468e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004692:	f107 0310 	add.w	r3, r7, #16
 8004696:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800469a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800469e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80046a2:	f107 030f 	add.w	r3, r7, #15
 80046a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80046aa:	2301      	movs	r3, #1
 80046ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80046b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046b4:	2100      	movs	r1, #0
 80046b6:	4618      	mov	r0, r3
 80046b8:	f001 f8e0 	bl	800587c <hci_send_req>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	da01      	bge.n	80046c6 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80046c2:	23ff      	movs	r3, #255	; 0xff
 80046c4:	e004      	b.n	80046d0 <aci_gap_pass_key_resp+0xc4>
  return status;
 80046c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80046ce:	781b      	ldrb	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80046da:	b590      	push	{r4, r7, lr}
 80046dc:	b0cd      	sub	sp, #308	; 0x134
 80046de:	af00      	add	r7, sp, #0
 80046e0:	4604      	mov	r4, r0
 80046e2:	4608      	mov	r0, r1
 80046e4:	4611      	mov	r1, r2
 80046e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046ea:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80046f8:	4622      	mov	r2, r4
 80046fa:	701a      	strb	r2, [r3, #0]
 80046fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004700:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004704:	4602      	mov	r2, r0
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800470c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8004710:	460a      	mov	r2, r1
 8004712:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004714:	f107 0310 	add.w	r3, r7, #16
 8004718:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800471c:	f107 0308 	add.w	r3, r7, #8
 8004720:	2207      	movs	r2, #7
 8004722:	2100      	movs	r1, #0
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fe1f 	bl	8005368 <Osal_MemSet>
  int index_input = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8004730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004734:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004738:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800473c:	7812      	ldrb	r2, [r2, #0]
 800473e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004740:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004744:	3301      	adds	r3, #1
 8004746:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800474a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800474e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004752:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004756:	7812      	ldrb	r2, [r2, #0]
 8004758:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800475a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800475e:	3301      	adds	r3, #1
 8004760:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004768:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800476c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8004770:	7812      	ldrb	r2, [r2, #0]
 8004772:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004774:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004778:	3301      	adds	r3, #1
 800477a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800477e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004782:	2218      	movs	r2, #24
 8004784:	2100      	movs	r1, #0
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fdee 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 800478c:	233f      	movs	r3, #63	; 0x3f
 800478e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8004792:	238a      	movs	r3, #138	; 0x8a
 8004794:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004798:	f107 0310 	add.w	r3, r7, #16
 800479c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80047a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80047a8:	f107 0308 	add.w	r3, r7, #8
 80047ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80047b0:	2307      	movs	r3, #7
 80047b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80047b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047ba:	2100      	movs	r1, #0
 80047bc:	4618      	mov	r0, r3
 80047be:	f001 f85d 	bl	800587c <hci_send_req>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	da01      	bge.n	80047cc <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80047c8:	23ff      	movs	r3, #255	; 0xff
 80047ca:	e02e      	b.n	800482a <aci_gap_init+0x150>
  if ( resp.Status )
 80047cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047d0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <aci_gap_init+0x10c>
    return resp.Status;
 80047da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	e021      	b.n	800482a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80047e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80047ee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8004800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004804:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004808:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800480c:	b29a      	uxth	r2, r3
 800480e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004812:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8004814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004818:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800481c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004820:	b29a      	uxth	r2, r3
 8004822:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004826:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8004830:	46bd      	mov	sp, r7
 8004832:	bd90      	pop	{r4, r7, pc}

08004834 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b0cc      	sub	sp, #304	; 0x130
 8004838:	af00      	add	r7, sp, #0
 800483a:	4602      	mov	r2, r0
 800483c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004844:	6019      	str	r1, [r3, #0]
 8004846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800484a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800484e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8004850:	f107 0310 	add.w	r3, r7, #16
 8004854:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800486a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800486e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004872:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004876:	7812      	ldrb	r2, [r2, #0]
 8004878:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800487a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800487e:	3301      	adds	r3, #1
 8004880:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8004884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004888:	1c58      	adds	r0, r3, #1
 800488a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800488e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004892:	781a      	ldrb	r2, [r3, #0]
 8004894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800489c:	6819      	ldr	r1, [r3, #0]
 800489e:	f000 fd53 	bl	8005348 <Osal_MemCpy>
  index_input += AdvDataLen;
 80048a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80048b0:	4413      	add	r3, r2
 80048b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80048b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048ba:	2218      	movs	r2, #24
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fd52 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 80048c4:	233f      	movs	r3, #63	; 0x3f
 80048c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80048ca:	238e      	movs	r3, #142	; 0x8e
 80048cc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80048d0:	f107 0310 	add.w	r3, r7, #16
 80048d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80048d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80048e0:	f107 030f 	add.w	r3, r7, #15
 80048e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80048ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048f2:	2100      	movs	r1, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 ffc1 	bl	800587c <hci_send_req>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	da01      	bge.n	8004904 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8004900:	23ff      	movs	r3, #255	; 0xff
 8004902:	e004      	b.n	800490e <aci_gap_update_adv_data+0xda>
  return status;
 8004904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004908:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800490c:	781b      	ldrb	r3, [r3, #0]
}
 800490e:	4618      	mov	r0, r3
 8004910:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004922:	f107 0308 	add.w	r3, r7, #8
 8004926:	2218      	movs	r2, #24
 8004928:	2100      	movs	r1, #0
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fd1c 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004930:	233f      	movs	r3, #63	; 0x3f
 8004932:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8004934:	2392      	movs	r3, #146	; 0x92
 8004936:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004938:	1dfb      	adds	r3, r7, #7
 800493a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800493c:	2301      	movs	r3, #1
 800493e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004940:	f107 0308 	add.w	r3, r7, #8
 8004944:	2100      	movs	r1, #0
 8004946:	4618      	mov	r0, r3
 8004948:	f000 ff98 	bl	800587c <hci_send_req>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	da01      	bge.n	8004956 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004952:	23ff      	movs	r3, #255	; 0xff
 8004954:	e000      	b.n	8004958 <aci_gap_configure_whitelist+0x40>
  return status;
 8004956:	79fb      	ldrb	r3, [r7, #7]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3720      	adds	r7, #32
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b0cc      	sub	sp, #304	; 0x130
 8004964:	af00      	add	r7, sp, #0
 8004966:	4602      	mov	r2, r0
 8004968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800496c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004976:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800497a:	460a      	mov	r2, r1
 800497c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800497e:	f107 0310 	add.w	r3, r7, #16
 8004982:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800498a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800498e:	2200      	movs	r2, #0
 8004990:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8004998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800499c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049a0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80049a4:	8812      	ldrh	r2, [r2, #0]
 80049a6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80049a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049ac:	3302      	adds	r3, #2
 80049ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80049b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049ba:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80049be:	7812      	ldrb	r2, [r2, #0]
 80049c0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80049c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049c6:	3301      	adds	r3, #1
 80049c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80049cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049d0:	2218      	movs	r2, #24
 80049d2:	2100      	movs	r1, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fcc7 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 80049da:	233f      	movs	r3, #63	; 0x3f
 80049dc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80049e0:	23a5      	movs	r3, #165	; 0xa5
 80049e2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80049e6:	f107 0310 	add.w	r3, r7, #16
 80049ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80049ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80049f6:	f107 030f 	add.w	r3, r7, #15
 80049fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004a04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a08:	2100      	movs	r1, #0
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 ff36 	bl	800587c <hci_send_req>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	da01      	bge.n	8004a1a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8004a16:	23ff      	movs	r3, #255	; 0xff
 8004a18:	e004      	b.n	8004a24 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8004a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004a22:	781b      	ldrb	r3, [r3, #0]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b088      	sub	sp, #32
 8004a32:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004a38:	f107 0308 	add.w	r3, r7, #8
 8004a3c:	2218      	movs	r2, #24
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fc91 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004a46:	233f      	movs	r3, #63	; 0x3f
 8004a48:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004a4a:	f240 1301 	movw	r3, #257	; 0x101
 8004a4e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004a50:	1dfb      	adds	r3, r7, #7
 8004a52:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004a54:	2301      	movs	r3, #1
 8004a56:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004a58:	f107 0308 	add.w	r3, r7, #8
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 ff0c 	bl	800587c <hci_send_req>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	da01      	bge.n	8004a6e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004a6a:	23ff      	movs	r3, #255	; 0xff
 8004a6c:	e000      	b.n	8004a70 <aci_gatt_init+0x42>
  return status;
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3720      	adds	r7, #32
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8004a78:	b590      	push	{r4, r7, lr}
 8004a7a:	b0cf      	sub	sp, #316	; 0x13c
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4604      	mov	r4, r0
 8004a80:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8004a84:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8004a88:	6001      	str	r1, [r0, #0]
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a92:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8004a96:	4622      	mov	r2, r4
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a9e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004aaa:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004aae:	460a      	mov	r2, r1
 8004ab0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8004ab2:	f107 0310 	add.w	r3, r7, #16
 8004ab6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004aba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004abe:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d00a      	beq.n	8004ade <aci_gatt_add_service+0x66>
 8004ac8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004acc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d101      	bne.n	8004ada <aci_gatt_add_service+0x62>
 8004ad6:	2311      	movs	r3, #17
 8004ad8:	e002      	b.n	8004ae0 <aci_gatt_add_service+0x68>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <aci_gatt_add_service+0x68>
 8004ade:	2303      	movs	r3, #3
 8004ae0:	f107 0210 	add.w	r2, r7, #16
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004aea:	f107 030c 	add.w	r3, r7, #12
 8004aee:	2203      	movs	r2, #3
 8004af0:	2100      	movs	r1, #0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fc38 	bl	8005368 <Osal_MemSet>
  int index_input = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8004afe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b02:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004b06:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8004b0a:	7812      	ldrb	r2, [r2, #0]
 8004b0c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004b0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b12:	3301      	adds	r3, #1
 8004b14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8004b18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004b1c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d002      	beq.n	8004b2c <aci_gatt_add_service+0xb4>
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d004      	beq.n	8004b34 <aci_gatt_add_service+0xbc>
 8004b2a:	e007      	b.n	8004b3c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004b32:	e005      	b.n	8004b40 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8004b34:	2310      	movs	r3, #16
 8004b36:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004b3a:	e001      	b.n	8004b40 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8004b3c:	2397      	movs	r3, #151	; 0x97
 8004b3e:	e06c      	b.n	8004c1a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8004b40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b44:	1c58      	adds	r0, r3, #1
 8004b46:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8004b4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004b4e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004b52:	6819      	ldr	r1, [r3, #0]
 8004b54:	f000 fbf8 	bl	8005348 <Osal_MemCpy>
    index_input += size;
 8004b58:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8004b5c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004b60:	4413      	add	r3, r2
 8004b62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8004b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b6a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004b6e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8004b72:	7812      	ldrb	r2, [r2, #0]
 8004b74:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004b76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8004b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b84:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004b88:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8004b8c:	7812      	ldrb	r2, [r2, #0]
 8004b8e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8004b90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b94:	3301      	adds	r3, #1
 8004b96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004b9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b9e:	2218      	movs	r2, #24
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fbe0 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004ba8:	233f      	movs	r3, #63	; 0x3f
 8004baa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8004bae:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004bb2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004bb6:	f107 0310 	add.w	r3, r7, #16
 8004bba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004bbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bc2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004bc6:	f107 030c 	add.w	r3, r7, #12
 8004bca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004bce:	2303      	movs	r3, #3
 8004bd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004bd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fe4e 	bl	800587c <hci_send_req>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	da01      	bge.n	8004bea <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8004be6:	23ff      	movs	r3, #255	; 0xff
 8004be8:	e017      	b.n	8004c1a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8004bea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004bee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8004bf8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004bfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	e00a      	b.n	8004c1a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8004c04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004c08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c0c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004c16:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd90      	pop	{r4, r7, pc}

08004c24 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8004c24:	b590      	push	{r4, r7, lr}
 8004c26:	b0d1      	sub	sp, #324	; 0x144
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8004c32:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8004c36:	600a      	str	r2, [r1, #0]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c3e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004c42:	4622      	mov	r2, r4
 8004c44:	801a      	strh	r2, [r3, #0]
 8004c46:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c4a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004c4e:	4602      	mov	r2, r0
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c56:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8004c5a:	460a      	mov	r2, r1
 8004c5c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8004c5e:	f107 0318 	add.w	r3, r7, #24
 8004c62:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004c66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c6a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d00a      	beq.n	8004c8a <aci_gatt_add_char+0x66>
 8004c74:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c78:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d101      	bne.n	8004c86 <aci_gatt_add_char+0x62>
 8004c82:	2313      	movs	r3, #19
 8004c84:	e002      	b.n	8004c8c <aci_gatt_add_char+0x68>
 8004c86:	2303      	movs	r3, #3
 8004c88:	e000      	b.n	8004c8c <aci_gatt_add_char+0x68>
 8004c8a:	2305      	movs	r3, #5
 8004c8c:	f107 0218 	add.w	r2, r7, #24
 8004c90:	4413      	add	r3, r2
 8004c92:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004c96:	f107 0314 	add.w	r3, r7, #20
 8004c9a:	2203      	movs	r2, #3
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fb62 	bl	8005368 <Osal_MemSet>
  int index_input = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8004caa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004cae:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004cb2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8004cb6:	8812      	ldrh	r2, [r2, #0]
 8004cb8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004cba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cbe:	3302      	adds	r3, #2
 8004cc0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8004cc4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004cc8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004ccc:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8004cd0:	7812      	ldrb	r2, [r2, #0]
 8004cd2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004cd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cd8:	3301      	adds	r3, #1
 8004cda:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8004cde:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004ce2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d002      	beq.n	8004cf2 <aci_gatt_add_char+0xce>
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d004      	beq.n	8004cfa <aci_gatt_add_char+0xd6>
 8004cf0:	e007      	b.n	8004d02 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8004cf8:	e005      	b.n	8004d06 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8004cfa:	2310      	movs	r3, #16
 8004cfc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8004d00:	e001      	b.n	8004d06 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8004d02:	2397      	movs	r3, #151	; 0x97
 8004d04:	e091      	b.n	8004e2a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8004d06:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004d0a:	1cd8      	adds	r0, r3, #3
 8004d0c:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8004d10:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004d14:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004d18:	6819      	ldr	r1, [r3, #0]
 8004d1a:	f000 fb15 	bl	8005348 <Osal_MemCpy>
    index_input += size;
 8004d1e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8004d22:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004d26:	4413      	add	r3, r2
 8004d28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8004d2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d30:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004d34:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8004d38:	8812      	ldrh	r2, [r2, #0]
 8004d3a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004d3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d40:	3302      	adds	r3, #2
 8004d42:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8004d46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d4a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8004d4e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8004d50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d54:	3301      	adds	r3, #1
 8004d56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8004d5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d5e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004d62:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8004d64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d68:	3301      	adds	r3, #1
 8004d6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8004d6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d72:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8004d76:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8004d78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8004d82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d86:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8004d8a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8004d8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d90:	3301      	adds	r3, #1
 8004d92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8004d96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d9a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8004d9e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8004da0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004da4:	3301      	adds	r3, #1
 8004da6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004daa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004dae:	2218      	movs	r2, #24
 8004db0:	2100      	movs	r1, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fad8 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004db8:	233f      	movs	r3, #63	; 0x3f
 8004dba:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8004dbe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004dc2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8004dc6:	f107 0318 	add.w	r3, r7, #24
 8004dca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8004dce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004dd2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8004dd6:	f107 0314 	add.w	r3, r7, #20
 8004dda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8004dde:	2303      	movs	r3, #3
 8004de0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004de4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004de8:	2100      	movs	r1, #0
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fd46 	bl	800587c <hci_send_req>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	da01      	bge.n	8004dfa <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8004df6:	23ff      	movs	r3, #255	; 0xff
 8004df8:	e017      	b.n	8004e2a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8004dfa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004dfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8004e08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	e00a      	b.n	8004e2a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8004e14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004e18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e1c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004e26:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd90      	pop	{r4, r7, pc}

08004e34 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8004e34:	b5b0      	push	{r4, r5, r7, lr}
 8004e36:	b0cc      	sub	sp, #304	; 0x130
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	460c      	mov	r4, r1
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e46:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004e4a:	462a      	mov	r2, r5
 8004e4c:	801a      	strh	r2, [r3, #0]
 8004e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e56:	4622      	mov	r2, r4
 8004e58:	801a      	strh	r2, [r3, #0]
 8004e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8004e62:	4602      	mov	r2, r0
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004e6e:	460a      	mov	r2, r1
 8004e70:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004e72:	f107 0310 	add.w	r3, r7, #16
 8004e76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8004e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e94:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004e98:	8812      	ldrh	r2, [r2, #0]
 8004e9a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004e9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ea0:	3302      	adds	r3, #2
 8004ea2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8004ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eaa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004eae:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004eb2:	8812      	ldrh	r2, [r2, #0]
 8004eb4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004eb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004eba:	3302      	adds	r3, #2
 8004ebc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8004ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ec8:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8004ecc:	7812      	ldrb	r2, [r2, #0]
 8004ece:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004ed0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ede:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ee2:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8004ee6:	7812      	ldrb	r2, [r2, #0]
 8004ee8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004eea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004eee:	3301      	adds	r3, #1
 8004ef0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef8:	1d98      	adds	r0, r3, #6
 8004efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004efe:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004f0a:	f000 fa1d 	bl	8005348 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8004f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f12:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004f22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f26:	2218      	movs	r2, #24
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fa1c 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004f30:	233f      	movs	r3, #63	; 0x3f
 8004f32:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8004f36:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004f3a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004f3e:	f107 0310 	add.w	r3, r7, #16
 8004f42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004f46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004f4e:	f107 030f 	add.w	r3, r7, #15
 8004f52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004f5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f60:	2100      	movs	r1, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fc8a 	bl	800587c <hci_send_req>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	da01      	bge.n	8004f72 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8004f6e:	23ff      	movs	r3, #255	; 0xff
 8004f70:	e004      	b.n	8004f7c <aci_gatt_update_char_value+0x148>
  return status;
 8004f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f76:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004f7a:	781b      	ldrb	r3, [r3, #0]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bdb0      	pop	{r4, r5, r7, pc}

08004f86 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b0cc      	sub	sp, #304	; 0x130
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004faa:	460a      	mov	r2, r1
 8004fac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8004fae:	f107 0310 	add.w	r3, r7, #16
 8004fb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8004fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fcc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fd0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004fd4:	7812      	ldrb	r2, [r2, #0]
 8004fd6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004fd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fdc:	3301      	adds	r3, #1
 8004fde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8004fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fea:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004fee:	7812      	ldrb	r2, [r2, #0]
 8004ff0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004ff2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8004ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005000:	1c98      	adds	r0, r3, #2
 8005002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005006:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800500a:	781a      	ldrb	r2, [r3, #0]
 800500c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005014:	6819      	ldr	r1, [r3, #0]
 8005016:	f000 f997 	bl	8005348 <Osal_MemCpy>
  index_input += Length;
 800501a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005028:	4413      	add	r3, r2
 800502a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800502e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005032:	2218      	movs	r2, #24
 8005034:	2100      	movs	r1, #0
 8005036:	4618      	mov	r0, r3
 8005038:	f000 f996 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 800503c:	233f      	movs	r3, #63	; 0x3f
 800503e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8005042:	230c      	movs	r3, #12
 8005044:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005048:	f107 0310 	add.w	r3, r7, #16
 800504c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005050:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005054:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005058:	f107 030f 	add.w	r3, r7, #15
 800505c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005060:	2301      	movs	r3, #1
 8005062:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005066:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800506a:	2100      	movs	r1, #0
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fc05 	bl	800587c <hci_send_req>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	da01      	bge.n	800507c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8005078:	23ff      	movs	r3, #255	; 0xff
 800507a:	e004      	b.n	8005086 <aci_hal_write_config_data+0x100>
  return status;
 800507c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005080:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005084:	781b      	ldrb	r3, [r3, #0]
}
 8005086:	4618      	mov	r0, r3
 8005088:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b0cc      	sub	sp, #304	; 0x130
 8005094:	af00      	add	r7, sp, #0
 8005096:	4602      	mov	r2, r0
 8005098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80050aa:	460a      	mov	r2, r1
 80050ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80050ae:	f107 0310 	add.w	r3, r7, #16
 80050b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80050b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80050c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050d0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80050d4:	7812      	ldrb	r2, [r2, #0]
 80050d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80050d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050dc:	3301      	adds	r3, #1
 80050de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80050e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050ea:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80050ee:	7812      	ldrb	r2, [r2, #0]
 80050f0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80050f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050f6:	3301      	adds	r3, #1
 80050f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80050fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005100:	2218      	movs	r2, #24
 8005102:	2100      	movs	r1, #0
 8005104:	4618      	mov	r0, r3
 8005106:	f000 f92f 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 800510a:	233f      	movs	r3, #63	; 0x3f
 800510c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8005110:	230f      	movs	r3, #15
 8005112:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005116:	f107 0310 	add.w	r3, r7, #16
 800511a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800511e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005122:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005126:	f107 030f 	add.w	r3, r7, #15
 800512a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800512e:	2301      	movs	r3, #1
 8005130:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005134:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005138:	2100      	movs	r1, #0
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fb9e 	bl	800587c <hci_send_req>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	da01      	bge.n	800514a <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8005146:	23ff      	movs	r3, #255	; 0xff
 8005148:	e004      	b.n	8005154 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800514a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005152:	781b      	ldrb	r3, [r3, #0]
}
 8005154:	4618      	mov	r0, r3
 8005156:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b0cc      	sub	sp, #304	; 0x130
 8005162:	af00      	add	r7, sp, #0
 8005164:	4602      	mov	r2, r0
 8005166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800516e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8005170:	f107 0310 	add.w	r3, r7, #16
 8005174:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005184:	2300      	movs	r3, #0
 8005186:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800518a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800518e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005192:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005196:	8812      	ldrh	r2, [r2, #0]
 8005198:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800519a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800519e:	3302      	adds	r3, #2
 80051a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80051a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051a8:	2218      	movs	r2, #24
 80051aa:	2100      	movs	r1, #0
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 f8db 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x3f;
 80051b2:	233f      	movs	r3, #63	; 0x3f
 80051b4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80051b8:	2318      	movs	r3, #24
 80051ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80051be:	f107 0310 	add.w	r3, r7, #16
 80051c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80051c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80051ce:	f107 030f 	add.w	r3, r7, #15
 80051d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80051dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fb4a 	bl	800587c <hci_send_req>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	da01      	bge.n	80051f2 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80051ee:	23ff      	movs	r3, #255	; 0xff
 80051f0:	e004      	b.n	80051fc <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80051f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80051fa:	781b      	ldrb	r3, [r3, #0]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b088      	sub	sp, #32
 800520a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005210:	f107 0308 	add.w	r3, r7, #8
 8005214:	2218      	movs	r2, #24
 8005216:	2100      	movs	r1, #0
 8005218:	4618      	mov	r0, r3
 800521a:	f000 f8a5 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x03;
 800521e:	2303      	movs	r3, #3
 8005220:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8005222:	2303      	movs	r3, #3
 8005224:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005226:	1dfb      	adds	r3, r7, #7
 8005228:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800522a:	2301      	movs	r3, #1
 800522c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800522e:	f107 0308 	add.w	r3, r7, #8
 8005232:	2100      	movs	r1, #0
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fb21 	bl	800587c <hci_send_req>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	da01      	bge.n	8005244 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005240:	23ff      	movs	r3, #255	; 0xff
 8005242:	e000      	b.n	8005246 <hci_reset+0x40>
  return status;
 8005244:	79fb      	ldrb	r3, [r7, #7]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800524e:	b590      	push	{r4, r7, lr}
 8005250:	b0cd      	sub	sp, #308	; 0x134
 8005252:	af00      	add	r7, sp, #0
 8005254:	4604      	mov	r4, r0
 8005256:	4608      	mov	r0, r1
 8005258:	4611      	mov	r1, r2
 800525a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005262:	4622      	mov	r2, r4
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800526e:	4602      	mov	r2, r0
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005276:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800527a:	460a      	mov	r2, r1
 800527c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800527e:	f107 0310 	add.w	r3, r7, #16
 8005282:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800528e:	2200      	movs	r2, #0
 8005290:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8005298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800529c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052a0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80052a4:	7812      	ldrb	r2, [r2, #0]
 80052a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80052a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052ac:	3301      	adds	r3, #1
 80052ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80052b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052ba:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80052be:	7812      	ldrb	r2, [r2, #0]
 80052c0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80052c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052c6:	3301      	adds	r3, #1
 80052c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80052cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052d4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80052d8:	7812      	ldrb	r2, [r2, #0]
 80052da:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80052dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052e0:	3301      	adds	r3, #1
 80052e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80052e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052ea:	2218      	movs	r2, #24
 80052ec:	2100      	movs	r1, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 f83a 	bl	8005368 <Osal_MemSet>
  rq.ogf = 0x08;
 80052f4:	2308      	movs	r3, #8
 80052f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80052fa:	2331      	movs	r3, #49	; 0x31
 80052fc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005300:	f107 0310 	add.w	r3, r7, #16
 8005304:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005308:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800530c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005310:	f107 030f 	add.w	r3, r7, #15
 8005314:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005318:	2301      	movs	r3, #1
 800531a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800531e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f000 faa9 	bl	800587c <hci_send_req>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	da01      	bge.n	8005334 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8005330:	23ff      	movs	r3, #255	; 0xff
 8005332:	e004      	b.n	800533e <hci_le_set_default_phy+0xf0>
  return status;
 8005334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005338:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800533c:	781b      	ldrb	r3, [r3, #0]
}
 800533e:	4618      	mov	r0, r3
 8005340:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8005344:	46bd      	mov	sp, r7
 8005346:	bd90      	pop	{r4, r7, pc}

08005348 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f002 f9c9 	bl	80076f0 <memcpy>
 800535e:	4603      	mov	r3, r0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f002 f9c7 	bl	800770c <memset>
 800537e:	4603      	mov	r3, r0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  return;
 800538c:	bf00      	nop
}
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8005396:	b480      	push	{r7}
 8005398:	af00      	add	r7, sp, #0
  return;
 800539a:	bf00      	nop
}
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return;
 80053a8:	bf00      	nop
}
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80053b2:	b480      	push	{r7}
 80053b4:	af00      	add	r7, sp, #0
  return;
 80053b6:	bf00      	nop
}
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return;
 80053c4:	bf00      	nop
}
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80053ce:	b480      	push	{r7}
 80053d0:	af00      	add	r7, sp, #0
  return;
 80053d2:	bf00      	nop
}
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  return;
 80053e0:	bf00      	nop
}
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80053ea:	b480      	push	{r7}
 80053ec:	af00      	add	r7, sp, #0
  return;
 80053ee:	bf00      	nop
}
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return;
 80053fc:	bf00      	nop
}
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8005406:	b480      	push	{r7}
 8005408:	af00      	add	r7, sp, #0
  return;
 800540a:	bf00      	nop
}
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  return;
 8005418:	bf00      	nop
}
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0
  return;
 8005426:	bf00      	nop
}
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  return;
 8005434:	bf00      	nop
}
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800543e:	b480      	push	{r7}
 8005440:	af00      	add	r7, sp, #0
  return;
 8005442:	bf00      	nop
}
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return;
 8005450:	bf00      	nop
}
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800545a:	b480      	push	{r7}
 800545c:	af00      	add	r7, sp, #0
  return;
 800545e:	bf00      	nop
}
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  return;
 800546c:	bf00      	nop
}
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
	...

08005478 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800547c:	4b04      	ldr	r3, [pc, #16]	; (8005490 <SVCCTL_Init+0x18>)
 800547e:	2200      	movs	r2, #0
 8005480:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8005482:	4b04      	ldr	r3, [pc, #16]	; (8005494 <SVCCTL_Init+0x1c>)
 8005484:	2200      	movs	r2, #0
 8005486:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8005488:	f000 f806 	bl	8005498 <SVCCTL_SvcInit>

  return;
 800548c:	bf00      	nop
}
 800548e:	bd80      	pop	{r7, pc}
 8005490:	200000c4 	.word	0x200000c4
 8005494:	200000e4 	.word	0x200000e4

08005498 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  BAS_Init();
 800549c:	f7ff ff74 	bl	8005388 <BAS_Init>

  BLS_Init();
 80054a0:	f7ff ff79 	bl	8005396 <BLS_Init>

  CRS_STM_Init();
 80054a4:	f7ff ff7e 	bl	80053a4 <CRS_STM_Init>

  DIS_Init();
 80054a8:	f7ff ff83 	bl	80053b2 <DIS_Init>

  EDS_STM_Init();
 80054ac:	f7ff ff88 	bl	80053c0 <EDS_STM_Init>

  HIDS_Init();
 80054b0:	f7ff ff8d 	bl	80053ce <HIDS_Init>

  HRS_Init();
 80054b4:	f7ff ff92 	bl	80053dc <HRS_Init>

  HTS_Init();
 80054b8:	f7ff ff97 	bl	80053ea <HTS_Init>

  IAS_Init();
 80054bc:	f7ff ff9c 	bl	80053f8 <IAS_Init>

  LLS_Init();
 80054c0:	f7ff ffa1 	bl	8005406 <LLS_Init>

  TPS_Init();
 80054c4:	f7ff ffa6 	bl	8005414 <TPS_Init>

  MOTENV_STM_Init();
 80054c8:	f7ff ffab 	bl	8005422 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80054cc:	f7ff ffb0 	bl	8005430 <P2PS_STM_Init>

  ZDD_STM_Init();
 80054d0:	f7ff ffb5 	bl	800543e <ZDD_STM_Init>

  OTAS_STM_Init();
 80054d4:	f7ff ffba 	bl	800544c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80054d8:	f7ff ffc6 	bl	8005468 <BVOPUS_STM_Init>

  MESH_Init();
 80054dc:	f7ff ffbd 	bl	800545a <MESH_Init>

  SVCCTL_InitCustomSvc();
 80054e0:	f001 fb2c 	bl	8006b3c <SVCCTL_InitCustomSvc>
  
  return;
 80054e4:	bf00      	nop
}
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80054f0:	4b09      	ldr	r3, [pc, #36]	; (8005518 <SVCCTL_RegisterSvcHandler+0x30>)
 80054f2:	7f1b      	ldrb	r3, [r3, #28]
 80054f4:	4619      	mov	r1, r3
 80054f6:	4a08      	ldr	r2, [pc, #32]	; (8005518 <SVCCTL_RegisterSvcHandler+0x30>)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80054fe:	4b06      	ldr	r3, [pc, #24]	; (8005518 <SVCCTL_RegisterSvcHandler+0x30>)
 8005500:	7f1b      	ldrb	r3, [r3, #28]
 8005502:	3301      	adds	r3, #1
 8005504:	b2da      	uxtb	r2, r3
 8005506:	4b04      	ldr	r3, [pc, #16]	; (8005518 <SVCCTL_RegisterSvcHandler+0x30>)
 8005508:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800550a:	bf00      	nop
}
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	200000c4 	.word	0x200000c4

0800551c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3301      	adds	r3, #1
 8005528:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800552a:	2300      	movs	r3, #0
 800552c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2bff      	cmp	r3, #255	; 0xff
 8005534:	d125      	bne.n	8005582 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	3302      	adds	r3, #2
 800553a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	b29b      	uxth	r3, r3
 8005542:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005546:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800554a:	d118      	bne.n	800557e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800554c:	2300      	movs	r3, #0
 800554e:	757b      	strb	r3, [r7, #21]
 8005550:	e00d      	b.n	800556e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8005552:	7d7b      	ldrb	r3, [r7, #21]
 8005554:	4a1a      	ldr	r2, [pc, #104]	; (80055c0 <SVCCTL_UserEvtRx+0xa4>)
 8005556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4798      	blx	r3
 800555e:	4603      	mov	r3, r0
 8005560:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8005562:	7dfb      	ldrb	r3, [r7, #23]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d108      	bne.n	800557a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005568:	7d7b      	ldrb	r3, [r7, #21]
 800556a:	3301      	adds	r3, #1
 800556c:	757b      	strb	r3, [r7, #21]
 800556e:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <SVCCTL_UserEvtRx+0xa4>)
 8005570:	7f1b      	ldrb	r3, [r3, #28]
 8005572:	7d7a      	ldrb	r2, [r7, #21]
 8005574:	429a      	cmp	r2, r3
 8005576:	d3ec      	bcc.n	8005552 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8005578:	e002      	b.n	8005580 <SVCCTL_UserEvtRx+0x64>
              break;
 800557a:	bf00      	nop
          break;
 800557c:	e000      	b.n	8005580 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800557e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8005580:	e000      	b.n	8005584 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8005582:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d00f      	beq.n	80055aa <SVCCTL_UserEvtRx+0x8e>
 800558a:	2b02      	cmp	r3, #2
 800558c:	dc10      	bgt.n	80055b0 <SVCCTL_UserEvtRx+0x94>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <SVCCTL_UserEvtRx+0x7c>
 8005592:	2b01      	cmp	r3, #1
 8005594:	d006      	beq.n	80055a4 <SVCCTL_UserEvtRx+0x88>
 8005596:	e00b      	b.n	80055b0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 ff85 	bl	80064a8 <SVCCTL_App_Notification>
 800559e:	4603      	mov	r3, r0
 80055a0:	75bb      	strb	r3, [r7, #22]
      break;
 80055a2:	e008      	b.n	80055b6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80055a4:	2301      	movs	r3, #1
 80055a6:	75bb      	strb	r3, [r7, #22]
      break;
 80055a8:	e005      	b.n	80055b6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80055aa:	2300      	movs	r3, #0
 80055ac:	75bb      	strb	r3, [r7, #22]
      break;
 80055ae:	e002      	b.n	80055b6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80055b0:	2301      	movs	r3, #1
 80055b2:	75bb      	strb	r3, [r7, #22]
      break;
 80055b4:	bf00      	nop
  }

  return (return_status);
 80055b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	200000c4 	.word	0x200000c4

080055c4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80055cc:	f107 030c 	add.w	r3, r7, #12
 80055d0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	212c      	movs	r1, #44	; 0x2c
 80055dc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80055e0:	f000 fae2 	bl	8005ba8 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	330b      	adds	r3, #11
 80055e8:	78db      	ldrb	r3, [r3, #3]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3720      	adds	r7, #32
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b088      	sub	sp, #32
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80055fa:	f107 030c 	add.w	r3, r7, #12
 80055fe:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	210f      	movs	r1, #15
 800560a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800560e:	f000 facb 	bl	8005ba8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	330b      	adds	r3, #11
 8005616:	78db      	ldrb	r3, [r3, #3]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3720      	adds	r7, #32
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005628:	f107 030c 	add.w	r3, r7, #12
 800562c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	210e      	movs	r1, #14
 8005634:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8005638:	f000 fab6 	bl	8005ba8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	330b      	adds	r3, #11
 8005640:	78db      	ldrb	r3, [r3, #3]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3720      	adds	r7, #32
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800564c:	b480      	push	{r7}
 800564e:	b08b      	sub	sp, #44	; 0x2c
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8005658:	2300      	movs	r3, #0
 800565a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8005668:	2300      	movs	r3, #0
 800566a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8005674:	4b4a      	ldr	r3, [pc, #296]	; (80057a0 <SHCI_GetWirelessFwInfo+0x154>)
 8005676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005678:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800567c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005686:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a44      	ldr	r2, [pc, #272]	; (80057a4 <SHCI_GetWirelessFwInfo+0x158>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d10f      	bne.n	80056b8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	e01a      	b.n	80056ee <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80056c0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80056c4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	0e1b      	lsrs	r3, r3, #24
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	0c1b      	lsrs	r3, r3, #16
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	0a1b      	lsrs	r3, r3, #8
 8005706:	b2da      	uxtb	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	091b      	lsrs	r3, r3, #4
 8005710:	b2db      	uxtb	r3, r3
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	b2da      	uxtb	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	b2db      	uxtb	r3, r3
 8005720:	f003 030f 	and.w	r3, r3, #15
 8005724:	b2da      	uxtb	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	0e1b      	lsrs	r3, r3, #24
 800572e:	b2da      	uxtb	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	0c1b      	lsrs	r3, r3, #16
 8005738:	b2da      	uxtb	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	0a1b      	lsrs	r3, r3, #8
 8005742:	b2da      	uxtb	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	b2da      	uxtb	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	b2da      	uxtb	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	0e1b      	lsrs	r3, r3, #24
 800575c:	b2da      	uxtb	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	0c1b      	lsrs	r3, r3, #16
 8005766:	b2da      	uxtb	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	0a1b      	lsrs	r3, r3, #8
 8005770:	b2da      	uxtb	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	0e1b      	lsrs	r3, r3, #24
 800577a:	b2da      	uxtb	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	0c1b      	lsrs	r3, r3, #16
 8005784:	b2da      	uxtb	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	b2da      	uxtb	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	372c      	adds	r7, #44	; 0x2c
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	58004000 	.word	0x58004000
 80057a4:	a94656b9 	.word	0xa94656b9

080057a8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	4a08      	ldr	r2, [pc, #32]	; (80057d8 <hci_init+0x30>)
 80057b8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80057ba:	4a08      	ldr	r2, [pc, #32]	; (80057dc <hci_init+0x34>)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80057c0:	4806      	ldr	r0, [pc, #24]	; (80057dc <hci_init+0x34>)
 80057c2:	f000 f973 	bl	8005aac <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 f8d4 	bl	8005978 <TlInit>

  return;
 80057d0:	bf00      	nop
}
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	20000250 	.word	0x20000250
 80057dc:	20000228 	.word	0x20000228

080057e0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80057e6:	4822      	ldr	r0, [pc, #136]	; (8005870 <hci_user_evt_proc+0x90>)
 80057e8:	f000 fd28 	bl	800623c <LST_is_empty>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d12b      	bne.n	800584a <hci_user_evt_proc+0x6a>
 80057f2:	4b20      	ldr	r3, [pc, #128]	; (8005874 <hci_user_evt_proc+0x94>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d027      	beq.n	800584a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80057fa:	f107 030c 	add.w	r3, r7, #12
 80057fe:	4619      	mov	r1, r3
 8005800:	481b      	ldr	r0, [pc, #108]	; (8005870 <hci_user_evt_proc+0x90>)
 8005802:	f000 fdaa 	bl	800635a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8005806:	4b1c      	ldr	r3, [pc, #112]	; (8005878 <hci_user_evt_proc+0x98>)
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00c      	beq.n	8005828 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8005812:	2301      	movs	r3, #1
 8005814:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005816:	4b18      	ldr	r3, [pc, #96]	; (8005878 <hci_user_evt_proc+0x98>)
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	1d3a      	adds	r2, r7, #4
 800581c:	4610      	mov	r0, r2
 800581e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8005820:	793a      	ldrb	r2, [r7, #4]
 8005822:	4b14      	ldr	r3, [pc, #80]	; (8005874 <hci_user_evt_proc+0x94>)
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	e002      	b.n	800582e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005828:	4b12      	ldr	r3, [pc, #72]	; (8005874 <hci_user_evt_proc+0x94>)
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800582e:	4b11      	ldr	r3, [pc, #68]	; (8005874 <hci_user_evt_proc+0x94>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d004      	beq.n	8005840 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fc03 	bl	8006044 <TL_MM_EvtDone>
 800583e:	e004      	b.n	800584a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4619      	mov	r1, r3
 8005844:	480a      	ldr	r0, [pc, #40]	; (8005870 <hci_user_evt_proc+0x90>)
 8005846:	f000 fd1b 	bl	8006280 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800584a:	4809      	ldr	r0, [pc, #36]	; (8005870 <hci_user_evt_proc+0x90>)
 800584c:	f000 fcf6 	bl	800623c <LST_is_empty>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d107      	bne.n	8005866 <hci_user_evt_proc+0x86>
 8005856:	4b07      	ldr	r3, [pc, #28]	; (8005874 <hci_user_evt_proc+0x94>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800585e:	4804      	ldr	r0, [pc, #16]	; (8005870 <hci_user_evt_proc+0x90>)
 8005860:	f001 f83a 	bl	80068d8 <hci_notify_asynch_evt>
  }


  return;
 8005864:	bf00      	nop
 8005866:	bf00      	nop
}
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	200000ec 	.word	0x200000ec
 8005874:	200000f8 	.word	0x200000f8
 8005878:	20000228 	.word	0x20000228

0800587c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8005888:	2000      	movs	r0, #0
 800588a:	f000 f8cb 	bl	8005a24 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800588e:	2300      	movs	r3, #0
 8005890:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	885b      	ldrh	r3, [r3, #2]
 8005896:	b21b      	sxth	r3, r3
 8005898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800589c:	b21a      	sxth	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	029b      	lsls	r3, r3, #10
 80058a4:	b21b      	sxth	r3, r3
 80058a6:	4313      	orrs	r3, r2
 80058a8:	b21b      	sxth	r3, r3
 80058aa:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	b2d9      	uxtb	r1, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	8bbb      	ldrh	r3, [r7, #28]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 f88d 	bl	80059d8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80058be:	e04e      	b.n	800595e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80058c0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80058c4:	f001 f81f 	bl	8006906 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80058c8:	e043      	b.n	8005952 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80058ca:	f107 030c 	add.w	r3, r7, #12
 80058ce:	4619      	mov	r1, r3
 80058d0:	4828      	ldr	r0, [pc, #160]	; (8005974 <hci_send_req+0xf8>)
 80058d2:	f000 fd42 	bl	800635a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	7a5b      	ldrb	r3, [r3, #9]
 80058da:	2b0f      	cmp	r3, #15
 80058dc:	d114      	bne.n	8005908 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	330b      	adds	r3, #11
 80058e2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	885b      	ldrh	r3, [r3, #2]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	8bba      	ldrh	r2, [r7, #28]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d104      	bne.n	80058fa <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	7812      	ldrb	r2, [r2, #0]
 80058f8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d027      	beq.n	8005952 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8005902:	2301      	movs	r3, #1
 8005904:	77fb      	strb	r3, [r7, #31]
 8005906:	e024      	b.n	8005952 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	330b      	adds	r3, #11
 800590c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005914:	b29b      	uxth	r3, r3
 8005916:	8bba      	ldrh	r2, [r7, #28]
 8005918:	429a      	cmp	r2, r3
 800591a:	d114      	bne.n	8005946 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	7a9b      	ldrb	r3, [r3, #10]
 8005920:	3b03      	subs	r3, #3
 8005922:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695a      	ldr	r2, [r3, #20]
 8005928:	7dfb      	ldrb	r3, [r7, #23]
 800592a:	429a      	cmp	r2, r3
 800592c:	bfa8      	it	ge
 800592e:	461a      	movge	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6918      	ldr	r0, [r3, #16]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	1cd9      	adds	r1, r3, #3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	461a      	mov	r2, r3
 8005942:	f001 fed5 	bl	80076f0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800594e:	2301      	movs	r3, #1
 8005950:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005952:	4808      	ldr	r0, [pc, #32]	; (8005974 <hci_send_req+0xf8>)
 8005954:	f000 fc72 	bl	800623c <LST_is_empty>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0b5      	beq.n	80058ca <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800595e:	7ffb      	ldrb	r3, [r7, #31]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0ad      	beq.n	80058c0 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8005964:	2001      	movs	r0, #1
 8005966:	f000 f85d 	bl	8005a24 <NotifyCmdStatus>

  return 0;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3720      	adds	r7, #32
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20000248 	.word	0x20000248

08005978 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8005980:	480f      	ldr	r0, [pc, #60]	; (80059c0 <TlInit+0x48>)
 8005982:	f000 fc4b 	bl	800621c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8005986:	4a0f      	ldr	r2, [pc, #60]	; (80059c4 <TlInit+0x4c>)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800598c:	480e      	ldr	r0, [pc, #56]	; (80059c8 <TlInit+0x50>)
 800598e:	f000 fc45 	bl	800621c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005992:	4b0e      	ldr	r3, [pc, #56]	; (80059cc <TlInit+0x54>)
 8005994:	2201      	movs	r2, #1
 8005996:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8005998:	4b0d      	ldr	r3, [pc, #52]	; (80059d0 <TlInit+0x58>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00a      	beq.n	80059b6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80059a4:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <TlInit+0x5c>)
 80059a6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80059a8:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <TlInit+0x58>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f107 0208 	add.w	r2, r7, #8
 80059b0:	4610      	mov	r0, r2
 80059b2:	4798      	blx	r3
  }

  return;
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
}
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000248 	.word	0x20000248
 80059c4:	200000f4 	.word	0x200000f4
 80059c8:	200000ec 	.word	0x200000ec
 80059cc:	200000f8 	.word	0x200000f8
 80059d0:	20000228 	.word	0x20000228
 80059d4:	08005a65 	.word	0x08005a65

080059d8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	603a      	str	r2, [r7, #0]
 80059e2:	80fb      	strh	r3, [r7, #6]
 80059e4:	460b      	mov	r3, r1
 80059e6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80059e8:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <SendCmd+0x44>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	88fa      	ldrh	r2, [r7, #6]
 80059ee:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80059f2:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <SendCmd+0x44>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	797a      	ldrb	r2, [r7, #5]
 80059f8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80059fa:	4b08      	ldr	r3, [pc, #32]	; (8005a1c <SendCmd+0x44>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	330c      	adds	r3, #12
 8005a00:	797a      	ldrb	r2, [r7, #5]
 8005a02:	6839      	ldr	r1, [r7, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f001 fe73 	bl	80076f0 <memcpy>

  hciContext.io.Send(0,0);
 8005a0a:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <SendCmd+0x48>)
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2100      	movs	r1, #0
 8005a10:	2000      	movs	r0, #0
 8005a12:	4798      	blx	r3

  return;
 8005a14:	bf00      	nop
}
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	200000f4 	.word	0x200000f4
 8005a20:	20000228 	.word	0x20000228

08005a24 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d108      	bne.n	8005a46 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8005a34:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <NotifyCmdStatus+0x3c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00d      	beq.n	8005a58 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8005a3c:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <NotifyCmdStatus+0x3c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2000      	movs	r0, #0
 8005a42:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8005a44:	e008      	b.n	8005a58 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8005a46:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <NotifyCmdStatus+0x3c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d004      	beq.n	8005a58 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8005a4e:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <NotifyCmdStatus+0x3c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2001      	movs	r0, #1
 8005a54:	4798      	blx	r3
  return;
 8005a56:	bf00      	nop
 8005a58:	bf00      	nop
}
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20000250 	.word	0x20000250

08005a64 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	7a5b      	ldrb	r3, [r3, #9]
 8005a70:	2b0f      	cmp	r3, #15
 8005a72:	d003      	beq.n	8005a7c <TlEvtReceived+0x18>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	7a5b      	ldrb	r3, [r3, #9]
 8005a78:	2b0e      	cmp	r3, #14
 8005a7a:	d107      	bne.n	8005a8c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	4809      	ldr	r0, [pc, #36]	; (8005aa4 <TlEvtReceived+0x40>)
 8005a80:	f000 fc24 	bl	80062cc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8005a84:	2000      	movs	r0, #0
 8005a86:	f000 ff33 	bl	80068f0 <hci_cmd_resp_release>
 8005a8a:	e006      	b.n	8005a9a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	4806      	ldr	r0, [pc, #24]	; (8005aa8 <TlEvtReceived+0x44>)
 8005a90:	f000 fc1c 	bl	80062cc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005a94:	4804      	ldr	r0, [pc, #16]	; (8005aa8 <TlEvtReceived+0x44>)
 8005a96:	f000 ff1f 	bl	80068d8 <hci_notify_asynch_evt>
  }

  return;
 8005a9a:	bf00      	nop
}
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000248 	.word	0x20000248
 8005aa8:	200000ec 	.word	0x200000ec

08005aac <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a05      	ldr	r2, [pc, #20]	; (8005acc <hci_register_io_bus+0x20>)
 8005ab8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a04      	ldr	r2, [pc, #16]	; (8005ad0 <hci_register_io_bus+0x24>)
 8005abe:	611a      	str	r2, [r3, #16]

  return;
 8005ac0:	bf00      	nop
}
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	08005dbd 	.word	0x08005dbd
 8005ad0:	08005e25 	.word	0x08005e25

08005ad4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	4a08      	ldr	r2, [pc, #32]	; (8005b04 <shci_init+0x30>)
 8005ae4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8005ae6:	4a08      	ldr	r2, [pc, #32]	; (8005b08 <shci_init+0x34>)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8005aec:	4806      	ldr	r0, [pc, #24]	; (8005b08 <shci_init+0x34>)
 8005aee:	f000 f911 	bl	8005d14 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f894 	bl	8005c24 <TlInit>

  return;
 8005afc:	bf00      	nop
}
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000274 	.word	0x20000274
 8005b08:	20000254 	.word	0x20000254

08005b0c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005b12:	4822      	ldr	r0, [pc, #136]	; (8005b9c <shci_user_evt_proc+0x90>)
 8005b14:	f000 fb92 	bl	800623c <LST_is_empty>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d12b      	bne.n	8005b76 <shci_user_evt_proc+0x6a>
 8005b1e:	4b20      	ldr	r3, [pc, #128]	; (8005ba0 <shci_user_evt_proc+0x94>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d027      	beq.n	8005b76 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005b26:	f107 030c 	add.w	r3, r7, #12
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	481b      	ldr	r0, [pc, #108]	; (8005b9c <shci_user_evt_proc+0x90>)
 8005b2e:	f000 fc14 	bl	800635a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8005b32:	4b1c      	ldr	r3, [pc, #112]	; (8005ba4 <shci_user_evt_proc+0x98>)
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00c      	beq.n	8005b54 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005b42:	4b18      	ldr	r3, [pc, #96]	; (8005ba4 <shci_user_evt_proc+0x98>)
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	1d3a      	adds	r2, r7, #4
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005b4c:	793a      	ldrb	r2, [r7, #4]
 8005b4e:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <shci_user_evt_proc+0x94>)
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	e002      	b.n	8005b5a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005b54:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <shci_user_evt_proc+0x94>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8005b5a:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <shci_user_evt_proc+0x94>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d004      	beq.n	8005b6c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 fa6d 	bl	8006044 <TL_MM_EvtDone>
 8005b6a:	e004      	b.n	8005b76 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	480a      	ldr	r0, [pc, #40]	; (8005b9c <shci_user_evt_proc+0x90>)
 8005b72:	f000 fb85 	bl	8006280 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005b76:	4809      	ldr	r0, [pc, #36]	; (8005b9c <shci_user_evt_proc+0x90>)
 8005b78:	f000 fb60 	bl	800623c <LST_is_empty>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d107      	bne.n	8005b92 <shci_user_evt_proc+0x86>
 8005b82:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <shci_user_evt_proc+0x94>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8005b8a:	4804      	ldr	r0, [pc, #16]	; (8005b9c <shci_user_evt_proc+0x90>)
 8005b8c:	f7fa fe01 	bl	8000792 <shci_notify_asynch_evt>
  }


  return;
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
}
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000104 	.word	0x20000104
 8005ba0:	20000114 	.word	0x20000114
 8005ba4:	20000254 	.word	0x20000254

08005ba8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60ba      	str	r2, [r7, #8]
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	81fb      	strh	r3, [r7, #14]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8005bba:	2000      	movs	r0, #0
 8005bbc:	f000 f864 	bl	8005c88 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8005bc0:	4b16      	ldr	r3, [pc, #88]	; (8005c1c <shci_send+0x74>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	89fa      	ldrh	r2, [r7, #14]
 8005bc6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8005bca:	4b14      	ldr	r3, [pc, #80]	; (8005c1c <shci_send+0x74>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	7b7a      	ldrb	r2, [r7, #13]
 8005bd0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <shci_send+0x74>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	7b7a      	ldrb	r2, [r7, #13]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 fd87 	bl	80076f0 <memcpy>

  shciContext.io.Send(0,0);
 8005be2:	4b0f      	ldr	r3, [pc, #60]	; (8005c20 <shci_send+0x78>)
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	2100      	movs	r1, #0
 8005be8:	2000      	movs	r0, #0
 8005bea:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8005bec:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005bf0:	f7fa fde6 	bl	80007c0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f103 0008 	add.w	r0, r3, #8
 8005bfa:	4b08      	ldr	r3, [pc, #32]	; (8005c1c <shci_send+0x74>)
 8005bfc:	6819      	ldr	r1, [r3, #0]
 8005bfe:	4b07      	ldr	r3, [pc, #28]	; (8005c1c <shci_send+0x74>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	789b      	ldrb	r3, [r3, #2]
 8005c04:	3303      	adds	r3, #3
 8005c06:	461a      	mov	r2, r3
 8005c08:	f001 fd72 	bl	80076f0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005c0c:	2001      	movs	r0, #1
 8005c0e:	f000 f83b 	bl	8005c88 <Cmd_SetStatus>

  return;
 8005c12:	bf00      	nop
}
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000110 	.word	0x20000110
 8005c20:	20000254 	.word	0x20000254

08005c24 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005c2c:	4a10      	ldr	r2, [pc, #64]	; (8005c70 <TlInit+0x4c>)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8005c32:	4810      	ldr	r0, [pc, #64]	; (8005c74 <TlInit+0x50>)
 8005c34:	f000 faf2 	bl	800621c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005c38:	2001      	movs	r0, #1
 8005c3a:	f000 f825 	bl	8005c88 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005c3e:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <TlInit+0x54>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005c44:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <TlInit+0x58>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00c      	beq.n	8005c66 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8005c50:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <TlInit+0x5c>)
 8005c52:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005c54:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <TlInit+0x60>)
 8005c56:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005c58:	4b08      	ldr	r3, [pc, #32]	; (8005c7c <TlInit+0x58>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f107 020c 	add.w	r2, r7, #12
 8005c60:	4610      	mov	r0, r2
 8005c62:	4798      	blx	r3
  }

  return;
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
}
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20000110 	.word	0x20000110
 8005c74:	20000104 	.word	0x20000104
 8005c78:	20000114 	.word	0x20000114
 8005c7c:	20000254 	.word	0x20000254
 8005c80:	08005cd9 	.word	0x08005cd9
 8005c84:	08005cf1 	.word	0x08005cf1

08005c88 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10b      	bne.n	8005cb0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005c98:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <Cmd_SetStatus+0x48>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <Cmd_SetStatus+0x48>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005ca8:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <Cmd_SetStatus+0x4c>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8005cae:	e00b      	b.n	8005cc8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005cb0:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <Cmd_SetStatus+0x4c>)
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8005cb6:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <Cmd_SetStatus+0x48>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005cbe:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <Cmd_SetStatus+0x48>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	4798      	blx	r3
  return;
 8005cc6:	bf00      	nop
 8005cc8:	bf00      	nop
}
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20000274 	.word	0x20000274
 8005cd4:	2000010c 	.word	0x2000010c

08005cd8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f7fa fd62 	bl	80007aa <shci_cmd_resp_release>

  return;
 8005ce6:	bf00      	nop
}
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4805      	ldr	r0, [pc, #20]	; (8005d10 <TlUserEvtReceived+0x20>)
 8005cfc:	f000 fae6 	bl	80062cc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005d00:	4803      	ldr	r0, [pc, #12]	; (8005d10 <TlUserEvtReceived+0x20>)
 8005d02:	f7fa fd46 	bl	8000792 <shci_notify_asynch_evt>

  return;
 8005d06:	bf00      	nop
}
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	20000104 	.word	0x20000104

08005d14 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a05      	ldr	r2, [pc, #20]	; (8005d34 <shci_register_io_bus+0x20>)
 8005d20:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a04      	ldr	r2, [pc, #16]	; (8005d38 <shci_register_io_bus+0x24>)
 8005d26:	611a      	str	r2, [r3, #16]

  return;
 8005d28:	bf00      	nop
}
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	08005ed1 	.word	0x08005ed1
 8005d38:	08005f25 	.word	0x08005f25

08005d3c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8005d40:	f001 f960 	bl	8007004 <HW_IPCC_Enable>

  return;
 8005d44:	bf00      	nop
}
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <TL_Init>:


void TL_Init( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005d4c:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <TL_Init+0x48>)
 8005d4e:	4a11      	ldr	r2, [pc, #68]	; (8005d94 <TL_Init+0x4c>)
 8005d50:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005d52:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <TL_Init+0x48>)
 8005d54:	4a10      	ldr	r2, [pc, #64]	; (8005d98 <TL_Init+0x50>)
 8005d56:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005d58:	4b0d      	ldr	r3, [pc, #52]	; (8005d90 <TL_Init+0x48>)
 8005d5a:	4a10      	ldr	r2, [pc, #64]	; (8005d9c <TL_Init+0x54>)
 8005d5c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005d5e:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <TL_Init+0x48>)
 8005d60:	4a0f      	ldr	r2, [pc, #60]	; (8005da0 <TL_Init+0x58>)
 8005d62:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8005d64:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <TL_Init+0x48>)
 8005d66:	4a0f      	ldr	r2, [pc, #60]	; (8005da4 <TL_Init+0x5c>)
 8005d68:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005d6a:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <TL_Init+0x48>)
 8005d6c:	4a0e      	ldr	r2, [pc, #56]	; (8005da8 <TL_Init+0x60>)
 8005d6e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005d70:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <TL_Init+0x48>)
 8005d72:	4a0e      	ldr	r2, [pc, #56]	; (8005dac <TL_Init+0x64>)
 8005d74:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005d76:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <TL_Init+0x48>)
 8005d78:	4a0d      	ldr	r2, [pc, #52]	; (8005db0 <TL_Init+0x68>)
 8005d7a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005d7c:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <TL_Init+0x48>)
 8005d7e:	4a0d      	ldr	r2, [pc, #52]	; (8005db4 <TL_Init+0x6c>)
 8005d80:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005d82:	4b03      	ldr	r3, [pc, #12]	; (8005d90 <TL_Init+0x48>)
 8005d84:	4a0c      	ldr	r2, [pc, #48]	; (8005db8 <TL_Init+0x70>)
 8005d86:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8005d88:	f001 f950 	bl	800702c <HW_IPCC_Init>

  return;
 8005d8c:	bf00      	nop
}
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20030000 	.word	0x20030000
 8005d94:	20030028 	.word	0x20030028
 8005d98:	20030048 	.word	0x20030048
 8005d9c:	20030058 	.word	0x20030058
 8005da0:	20030068 	.word	0x20030068
 8005da4:	20030070 	.word	0x20030070
 8005da8:	20030078 	.word	0x20030078
 8005dac:	20030080 	.word	0x20030080
 8005db0:	2003009c 	.word	0x2003009c
 8005db4:	200300a0 	.word	0x200300a0
 8005db8:	200300ac 	.word	0x200300ac

08005dbc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8005dc8:	4811      	ldr	r0, [pc, #68]	; (8005e10 <TL_BLE_Init+0x54>)
 8005dca:	f000 fa27 	bl	800621c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8005dce:	4b11      	ldr	r3, [pc, #68]	; (8005e14 <TL_BLE_Init+0x58>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	4a0c      	ldr	r2, [pc, #48]	; (8005e18 <TL_BLE_Init+0x5c>)
 8005de8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	4a08      	ldr	r2, [pc, #32]	; (8005e10 <TL_BLE_Init+0x54>)
 8005dee:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8005df0:	f001 f932 	bl	8007058 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a08      	ldr	r2, [pc, #32]	; (8005e1c <TL_BLE_Init+0x60>)
 8005dfa:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	4a07      	ldr	r2, [pc, #28]	; (8005e20 <TL_BLE_Init+0x64>)
 8005e02:	6013      	str	r3, [r2, #0]

  return 0;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	200300c8 	.word	0x200300c8
 8005e14:	20030000 	.word	0x20030000
 8005e18:	20030a58 	.word	0x20030a58
 8005e1c:	20000280 	.word	0x20000280
 8005e20:	20000284 	.word	0x20000284

08005e24 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005e30:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <TL_BLE_SendCmd+0x34>)
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2201      	movs	r2, #1
 8005e38:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8005e3a:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <TL_BLE_SendCmd+0x34>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4619      	mov	r1, r3
 8005e42:	2001      	movs	r0, #1
 8005e44:	f000 f96c 	bl	8006120 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8005e48:	f001 f910 	bl	800706c <HW_IPCC_BLE_SendCmd>

  return 0;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20030000 	.word	0x20030000

08005e5c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8005e62:	e01c      	b.n	8005e9e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8005e64:	1d3b      	adds	r3, r7, #4
 8005e66:	4619      	mov	r1, r3
 8005e68:	4812      	ldr	r0, [pc, #72]	; (8005eb4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005e6a:	f000 fa76 	bl	800635a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	7a5b      	ldrb	r3, [r3, #9]
 8005e72:	2b0f      	cmp	r3, #15
 8005e74:	d003      	beq.n	8005e7e <HW_IPCC_BLE_RxEvtNot+0x22>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7a5b      	ldrb	r3, [r3, #9]
 8005e7a:	2b0e      	cmp	r3, #14
 8005e7c:	d105      	bne.n	8005e8a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4619      	mov	r1, r3
 8005e82:	2002      	movs	r0, #2
 8005e84:	f000 f94c 	bl	8006120 <OutputDbgTrace>
 8005e88:	e004      	b.n	8005e94 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	2003      	movs	r0, #3
 8005e90:	f000 f946 	bl	8006120 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8005e94:	4b08      	ldr	r3, [pc, #32]	; (8005eb8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005e9e:	4805      	ldr	r0, [pc, #20]	; (8005eb4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005ea0:	f000 f9cc 	bl	800623c <LST_is_empty>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0dc      	beq.n	8005e64 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8005eaa:	bf00      	nop
}
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	200300c8 	.word	0x200300c8
 8005eb8:	20000280 	.word	0x20000280

08005ebc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8005ec0:	4b02      	ldr	r3, [pc, #8]	; (8005ecc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4798      	blx	r3

  return;
 8005ec6:	bf00      	nop
}
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000284 	.word	0x20000284

08005ed0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005edc:	480d      	ldr	r0, [pc, #52]	; (8005f14 <TL_SYS_Init+0x44>)
 8005ede:	f000 f99d 	bl	800621c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005ee2:	4b0d      	ldr	r3, [pc, #52]	; (8005f18 <TL_SYS_Init+0x48>)
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4a08      	ldr	r2, [pc, #32]	; (8005f14 <TL_SYS_Init+0x44>)
 8005ef4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005ef6:	f001 f8db 	bl	80070b0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a07      	ldr	r2, [pc, #28]	; (8005f1c <TL_SYS_Init+0x4c>)
 8005f00:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	4a06      	ldr	r2, [pc, #24]	; (8005f20 <TL_SYS_Init+0x50>)
 8005f08:	6013      	str	r3, [r2, #0]

  return 0;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	200300d0 	.word	0x200300d0
 8005f18:	20030000 	.word	0x20030000
 8005f1c:	20000288 	.word	0x20000288
 8005f20:	2000028c 	.word	0x2000028c

08005f24 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005f30:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <TL_SYS_SendCmd+0x34>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2210      	movs	r2, #16
 8005f38:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8005f3a:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <TL_SYS_SendCmd+0x34>)
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4619      	mov	r1, r3
 8005f42:	2004      	movs	r0, #4
 8005f44:	f000 f8ec 	bl	8006120 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8005f48:	f001 f8bc 	bl	80070c4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20030000 	.word	0x20030000

08005f5c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4619      	mov	r1, r3
 8005f68:	2005      	movs	r0, #5
 8005f6a:	f000 f8d9 	bl	8006120 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005f6e:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a03      	ldr	r2, [pc, #12]	; (8005f80 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005f74:	68d2      	ldr	r2, [r2, #12]
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	4610      	mov	r0, r2
 8005f7a:	4798      	blx	r3

  return;
 8005f7c:	bf00      	nop
}
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20030000 	.word	0x20030000
 8005f84:	20000288 	.word	0x20000288

08005f88 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005f8e:	e00e      	b.n	8005fae <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005f90:	1d3b      	adds	r3, r7, #4
 8005f92:	4619      	mov	r1, r3
 8005f94:	480b      	ldr	r0, [pc, #44]	; (8005fc4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005f96:	f000 f9e0 	bl	800635a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	2006      	movs	r0, #6
 8005fa0:	f000 f8be 	bl	8006120 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005fa4:	4b08      	ldr	r3, [pc, #32]	; (8005fc8 <HW_IPCC_SYS_EvtNot+0x40>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	4610      	mov	r0, r2
 8005fac:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005fae:	4805      	ldr	r0, [pc, #20]	; (8005fc4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005fb0:	f000 f944 	bl	800623c <LST_is_empty>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0ea      	beq.n	8005f90 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8005fba:	bf00      	nop
}
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	200300d0 	.word	0x200300d0
 8005fc8:	2000028c 	.word	0x2000028c

08005fcc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005fd4:	4817      	ldr	r0, [pc, #92]	; (8006034 <TL_MM_Init+0x68>)
 8005fd6:	f000 f921 	bl	800621c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005fda:	4817      	ldr	r0, [pc, #92]	; (8006038 <TL_MM_Init+0x6c>)
 8005fdc:	f000 f91e 	bl	800621c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005fe0:	4b16      	ldr	r3, [pc, #88]	; (800603c <TL_MM_Init+0x70>)
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	4a16      	ldr	r2, [pc, #88]	; (8006040 <TL_MM_Init+0x74>)
 8005fe6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005fe8:	4b15      	ldr	r3, [pc, #84]	; (8006040 <TL_MM_Init+0x74>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6892      	ldr	r2, [r2, #8]
 8005ff0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005ff2:	4b13      	ldr	r3, [pc, #76]	; (8006040 <TL_MM_Init+0x74>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	68d2      	ldr	r2, [r2, #12]
 8005ffa:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005ffc:	4b10      	ldr	r3, [pc, #64]	; (8006040 <TL_MM_Init+0x74>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0c      	ldr	r2, [pc, #48]	; (8006034 <TL_MM_Init+0x68>)
 8006002:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8006004:	4b0e      	ldr	r3, [pc, #56]	; (8006040 <TL_MM_Init+0x74>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6812      	ldr	r2, [r2, #0]
 800600c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <TL_MM_Init+0x74>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6852      	ldr	r2, [r2, #4]
 8006016:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8006018:	4b09      	ldr	r3, [pc, #36]	; (8006040 <TL_MM_Init+0x74>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6912      	ldr	r2, [r2, #16]
 8006020:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8006022:	4b07      	ldr	r3, [pc, #28]	; (8006040 <TL_MM_Init+0x74>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6952      	ldr	r2, [r2, #20]
 800602a:	619a      	str	r2, [r3, #24]

  return;
 800602c:	bf00      	nop
}
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	200300b8 	.word	0x200300b8
 8006038:	20000278 	.word	0x20000278
 800603c:	20030000 	.word	0x20030000
 8006040:	20000290 	.word	0x20000290

08006044 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	4807      	ldr	r0, [pc, #28]	; (800606c <TL_MM_EvtDone+0x28>)
 8006050:	f000 f93c 	bl	80062cc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	2000      	movs	r0, #0
 8006058:	f000 f862 	bl	8006120 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800605c:	4804      	ldr	r0, [pc, #16]	; (8006070 <TL_MM_EvtDone+0x2c>)
 800605e:	f001 f857 	bl	8007110 <HW_IPCC_MM_SendFreeBuf>

  return;
 8006062:	bf00      	nop
}
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000278 	.word	0x20000278
 8006070:	08006075 	.word	0x08006075

08006074 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800607a:	e00c      	b.n	8006096 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800607c:	1d3b      	adds	r3, r7, #4
 800607e:	4619      	mov	r1, r3
 8006080:	480a      	ldr	r0, [pc, #40]	; (80060ac <SendFreeBuf+0x38>)
 8006082:	f000 f96a 	bl	800635a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8006086:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <SendFreeBuf+0x3c>)
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	4611      	mov	r1, r2
 8006090:	4618      	mov	r0, r3
 8006092:	f000 f91b 	bl	80062cc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006096:	4805      	ldr	r0, [pc, #20]	; (80060ac <SendFreeBuf+0x38>)
 8006098:	f000 f8d0 	bl	800623c <LST_is_empty>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0ec      	beq.n	800607c <SendFreeBuf+0x8>
  }

  return;
 80060a2:	bf00      	nop
}
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000278 	.word	0x20000278
 80060b0:	20030000 	.word	0x20030000

080060b4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80060b8:	4805      	ldr	r0, [pc, #20]	; (80060d0 <TL_TRACES_Init+0x1c>)
 80060ba:	f000 f8af 	bl	800621c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80060be:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <TL_TRACES_Init+0x20>)
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	4a03      	ldr	r2, [pc, #12]	; (80060d0 <TL_TRACES_Init+0x1c>)
 80060c4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80060c6:	f001 f859 	bl	800717c <HW_IPCC_TRACES_Init>

  return;
 80060ca:	bf00      	nop
}
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	200300c0 	.word	0x200300c0
 80060d4:	20030000 	.word	0x20030000

080060d8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80060de:	e008      	b.n	80060f2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80060e0:	1d3b      	adds	r3, r7, #4
 80060e2:	4619      	mov	r1, r3
 80060e4:	4808      	ldr	r0, [pc, #32]	; (8006108 <HW_IPCC_TRACES_EvtNot+0x30>)
 80060e6:	f000 f938 	bl	800635a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 f80d 	bl	800610c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80060f2:	4805      	ldr	r0, [pc, #20]	; (8006108 <HW_IPCC_TRACES_EvtNot+0x30>)
 80060f4:	f000 f8a2 	bl	800623c <LST_is_empty>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0f0      	beq.n	80060e0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80060fe:	bf00      	nop
}
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	200300c0 	.word	0x200300c0

0800610c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	4603      	mov	r3, r0
 8006128:	6039      	str	r1, [r7, #0]
 800612a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	2b06      	cmp	r3, #6
 8006130:	d845      	bhi.n	80061be <OutputDbgTrace+0x9e>
 8006132:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <OutputDbgTrace+0x18>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	08006155 	.word	0x08006155
 800613c:	08006179 	.word	0x08006179
 8006140:	0800617f 	.word	0x0800617f
 8006144:	08006193 	.word	0x08006193
 8006148:	0800619f 	.word	0x0800619f
 800614c:	080061a5 	.word	0x080061a5
 8006150:	080061b3 	.word	0x080061b3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	7a5b      	ldrb	r3, [r3, #9]
 800615c:	2bff      	cmp	r3, #255	; 0xff
 800615e:	d005      	beq.n	800616c <OutputDbgTrace+0x4c>
 8006160:	2bff      	cmp	r3, #255	; 0xff
 8006162:	dc05      	bgt.n	8006170 <OutputDbgTrace+0x50>
 8006164:	2b0e      	cmp	r3, #14
 8006166:	d005      	beq.n	8006174 <OutputDbgTrace+0x54>
 8006168:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800616a:	e001      	b.n	8006170 <OutputDbgTrace+0x50>
          break;
 800616c:	bf00      	nop
 800616e:	e027      	b.n	80061c0 <OutputDbgTrace+0xa0>
          break;
 8006170:	bf00      	nop
 8006172:	e025      	b.n	80061c0 <OutputDbgTrace+0xa0>
          break;
 8006174:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8006176:	e023      	b.n	80061c0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800617c:	e020      	b.n	80061c0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	7a5b      	ldrb	r3, [r3, #9]
 8006186:	2b0e      	cmp	r3, #14
 8006188:	d001      	beq.n	800618e <OutputDbgTrace+0x6e>
 800618a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800618c:	e000      	b.n	8006190 <OutputDbgTrace+0x70>
          break;
 800618e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006190:	e016      	b.n	80061c0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	7a5b      	ldrb	r3, [r3, #9]
 800619a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800619c:	e010      	b.n	80061c0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80061a2:	e00d      	b.n	80061c0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	7a5b      	ldrb	r3, [r3, #9]
 80061ac:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80061ae:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80061b0:	e006      	b.n	80061c0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	7a5b      	ldrb	r3, [r3, #9]
 80061ba:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80061bc:	e000      	b.n	80061c0 <OutputDbgTrace+0xa0>

    default:
      break;
 80061be:	bf00      	nop
  }

  return;
 80061c0:	bf00      	nop
}
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80061d6:	4b0f      	ldr	r3, [pc, #60]	; (8006214 <OTP_Read+0x48>)
 80061d8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80061da:	e002      	b.n	80061e2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3b08      	subs	r3, #8
 80061e0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3307      	adds	r3, #7
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	79fa      	ldrb	r2, [r7, #7]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d003      	beq.n	80061f6 <OTP_Read+0x2a>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a09      	ldr	r2, [pc, #36]	; (8006218 <OTP_Read+0x4c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d1f2      	bne.n	80061dc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3307      	adds	r3, #7
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	79fa      	ldrb	r2, [r7, #7]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d001      	beq.n	8006206 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8006202:	2300      	movs	r3, #0
 8006204:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8006206:	68fb      	ldr	r3, [r7, #12]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	1fff73f8 	.word	0x1fff73f8
 8006218:	1fff7000 	.word	0x1fff7000

0800621c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	605a      	str	r2, [r3, #4]
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006244:	f3ef 8310 	mrs	r3, PRIMASK
 8006248:	60fb      	str	r3, [r7, #12]
  return(result);
 800624a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800624c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800624e:	b672      	cpsid	i
}
 8006250:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	429a      	cmp	r2, r3
 800625a:	d102      	bne.n	8006262 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800625c:	2301      	movs	r3, #1
 800625e:	75fb      	strb	r3, [r7, #23]
 8006260:	e001      	b.n	8006266 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8006262:	2300      	movs	r3, #0
 8006264:	75fb      	strb	r3, [r7, #23]
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f383 8810 	msr	PRIMASK, r3
}
 8006270:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8006272:	7dfb      	ldrb	r3, [r7, #23]
}
 8006274:	4618      	mov	r0, r3
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800628a:	f3ef 8310 	mrs	r3, PRIMASK
 800628e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006290:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006292:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006294:	b672      	cpsid	i
}
 8006296:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	605a      	str	r2, [r3, #4]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f383 8810 	msr	PRIMASK, r3
}
 80062be:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80062c0:	bf00      	nop
 80062c2:	371c      	adds	r7, #28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062d6:	f3ef 8310 	mrs	r3, PRIMASK
 80062da:	60fb      	str	r3, [r7, #12]
  return(result);
 80062dc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80062de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80062e0:	b672      	cpsid	i
}
 80062e2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f383 8810 	msr	PRIMASK, r3
}
 800630a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800630c:	bf00      	nop
 800630e:	371c      	adds	r7, #28
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006320:	f3ef 8310 	mrs	r3, PRIMASK
 8006324:	60fb      	str	r3, [r7, #12]
  return(result);
 8006326:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006328:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800632a:	b672      	cpsid	i
}
 800632c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6812      	ldr	r2, [r2, #0]
 8006336:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6852      	ldr	r2, [r2, #4]
 8006340:	605a      	str	r2, [r3, #4]
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f383 8810 	msr	PRIMASK, r3
}
 800634c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800634e:	bf00      	nop
 8006350:	371c      	adds	r7, #28
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b086      	sub	sp, #24
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006364:	f3ef 8310 	mrs	r3, PRIMASK
 8006368:	60fb      	str	r3, [r7, #12]
  return(result);
 800636a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800636c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800636e:	b672      	cpsid	i
}
 8006370:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff ffca 	bl	8006318 <LST_remove_node>
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f383 8810 	msr	PRIMASK, r3
}
 800638e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006390:	bf00      	nop
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800639c:	4b03      	ldr	r3, [pc, #12]	; (80063ac <LL_FLASH_GetUDN+0x14>)
 800639e:	681b      	ldr	r3, [r3, #0]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	1fff7580 	.word	0x1fff7580

080063b0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80063b4:	4b03      	ldr	r3, [pc, #12]	; (80063c4 <LL_FLASH_GetDeviceID+0x14>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	b2db      	uxtb	r3, r3
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	1fff7584 	.word	0x1fff7584

080063c8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80063cc:	4b03      	ldr	r3, [pc, #12]	; (80063dc <LL_FLASH_GetSTCompanyID+0x14>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	0a1b      	lsrs	r3, r3, #8
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	1fff7584 	.word	0x1fff7584

080063e0 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80063e0:	b5b0      	push	{r4, r5, r7, lr}
 80063e2:	b090      	sub	sp, #64	; 0x40
 80063e4:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80063e6:	2392      	movs	r3, #146	; 0x92
 80063e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  	  UTIL_SEQ_RegTask(1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 80063ec:	4a29      	ldr	r2, [pc, #164]	; (8006494 <APP_BLE_Init+0xb4>)
 80063ee:	2100      	movs	r1, #0
 80063f0:	2004      	movs	r0, #4
 80063f2:	f001 f817 	bl	8007424 <UTIL_SEQ_RegTask>
  	  UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 80063f6:	2100      	movs	r1, #0
 80063f8:	2004      	movs	r0, #4
 80063fa:	f001 f835 	bl	8007468 <UTIL_SEQ_SetTask>


  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80063fe:	4b26      	ldr	r3, [pc, #152]	; (8006498 <APP_BLE_Init+0xb8>)
 8006400:	1d3c      	adds	r4, r7, #4
 8006402:	461d      	mov	r5, r3
 8006404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800640a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800640c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800640e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006410:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006414:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8006418:	f000 f906 	bl	8006628 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800641c:	2101      	movs	r1, #1
 800641e:	2002      	movs	r0, #2
 8006420:	f000 fed4 	bl	80071cc <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8006424:	4a1d      	ldr	r2, [pc, #116]	; (800649c <APP_BLE_Init+0xbc>)
 8006426:	2100      	movs	r1, #0
 8006428:	2002      	movs	r0, #2
 800642a:	f000 fffb 	bl	8007424 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800642e:	1d3b      	adds	r3, r7, #4
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff f8c7 	bl	80055c4 <SHCI_C2_BLE_Init>
 8006436:	4603      	mov	r3, r0
 8006438:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800643c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8006444:	f7fb f97a 	bl	800173c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8006448:	f000 f904 	bl	8006654 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800644c:	f7ff f814 	bl	8005478 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006450:	4b13      	ldr	r3, [pc, #76]	; (80064a0 <APP_BLE_Init+0xc0>)
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8006458:	4b11      	ldr	r3, [pc, #68]	; (80064a0 <APP_BLE_Init+0xc0>)
 800645a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800645e:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8006460:	4a10      	ldr	r2, [pc, #64]	; (80064a4 <APP_BLE_Init+0xc4>)
 8006462:	2100      	movs	r1, #0
 8006464:	2001      	movs	r0, #1
 8006466:	f000 ffdd 	bl	8007424 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800646a:	2006      	movs	r0, #6
 800646c:	f7fe fe77 	bl	800515e <aci_hal_set_radio_activity_mask>
 8006470:	4603      	mov	r3, r0
 8006472:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8006476:	f000 fad5 	bl	8006a24 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800647a:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <APP_BLE_Init+0xc0>)
 800647c:	2200      	movs	r2, #0
 800647e:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8006480:	4b07      	ldr	r3, [pc, #28]	; (80064a0 <APP_BLE_Init+0xc0>)
 8006482:	2200      	movs	r2, #0
 8006484:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8006486:	2001      	movs	r0, #1
 8006488:	f000 f998 	bl	80067bc <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800648c:	bf00      	nop
}
 800648e:	3740      	adds	r7, #64	; 0x40
 8006490:	46bd      	mov	sp, r7
 8006492:	bdb0      	pop	{r4, r5, r7, pc}
 8006494:	0800698d 	.word	0x0800698d
 8006498:	0800777c 	.word	0x0800777c
 800649c:	080057e1 	.word	0x080057e1
 80064a0:	20000118 	.word	0x20000118
 80064a4:	080068a5 	.word	0x080068a5

080064a8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08a      	sub	sp, #40	; 0x28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80064b0:	2392      	movs	r3, #146	; 0x92
 80064b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	3301      	adds	r3, #1
 80064ba:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2bff      	cmp	r3, #255	; 0xff
 80064c2:	d053      	beq.n	800656c <SVCCTL_App_Notification+0xc4>
 80064c4:	2bff      	cmp	r3, #255	; 0xff
 80064c6:	f300 80a1 	bgt.w	800660c <SVCCTL_App_Notification+0x164>
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	d002      	beq.n	80064d4 <SVCCTL_App_Notification+0x2c>
 80064ce:	2b3e      	cmp	r3, #62	; 0x3e
 80064d0:	d020      	beq.n	8006514 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80064d2:	e09b      	b.n	800660c <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	3302      	adds	r3, #2
 80064d8:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	4b4e      	ldr	r3, [pc, #312]	; (800661c <SVCCTL_App_Notification+0x174>)
 80064e4:	8adb      	ldrh	r3, [r3, #22]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d106      	bne.n	80064f8 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80064ea:	4b4c      	ldr	r3, [pc, #304]	; (800661c <SVCCTL_App_Notification+0x174>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80064f0:	4b4a      	ldr	r3, [pc, #296]	; (800661c <SVCCTL_App_Notification+0x174>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80064f8:	2001      	movs	r0, #1
 80064fa:	f000 f95f 	bl	80067bc <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80064fe:	4b48      	ldr	r3, [pc, #288]	; (8006620 <SVCCTL_App_Notification+0x178>)
 8006500:	2201      	movs	r2, #1
 8006502:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8006504:	4b45      	ldr	r3, [pc, #276]	; (800661c <SVCCTL_App_Notification+0x174>)
 8006506:	8ada      	ldrh	r2, [r3, #22]
 8006508:	4b45      	ldr	r3, [pc, #276]	; (8006620 <SVCCTL_App_Notification+0x178>)
 800650a:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800650c:	4844      	ldr	r0, [pc, #272]	; (8006620 <SVCCTL_App_Notification+0x178>)
 800650e:	f000 fa75 	bl	80069fc <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8006512:	e07e      	b.n	8006612 <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	3302      	adds	r3, #2
 8006518:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d001      	beq.n	8006526 <SVCCTL_App_Notification+0x7e>
 8006522:	2b03      	cmp	r3, #3
          break;
 8006524:	e021      	b.n	800656a <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	3301      	adds	r3, #1
 800652a:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800652c:	4b3b      	ldr	r3, [pc, #236]	; (800661c <SVCCTL_App_Notification+0x174>)
 800652e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006532:	2b04      	cmp	r3, #4
 8006534:	d104      	bne.n	8006540 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8006536:	4b39      	ldr	r3, [pc, #228]	; (800661c <SVCCTL_App_Notification+0x174>)
 8006538:	2206      	movs	r2, #6
 800653a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800653e:	e003      	b.n	8006548 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8006540:	4b36      	ldr	r3, [pc, #216]	; (800661c <SVCCTL_App_Notification+0x174>)
 8006542:	2205      	movs	r2, #5
 8006544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800654e:	b29a      	uxth	r2, r3
 8006550:	4b32      	ldr	r3, [pc, #200]	; (800661c <SVCCTL_App_Notification+0x174>)
 8006552:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8006554:	4b32      	ldr	r3, [pc, #200]	; (8006620 <SVCCTL_App_Notification+0x178>)
 8006556:	2200      	movs	r2, #0
 8006558:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800655a:	4b30      	ldr	r3, [pc, #192]	; (800661c <SVCCTL_App_Notification+0x174>)
 800655c:	8ada      	ldrh	r2, [r3, #22]
 800655e:	4b30      	ldr	r3, [pc, #192]	; (8006620 <SVCCTL_App_Notification+0x178>)
 8006560:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8006562:	482f      	ldr	r0, [pc, #188]	; (8006620 <SVCCTL_App_Notification+0x178>)
 8006564:	f000 fa4a 	bl	80069fc <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8006568:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800656a:	e052      	b.n	8006612 <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	3302      	adds	r3, #2
 8006570:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800657c:	d040      	beq.n	8006600 <SVCCTL_App_Notification+0x158>
 800657e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006582:	dc45      	bgt.n	8006610 <SVCCTL_App_Notification+0x168>
 8006584:	2b04      	cmp	r3, #4
 8006586:	d03d      	beq.n	8006604 <SVCCTL_App_Notification+0x15c>
 8006588:	2b04      	cmp	r3, #4
 800658a:	db41      	blt.n	8006610 <SVCCTL_App_Notification+0x168>
 800658c:	f240 420a 	movw	r2, #1034	; 0x40a
 8006590:	4293      	cmp	r3, r2
 8006592:	dc3d      	bgt.n	8006610 <SVCCTL_App_Notification+0x168>
 8006594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006598:	dd3a      	ble.n	8006610 <SVCCTL_App_Notification+0x168>
 800659a:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800659e:	2b09      	cmp	r3, #9
 80065a0:	d836      	bhi.n	8006610 <SVCCTL_App_Notification+0x168>
 80065a2:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <SVCCTL_App_Notification+0x100>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	080065f9 	.word	0x080065f9
 80065ac:	080065d1 	.word	0x080065d1
 80065b0:	08006611 	.word	0x08006611
 80065b4:	08006611 	.word	0x08006611
 80065b8:	08006611 	.word	0x08006611
 80065bc:	08006611 	.word	0x08006611
 80065c0:	08006609 	.word	0x08006609
 80065c4:	08006611 	.word	0x08006611
 80065c8:	080065e5 	.word	0x080065e5
 80065cc:	08006609 	.word	0x08006609
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80065d0:	4b12      	ldr	r3, [pc, #72]	; (800661c <SVCCTL_App_Notification+0x174>)
 80065d2:	8adb      	ldrh	r3, [r3, #22]
 80065d4:	4913      	ldr	r1, [pc, #76]	; (8006624 <SVCCTL_App_Notification+0x17c>)
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe f818 	bl	800460c <aci_gap_pass_key_resp>
 80065dc:	4603      	mov	r3, r0
 80065de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80065e2:	e012      	b.n	800660a <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80065e4:	4b0d      	ldr	r3, [pc, #52]	; (800661c <SVCCTL_App_Notification+0x174>)
 80065e6:	8adb      	ldrh	r3, [r3, #22]
 80065e8:	2101      	movs	r1, #1
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe f9b8 	bl	8004960 <aci_gap_numeric_comparison_value_confirm_yesno>
 80065f0:	4603      	mov	r3, r0
 80065f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80065f6:	e008      	b.n	800660a <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	3302      	adds	r3, #2
 80065fc:	61bb      	str	r3, [r7, #24]
          break;
 80065fe:	e004      	b.n	800660a <SVCCTL_App_Notification+0x162>
          break;
 8006600:	bf00      	nop
 8006602:	e005      	b.n	8006610 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8006604:	bf00      	nop
 8006606:	e003      	b.n	8006610 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8006608:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800660a:	e001      	b.n	8006610 <SVCCTL_App_Notification+0x168>
      break;
 800660c:	bf00      	nop
 800660e:	e000      	b.n	8006612 <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006610:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8006612:	2301      	movs	r3, #1
}
 8006614:	4618      	mov	r0, r3
 8006616:	3728      	adds	r7, #40	; 0x28
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20000118 	.word	0x20000118
 8006620:	2000029c 	.word	0x2000029c
 8006624:	0001b207 	.word	0x0001b207

08006628 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800662e:	4b06      	ldr	r3, [pc, #24]	; (8006648 <Ble_Tl_Init+0x20>)
 8006630:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8006632:	4b06      	ldr	r3, [pc, #24]	; (800664c <Ble_Tl_Init+0x24>)
 8006634:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8006636:	463b      	mov	r3, r7
 8006638:	4619      	mov	r1, r3
 800663a:	4805      	ldr	r0, [pc, #20]	; (8006650 <Ble_Tl_Init+0x28>)
 800663c:	f7ff f8b4 	bl	80057a8 <hci_init>

  return;
 8006640:	bf00      	nop
}
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	200300d8 	.word	0x200300d8
 800664c:	08006955 	.word	0x08006955
 8006650:	0800691d 	.word	0x0800691d

08006654 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8006654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006656:	b08d      	sub	sp, #52	; 0x34
 8006658:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800665a:	2300      	movs	r3, #0
 800665c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800665e:	2392      	movs	r3, #146	; 0x92
 8006660:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8006662:	f7fe fdd0 	bl	8005206 <hci_reset>
 8006666:	4603      	mov	r3, r0
 8006668:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800666a:	f000 f8d7 	bl	800681c <BleGetBdAddress>
 800666e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	2106      	movs	r1, #6
 8006674:	2000      	movs	r0, #0
 8006676:	f7fe fc86 	bl	8004f86 <aci_hal_write_config_data>
 800667a:	4603      	mov	r3, r0
 800667c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800667e:	4a4a      	ldr	r2, [pc, #296]	; (80067a8 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8006680:	2110      	movs	r1, #16
 8006682:	2018      	movs	r0, #24
 8006684:	f7fe fc7f 	bl	8004f86 <aci_hal_write_config_data>
 8006688:	4603      	mov	r3, r0
 800668a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800668c:	4a47      	ldr	r2, [pc, #284]	; (80067ac <Ble_Hci_Gap_Gatt_Init+0x158>)
 800668e:	2110      	movs	r1, #16
 8006690:	2008      	movs	r0, #8
 8006692:	f7fe fc78 	bl	8004f86 <aci_hal_write_config_data>
 8006696:	4603      	mov	r3, r0
 8006698:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800669a:	2118      	movs	r1, #24
 800669c:	2001      	movs	r0, #1
 800669e:	f7fe fcf7 	bl	8005090 <aci_hal_set_tx_power_level>
 80066a2:	4603      	mov	r3, r0
 80066a4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80066a6:	f7fe f9c2 	bl	8004a2e <aci_gatt_init>
 80066aa:	4603      	mov	r3, r0
 80066ac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	f043 0301 	orr.w	r3, r3, #1
 80066b8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01f      	beq.n	8006700 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80066c0:	4b3b      	ldr	r3, [pc, #236]	; (80067b0 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 80066c2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80066c4:	1dba      	adds	r2, r7, #6
 80066c6:	7bf8      	ldrb	r0, [r7, #15]
 80066c8:	1cbb      	adds	r3, r7, #2
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	1d3b      	adds	r3, r7, #4
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	4613      	mov	r3, r2
 80066d2:	2208      	movs	r2, #8
 80066d4:	2100      	movs	r1, #0
 80066d6:	f7fe f800 	bl	80046da <aci_gap_init>
 80066da:	4603      	mov	r3, r0
 80066dc:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80066de:	88fc      	ldrh	r4, [r7, #6]
 80066e0:	88bd      	ldrh	r5, [r7, #4]
 80066e2:	68b8      	ldr	r0, [r7, #8]
 80066e4:	f7f9 fd4a 	bl	800017c <strlen>
 80066e8:	4603      	mov	r3, r0
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	4613      	mov	r3, r2
 80066f2:	2200      	movs	r2, #0
 80066f4:	4629      	mov	r1, r5
 80066f6:	4620      	mov	r0, r4
 80066f8:	f7fe fb9c 	bl	8004e34 <aci_gatt_update_char_value>
 80066fc:	4603      	mov	r3, r0
 80066fe:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8006700:	88f8      	ldrh	r0, [r7, #6]
 8006702:	8879      	ldrh	r1, [r7, #2]
 8006704:	463b      	mov	r3, r7
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	2302      	movs	r3, #2
 800670a:	2200      	movs	r2, #0
 800670c:	f7fe fb92 	bl	8004e34 <aci_gatt_update_char_value>
 8006710:	4603      	mov	r3, r0
 8006712:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8006714:	2202      	movs	r2, #2
 8006716:	2102      	movs	r1, #2
 8006718:	2000      	movs	r0, #0
 800671a:	f7fe fd98 	bl	800524e <hci_le_set_default_phy>
 800671e:	4603      	mov	r3, r0
 8006720:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8006722:	4b24      	ldr	r3, [pc, #144]	; (80067b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006724:	2201      	movs	r2, #1
 8006726:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8006728:	4b22      	ldr	r3, [pc, #136]	; (80067b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	4618      	mov	r0, r3
 800672e:	f7fd fe55 	bl	80043dc <aci_gap_set_io_capability>
 8006732:	4603      	mov	r3, r0
 8006734:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8006736:	4b1f      	ldr	r3, [pc, #124]	; (80067b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006738:	2201      	movs	r2, #1
 800673a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800673c:	4b1d      	ldr	r3, [pc, #116]	; (80067b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800673e:	2208      	movs	r2, #8
 8006740:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8006742:	4b1c      	ldr	r3, [pc, #112]	; (80067b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006744:	2210      	movs	r2, #16
 8006746:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8006748:	4b1a      	ldr	r3, [pc, #104]	; (80067b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800674a:	2200      	movs	r2, #0
 800674c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800674e:	4b19      	ldr	r3, [pc, #100]	; (80067b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006750:	4a19      	ldr	r2, [pc, #100]	; (80067b8 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8006752:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8006754:	4b17      	ldr	r3, [pc, #92]	; (80067b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006756:	2200      	movs	r2, #0
 8006758:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800675a:	4b16      	ldr	r3, [pc, #88]	; (80067b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800675c:	789c      	ldrb	r4, [r3, #2]
 800675e:	4b15      	ldr	r3, [pc, #84]	; (80067b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006760:	785d      	ldrb	r5, [r3, #1]
 8006762:	4b14      	ldr	r3, [pc, #80]	; (80067b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006764:	791b      	ldrb	r3, [r3, #4]
 8006766:	4a13      	ldr	r2, [pc, #76]	; (80067b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006768:	7952      	ldrb	r2, [r2, #5]
 800676a:	4912      	ldr	r1, [pc, #72]	; (80067b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800676c:	78c9      	ldrb	r1, [r1, #3]
 800676e:	4811      	ldr	r0, [pc, #68]	; (80067b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006770:	6880      	ldr	r0, [r0, #8]
 8006772:	2600      	movs	r6, #0
 8006774:	9604      	str	r6, [sp, #16]
 8006776:	9003      	str	r0, [sp, #12]
 8006778:	9102      	str	r1, [sp, #8]
 800677a:	9201      	str	r2, [sp, #4]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	2300      	movs	r3, #0
 8006780:	2201      	movs	r2, #1
 8006782:	4629      	mov	r1, r5
 8006784:	4620      	mov	r0, r4
 8006786:	f7fd fe7d 	bl	8004484 <aci_gap_set_authentication_requirement>
 800678a:	4603      	mov	r3, r0
 800678c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800678e:	4b09      	ldr	r3, [pc, #36]	; (80067b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006790:	789b      	ldrb	r3, [r3, #2]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8006796:	f7fe f8bf 	bl	8004918 <aci_gap_configure_whitelist>
 800679a:	4603      	mov	r3, r0
 800679c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a6:	bf00      	nop
 80067a8:	08007978 	.word	0x08007978
 80067ac:	08007988 	.word	0x08007988
 80067b0:	080077b4 	.word	0x080077b4
 80067b4:	20000118 	.word	0x20000118
 80067b8:	0001b207 	.word	0x0001b207

080067bc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08c      	sub	sp, #48	; 0x30
 80067c0:	af08      	add	r7, sp, #32
 80067c2:	4603      	mov	r3, r0
 80067c4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80067c6:	2392      	movs	r3, #146	; 0x92
 80067c8:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80067ca:	4a12      	ldr	r2, [pc, #72]	; (8006814 <Adv_Request+0x58>)
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80067d2:	2300      	movs	r3, #0
 80067d4:	9306      	str	r3, [sp, #24]
 80067d6:	2300      	movs	r3, #0
 80067d8:	9305      	str	r3, [sp, #20]
 80067da:	2300      	movs	r3, #0
 80067dc:	9304      	str	r3, [sp, #16]
 80067de:	2300      	movs	r3, #0
 80067e0:	9303      	str	r3, [sp, #12]
 80067e2:	2300      	movs	r3, #0
 80067e4:	9302      	str	r3, [sp, #8]
 80067e6:	2300      	movs	r3, #0
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	2300      	movs	r3, #0
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	2300      	movs	r3, #0
 80067f0:	22a0      	movs	r2, #160	; 0xa0
 80067f2:	2180      	movs	r1, #128	; 0x80
 80067f4:	2000      	movs	r0, #0
 80067f6:	f7fd fcf7 	bl	80041e8 <aci_gap_set_discoverable>
 80067fa:	4603      	mov	r3, r0
 80067fc:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80067fe:	4906      	ldr	r1, [pc, #24]	; (8006818 <Adv_Request+0x5c>)
 8006800:	200b      	movs	r0, #11
 8006802:	f7fe f817 	bl	8004834 <aci_gap_update_adv_data>
 8006806:	4603      	mov	r3, r0
 8006808:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800680a:	bf00      	nop
}
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000118 	.word	0x20000118
 8006818:	20000010 	.word	0x20000010

0800681c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8006822:	f7ff fdb9 	bl	8006398 <LL_FLASH_GetUDN>
 8006826:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800682e:	d023      	beq.n	8006878 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8006830:	f7ff fdca 	bl	80063c8 <LL_FLASH_GetSTCompanyID>
 8006834:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8006836:	f7ff fdbb 	bl	80063b0 <LL_FLASH_GetDeviceID>
 800683a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	b2da      	uxtb	r2, r3
 8006840:	4b16      	ldr	r3, [pc, #88]	; (800689c <BleGetBdAddress+0x80>)
 8006842:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	0a1b      	lsrs	r3, r3, #8
 8006848:	b2da      	uxtb	r2, r3
 800684a:	4b14      	ldr	r3, [pc, #80]	; (800689c <BleGetBdAddress+0x80>)
 800684c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	b2da      	uxtb	r2, r3
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <BleGetBdAddress+0x80>)
 8006854:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	b2da      	uxtb	r2, r3
 800685a:	4b10      	ldr	r3, [pc, #64]	; (800689c <BleGetBdAddress+0x80>)
 800685c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	0a1b      	lsrs	r3, r3, #8
 8006862:	b2da      	uxtb	r2, r3
 8006864:	4b0d      	ldr	r3, [pc, #52]	; (800689c <BleGetBdAddress+0x80>)
 8006866:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	0c1b      	lsrs	r3, r3, #16
 800686c:	b2da      	uxtb	r2, r3
 800686e:	4b0b      	ldr	r3, [pc, #44]	; (800689c <BleGetBdAddress+0x80>)
 8006870:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8006872:	4b0a      	ldr	r3, [pc, #40]	; (800689c <BleGetBdAddress+0x80>)
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	e00b      	b.n	8006890 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8006878:	2000      	movs	r0, #0
 800687a:	f7ff fca7 	bl	80061cc <OTP_Read>
 800687e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	e001      	b.n	8006890 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800688c:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <BleGetBdAddress+0x84>)
 800688e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8006890:	697b      	ldr	r3, [r7, #20]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000294 	.word	0x20000294
 80068a0:	08007970 	.word	0x08007970

080068a4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80068aa:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <Adv_Cancel+0x30>)
 80068ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068b0:	2b05      	cmp	r3, #5
 80068b2:	d00a      	beq.n	80068ca <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80068b4:	2392      	movs	r3, #146	; 0x92
 80068b6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80068b8:	f7fd fc72 	bl	80041a0 <aci_gap_set_non_discoverable>
 80068bc:	4603      	mov	r3, r0
 80068be:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80068c0:	4b04      	ldr	r3, [pc, #16]	; (80068d4 <Adv_Cancel+0x30>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
}
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000118 	.word	0x20000118

080068d8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80068e0:	2100      	movs	r1, #0
 80068e2:	2002      	movs	r0, #2
 80068e4:	f000 fdc0 	bl	8007468 <UTIL_SEQ_SetTask>

  return;
 80068e8:	bf00      	nop
}
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80068f8:	2001      	movs	r0, #1
 80068fa:	f000 fe21 	bl	8007540 <UTIL_SEQ_SetEvt>

  return;
 80068fe:	bf00      	nop
}
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800690e:	2001      	movs	r0, #1
 8006910:	f000 fe36 	bl	8007580 <UTIL_SEQ_WaitEvt>

  return;
 8006914:	bf00      	nop
}
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	3308      	adds	r3, #8
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe fdf4 	bl	800551c <SVCCTL_UserEvtRx>
 8006934:	4603      	mov	r3, r0
 8006936:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8006938:	7afb      	ldrb	r3, [r7, #11]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8006944:	e003      	b.n	800694e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	701a      	strb	r2, [r3, #0]
  return;
 800694c:	bf00      	nop
}
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	4603      	mov	r3, r0
 800695c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <BLE_StatusNot+0x16>
 8006964:	2b01      	cmp	r3, #1
 8006966:	d006      	beq.n	8006976 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8006968:	e00b      	b.n	8006982 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800696a:	2307      	movs	r3, #7
 800696c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 fda6 	bl	80074c0 <UTIL_SEQ_PauseTask>
      break;
 8006974:	e005      	b.n	8006982 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006976:	2307      	movs	r3, #7
 8006978:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 fdc0 	bl	8007500 <UTIL_SEQ_ResumeTask>
      break;
 8006980:	bf00      	nop
  }

  return;
 8006982:	bf00      	nop
}
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <myTask>:
/* neill_svc */
static void Custom_Neill_char_notify_Update_Char(void);
static void Custom_Neill_char_notify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask(void){
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8006990:	2110      	movs	r1, #16
 8006992:	480a      	ldr	r0, [pc, #40]	; (80069bc <myTask+0x30>)
 8006994:	f7fb fbde 	bl	8002154 <HAL_GPIO_ReadPin>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d108      	bne.n	80069b0 <myTask+0x24>
	{
	UpdateCharData[0] ^= 0x1;
 800699e:	4b08      	ldr	r3, [pc, #32]	; (80069c0 <myTask+0x34>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	f083 0301 	eor.w	r3, r3, #1
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <myTask+0x34>)
 80069aa:	701a      	strb	r2, [r3, #0]
	Custom_Neill_char_notify_Update_Char();
 80069ac:	f000 f842 	bl	8006a34 <Custom_Neill_char_notify_Update_Char>
	}
	UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 80069b0:	2100      	movs	r1, #0
 80069b2:	2004      	movs	r0, #4
 80069b4:	f000 fd58 	bl	8007468 <UTIL_SEQ_SetTask>

}
 80069b8:	bf00      	nop
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	48000800 	.word	0x48000800
 80069c0:	200002a0 	.word	0x200002a0

080069c4 <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d006      	beq.n	80069e2 <Custom_STM_App_Notification+0x1e>
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	dc06      	bgt.n	80069e6 <Custom_STM_App_Notification+0x22>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d006      	beq.n	80069ea <Custom_STM_App_Notification+0x26>
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d006      	beq.n	80069ee <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80069e0:	e001      	b.n	80069e6 <Custom_STM_App_Notification+0x22>
      break;
 80069e2:	bf00      	nop
 80069e4:	e004      	b.n	80069f0 <Custom_STM_App_Notification+0x2c>
      break;
 80069e6:	bf00      	nop
 80069e8:	e002      	b.n	80069f0 <Custom_STM_App_Notification+0x2c>
      break;
 80069ea:	bf00      	nop
 80069ec:	e000      	b.n	80069f0 <Custom_STM_App_Notification+0x2c>
      break;
 80069ee:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80069f0:	bf00      	nop
}
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <Custom_APP_Notification+0x16>
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d002      	beq.n	8006a16 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8006a10:	e002      	b.n	8006a18 <Custom_APP_Notification+0x1c>
      break;
 8006a12:	bf00      	nop
 8006a14:	e000      	b.n	8006a18 <Custom_APP_Notification+0x1c>
      break;
 8006a16:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8006a18:	bf00      	nop
}
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8006a28:	bf00      	nop
}
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
	...

08006a34 <Custom_Neill_char_notify_Update_Char>:
 *
 *************************************************************/

/* neill_svc */
void Custom_Neill_char_notify_Update_Char(void) /* Property Read */
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Neill_char_notify_UC_1*/
  updateflag = 1;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END Neill_char_notify_UC_1*/

  if (updateflag != 0)
 8006a42:	79fb      	ldrb	r3, [r7, #7]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d004      	beq.n	8006a52 <Custom_Neill_char_notify_Update_Char+0x1e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_NEILL_CHAR_NOTIFY, (uint8_t *)UpdateCharData);
 8006a48:	4904      	ldr	r1, [pc, #16]	; (8006a5c <Custom_Neill_char_notify_Update_Char+0x28>)
 8006a4a:	2001      	movs	r0, #1
 8006a4c:	f000 f926 	bl	8006c9c <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Neill_char_notify_UC_Last*/

  /* USER CODE END Neill_char_notify_UC_Last*/
  return;
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
}
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	200002a0 	.word	0x200002a0

08006a60 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08a      	sub	sp, #40	; 0x28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3301      	adds	r3, #1
 8006a72:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2bff      	cmp	r3, #255	; 0xff
 8006a7a:	d153      	bne.n	8006b24 <Custom_STM_Event_Handler+0xc4>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	3302      	adds	r3, #2
 8006a80:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f640 4214 	movw	r2, #3092	; 0xc14
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d043      	beq.n	8006b18 <Custom_STM_Event_Handler+0xb8>
 8006a90:	f640 4214 	movw	r2, #3092	; 0xc14
 8006a94:	4293      	cmp	r3, r2
 8006a96:	dc41      	bgt.n	8006b1c <Custom_STM_Event_Handler+0xbc>
 8006a98:	f640 4201 	movw	r2, #3073	; 0xc01
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d003      	beq.n	8006aa8 <Custom_STM_Event_Handler+0x48>
 8006aa0:	f640 4213 	movw	r2, #3091	; 0xc13
 8006aa4:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8006aa6:	e03c      	b.n	8006b22 <Custom_STM_Event_Handler+0xc2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	3302      	adds	r3, #2
 8006aac:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomNeill_Char_NotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	885b      	ldrh	r3, [r3, #2]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	4b1f      	ldr	r3, [pc, #124]	; (8006b34 <Custom_STM_Event_Handler+0xd4>)
 8006ab8:	889b      	ldrh	r3, [r3, #4]
 8006aba:	3302      	adds	r3, #2
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d119      	bne.n	8006af4 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	7a1b      	ldrb	r3, [r3, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <Custom_STM_Event_Handler+0x74>
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d008      	beq.n	8006ae4 <Custom_STM_Event_Handler+0x84>
              break;
 8006ad2:	e020      	b.n	8006b16 <Custom_STM_Event_Handler+0xb6>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_NEILL_CHAR_NOTIFY_NOTIFY_DISABLED_EVT;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8006ad8:	f107 0308 	add.w	r3, r7, #8
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff ff71 	bl	80069c4 <Custom_STM_App_Notification>
                break;
 8006ae2:	e018      	b.n	8006b16 <Custom_STM_Event_Handler+0xb6>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_NEILL_CHAR_NOTIFY_NOTIFY_ENABLED_EVT;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8006ae8:	f107 0308 	add.w	r3, r7, #8
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff ff69 	bl	80069c4 <Custom_STM_App_Notification>
                break;
 8006af2:	e010      	b.n	8006b16 <Custom_STM_Event_Handler+0xb6>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomNeill_Char_WriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	885b      	ldrh	r3, [r3, #2]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	461a      	mov	r2, r3
 8006afc:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <Custom_STM_Event_Handler+0xd4>)
 8006afe:	885b      	ldrh	r3, [r3, #2]
 8006b00:	3301      	adds	r3, #1
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d10c      	bne.n	8006b20 <Custom_STM_Event_Handler+0xc0>
            return_value = SVCCTL_EvtAckFlowEnable;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	480a      	ldr	r0, [pc, #40]	; (8006b38 <Custom_STM_Event_Handler+0xd8>)
 8006b10:	f7fb fb50 	bl	80021b4 <HAL_GPIO_TogglePin>
          break;
 8006b14:	e004      	b.n	8006b20 <Custom_STM_Event_Handler+0xc0>
 8006b16:	e003      	b.n	8006b20 <Custom_STM_Event_Handler+0xc0>
          break;
 8006b18:	bf00      	nop
 8006b1a:	e004      	b.n	8006b26 <Custom_STM_Event_Handler+0xc6>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8006b1c:	bf00      	nop
 8006b1e:	e002      	b.n	8006b26 <Custom_STM_Event_Handler+0xc6>
          break;
 8006b20:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006b22:	e000      	b.n	8006b26 <Custom_STM_Event_Handler+0xc6>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8006b24:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8006b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3728      	adds	r7, #40	; 0x28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	200000fc 	.word	0x200000fc
 8006b38:	48000400 	.word	0x48000400

08006b3c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08c      	sub	sp, #48	; 0x30
 8006b40:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006b42:	2392      	movs	r3, #146	; 0x92
 8006b44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8006b46:	484f      	ldr	r0, [pc, #316]	; (8006c84 <SVCCTL_InitCustomSvc+0x148>)
 8006b48:	f7fe fcce 	bl	80054e8 <SVCCTL_RegisterSvcHandler>
   *                                2 for neill_Char_Notify +
   *                                1 for neill_Char_Notify configuration descriptor +
   *                              = 6
   */

  COPY_NEILL_SVC_UUID(uuid.Char_UUID_128);
 8006b4c:	238f      	movs	r3, #143	; 0x8f
 8006b4e:	713b      	strb	r3, [r7, #4]
 8006b50:	23e5      	movs	r3, #229	; 0xe5
 8006b52:	717b      	strb	r3, [r7, #5]
 8006b54:	23b3      	movs	r3, #179	; 0xb3
 8006b56:	71bb      	strb	r3, [r7, #6]
 8006b58:	23d5      	movs	r3, #213	; 0xd5
 8006b5a:	71fb      	strb	r3, [r7, #7]
 8006b5c:	232e      	movs	r3, #46	; 0x2e
 8006b5e:	723b      	strb	r3, [r7, #8]
 8006b60:	237f      	movs	r3, #127	; 0x7f
 8006b62:	727b      	strb	r3, [r7, #9]
 8006b64:	234a      	movs	r3, #74	; 0x4a
 8006b66:	72bb      	strb	r3, [r7, #10]
 8006b68:	2398      	movs	r3, #152	; 0x98
 8006b6a:	72fb      	strb	r3, [r7, #11]
 8006b6c:	232a      	movs	r3, #42	; 0x2a
 8006b6e:	733b      	strb	r3, [r7, #12]
 8006b70:	2348      	movs	r3, #72	; 0x48
 8006b72:	737b      	strb	r3, [r7, #13]
 8006b74:	237a      	movs	r3, #122	; 0x7a
 8006b76:	73bb      	strb	r3, [r7, #14]
 8006b78:	23cc      	movs	r3, #204	; 0xcc
 8006b7a:	73fb      	strb	r3, [r7, #15]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	743b      	strb	r3, [r7, #16]
 8006b80:	2300      	movs	r3, #0
 8006b82:	747b      	strb	r3, [r7, #17]
 8006b84:	2300      	movs	r3, #0
 8006b86:	74bb      	strb	r3, [r7, #18]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8006b8c:	1d39      	adds	r1, r7, #4
 8006b8e:	4b3e      	ldr	r3, [pc, #248]	; (8006c88 <SVCCTL_InitCustomSvc+0x14c>)
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	2306      	movs	r3, #6
 8006b94:	2201      	movs	r2, #1
 8006b96:	2002      	movs	r0, #2
 8006b98:	f7fd ff6e 	bl	8004a78 <aci_gatt_add_service>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  neill_Char_Write
   */
  COPY_NEILL_CHAR_WRITE_UUID(uuid.Char_UUID_128);
 8006ba0:	2319      	movs	r3, #25
 8006ba2:	713b      	strb	r3, [r7, #4]
 8006ba4:	23ed      	movs	r3, #237	; 0xed
 8006ba6:	717b      	strb	r3, [r7, #5]
 8006ba8:	2382      	movs	r3, #130	; 0x82
 8006baa:	71bb      	strb	r3, [r7, #6]
 8006bac:	23ae      	movs	r3, #174	; 0xae
 8006bae:	71fb      	strb	r3, [r7, #7]
 8006bb0:	23ed      	movs	r3, #237	; 0xed
 8006bb2:	723b      	strb	r3, [r7, #8]
 8006bb4:	2321      	movs	r3, #33	; 0x21
 8006bb6:	727b      	strb	r3, [r7, #9]
 8006bb8:	234c      	movs	r3, #76	; 0x4c
 8006bba:	72bb      	strb	r3, [r7, #10]
 8006bbc:	239d      	movs	r3, #157	; 0x9d
 8006bbe:	72fb      	strb	r3, [r7, #11]
 8006bc0:	2341      	movs	r3, #65	; 0x41
 8006bc2:	733b      	strb	r3, [r7, #12]
 8006bc4:	2345      	movs	r3, #69	; 0x45
 8006bc6:	737b      	strb	r3, [r7, #13]
 8006bc8:	2322      	movs	r3, #34	; 0x22
 8006bca:	73bb      	strb	r3, [r7, #14]
 8006bcc:	238e      	movs	r3, #142	; 0x8e
 8006bce:	73fb      	strb	r3, [r7, #15]
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	743b      	strb	r3, [r7, #16]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	747b      	strb	r3, [r7, #17]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	74bb      	strb	r3, [r7, #18]
 8006bdc:	2300      	movs	r3, #0
 8006bde:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomNeill_SvcHdle,
 8006be0:	4b29      	ldr	r3, [pc, #164]	; (8006c88 <SVCCTL_InitCustomSvc+0x14c>)
 8006be2:	8818      	ldrh	r0, [r3, #0]
 8006be4:	4b29      	ldr	r3, [pc, #164]	; (8006c8c <SVCCTL_InitCustomSvc+0x150>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	1d3a      	adds	r2, r7, #4
 8006bec:	4928      	ldr	r1, [pc, #160]	; (8006c90 <SVCCTL_InitCustomSvc+0x154>)
 8006bee:	9105      	str	r1, [sp, #20]
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	9104      	str	r1, [sp, #16]
 8006bf4:	2110      	movs	r1, #16
 8006bf6:	9103      	str	r1, [sp, #12]
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	9102      	str	r1, [sp, #8]
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	9101      	str	r1, [sp, #4]
 8006c00:	2108      	movs	r1, #8
 8006c02:	9100      	str	r1, [sp, #0]
 8006c04:	2102      	movs	r1, #2
 8006c06:	f7fe f80d 	bl	8004c24 <aci_gatt_add_char>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : NEILL_CHAR_WRITE \n\r");
  }
  /**
   *  neill_Char_Notify
   */
  COPY_NEILL_CHAR_NOTIFY_UUID(uuid.Char_UUID_128);
 8006c0e:	2319      	movs	r3, #25
 8006c10:	713b      	strb	r3, [r7, #4]
 8006c12:	23ed      	movs	r3, #237	; 0xed
 8006c14:	717b      	strb	r3, [r7, #5]
 8006c16:	2382      	movs	r3, #130	; 0x82
 8006c18:	71bb      	strb	r3, [r7, #6]
 8006c1a:	23ae      	movs	r3, #174	; 0xae
 8006c1c:	71fb      	strb	r3, [r7, #7]
 8006c1e:	23ed      	movs	r3, #237	; 0xed
 8006c20:	723b      	strb	r3, [r7, #8]
 8006c22:	2321      	movs	r3, #33	; 0x21
 8006c24:	727b      	strb	r3, [r7, #9]
 8006c26:	234c      	movs	r3, #76	; 0x4c
 8006c28:	72bb      	strb	r3, [r7, #10]
 8006c2a:	239d      	movs	r3, #157	; 0x9d
 8006c2c:	72fb      	strb	r3, [r7, #11]
 8006c2e:	2341      	movs	r3, #65	; 0x41
 8006c30:	733b      	strb	r3, [r7, #12]
 8006c32:	2345      	movs	r3, #69	; 0x45
 8006c34:	737b      	strb	r3, [r7, #13]
 8006c36:	2322      	movs	r3, #34	; 0x22
 8006c38:	73bb      	strb	r3, [r7, #14]
 8006c3a:	238e      	movs	r3, #142	; 0x8e
 8006c3c:	73fb      	strb	r3, [r7, #15]
 8006c3e:	2301      	movs	r3, #1
 8006c40:	743b      	strb	r3, [r7, #16]
 8006c42:	2300      	movs	r3, #0
 8006c44:	747b      	strb	r3, [r7, #17]
 8006c46:	2300      	movs	r3, #0
 8006c48:	74bb      	strb	r3, [r7, #18]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomNeill_SvcHdle,
 8006c4e:	4b0e      	ldr	r3, [pc, #56]	; (8006c88 <SVCCTL_InitCustomSvc+0x14c>)
 8006c50:	8818      	ldrh	r0, [r3, #0]
 8006c52:	4b10      	ldr	r3, [pc, #64]	; (8006c94 <SVCCTL_InitCustomSvc+0x158>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	1d3a      	adds	r2, r7, #4
 8006c5a:	490f      	ldr	r1, [pc, #60]	; (8006c98 <SVCCTL_InitCustomSvc+0x15c>)
 8006c5c:	9105      	str	r1, [sp, #20]
 8006c5e:	2100      	movs	r1, #0
 8006c60:	9104      	str	r1, [sp, #16]
 8006c62:	2110      	movs	r1, #16
 8006c64:	9103      	str	r1, [sp, #12]
 8006c66:	2107      	movs	r1, #7
 8006c68:	9102      	str	r1, [sp, #8]
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	9101      	str	r1, [sp, #4]
 8006c6e:	2110      	movs	r1, #16
 8006c70:	9100      	str	r1, [sp, #0]
 8006c72:	2102      	movs	r1, #2
 8006c74:	f7fd ffd6 	bl	8004c24 <aci_gatt_add_char>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8006c7c:	bf00      	nop
}
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	08006a61 	.word	0x08006a61
 8006c88:	200000fc 	.word	0x200000fc
 8006c8c:	2000001b 	.word	0x2000001b
 8006c90:	200000fe 	.word	0x200000fe
 8006c94:	2000001c 	.word	0x2000001c
 8006c98:	20000100 	.word	0x20000100

08006c9c <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	6039      	str	r1, [r7, #0]
 8006ca6:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006ca8:	2392      	movs	r3, #146	; 0x92
 8006caa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <Custom_STM_App_Update_Char+0x1c>
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d00f      	beq.n	8006cd6 <Custom_STM_App_Update_Char+0x3a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 8006cb6:	e01d      	b.n	8006cf4 <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomNeill_SvcHdle,
 8006cb8:	4b11      	ldr	r3, [pc, #68]	; (8006d00 <Custom_STM_App_Update_Char+0x64>)
 8006cba:	8818      	ldrh	r0, [r3, #0]
 8006cbc:	4b10      	ldr	r3, [pc, #64]	; (8006d00 <Custom_STM_App_Update_Char+0x64>)
 8006cbe:	8859      	ldrh	r1, [r3, #2]
 8006cc0:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <Custom_STM_App_Update_Char+0x68>)
 8006cc2:	781a      	ldrb	r2, [r3, #0]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f7fe f8b2 	bl	8004e34 <aci_gatt_update_char_value>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd4:	e00e      	b.n	8006cf4 <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomNeill_SvcHdle,
 8006cd6:	4b0a      	ldr	r3, [pc, #40]	; (8006d00 <Custom_STM_App_Update_Char+0x64>)
 8006cd8:	8818      	ldrh	r0, [r3, #0]
 8006cda:	4b09      	ldr	r3, [pc, #36]	; (8006d00 <Custom_STM_App_Update_Char+0x64>)
 8006cdc:	8899      	ldrh	r1, [r3, #4]
 8006cde:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <Custom_STM_App_Update_Char+0x6c>)
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f7fe f8a3 	bl	8004e34 <aci_gatt_update_char_value>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	200000fc 	.word	0x200000fc
 8006d04:	2000001b 	.word	0x2000001b
 8006d08:	2000001c 	.word	0x2000001c

08006d0c <LL_PWR_EnableBootC2>:
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8006d10:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <LL_PWR_EnableBootC2+0x1c>)
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	4a04      	ldr	r2, [pc, #16]	; (8006d28 <LL_PWR_EnableBootC2+0x1c>)
 8006d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d1a:	60d3      	str	r3, [r2, #12]
}
 8006d1c:	bf00      	nop
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	58000400 	.word	0x58000400

08006d2c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8006d34:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006d36:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006d3a:	4905      	ldr	r1, [pc, #20]	; (8006d50 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	58000800 	.word	0x58000800

08006d54 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006d5c:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006d5e:	6a1a      	ldr	r2, [r3, #32]
 8006d60:	4904      	ldr	r1, [pc, #16]	; (8006d74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	620b      	str	r3, [r1, #32]
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	58000800 	.word	0x58000800

08006d78 <LL_AHB3_GRP1_EnableClock>:
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
}
 8006d9e:	bf00      	nop
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b085      	sub	sp, #20
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8006db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8006dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dca:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
}
 8006dd6:	bf00      	nop
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <LL_C1_IPCC_EnableIT_TXF>:
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	601a      	str	r2, [r3, #0]
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <LL_C1_IPCC_EnableIT_RXO>:
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f043 0201 	orr.w	r2, r3, #1
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	601a      	str	r2, [r3, #0]
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	041b      	lsls	r3, r3, #16
 8006e34:	43db      	mvns	r3, r3
 8006e36:	401a      	ands	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	605a      	str	r2, [r3, #4]
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	041b      	lsls	r3, r3, #16
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	605a      	str	r2, [r3, #4]
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <LL_C1_IPCC_EnableReceiveChannel>:
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	401a      	ands	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	605a      	str	r2, [r3, #4]
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	609a      	str	r2, [r3, #8]
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <LL_C1_IPCC_SetFlag_CHx>:
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	041a      	lsls	r2, r3, #16
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	609a      	str	r2, [r3, #8]
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	4013      	ands	r3, r2
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d101      	bne.n	8006ee6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e000      	b.n	8006ee8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	69da      	ldr	r2, [r3, #28]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	4013      	ands	r3, r2
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d101      	bne.n	8006f10 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e000      	b.n	8006f12 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8006f24:	2102      	movs	r1, #2
 8006f26:	4819      	ldr	r0, [pc, #100]	; (8006f8c <HW_IPCC_Rx_Handler+0x6c>)
 8006f28:	f7ff ffe4 	bl	8006ef4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d009      	beq.n	8006f46 <HW_IPCC_Rx_Handler+0x26>
 8006f32:	4b16      	ldr	r3, [pc, #88]	; (8006f8c <HW_IPCC_Rx_Handler+0x6c>)
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	43db      	mvns	r3, r3
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8006f40:	f000 f8da 	bl	80070f8 <HW_IPCC_SYS_EvtHandler>
 8006f44:	e01f      	b.n	8006f86 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8006f46:	2101      	movs	r1, #1
 8006f48:	4810      	ldr	r0, [pc, #64]	; (8006f8c <HW_IPCC_Rx_Handler+0x6c>)
 8006f4a:	f7ff ffd3 	bl	8006ef4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d008      	beq.n	8006f66 <HW_IPCC_Rx_Handler+0x46>
 8006f54:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <HW_IPCC_Rx_Handler+0x6c>)
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8006f60:	f000 f88e 	bl	8007080 <HW_IPCC_BLE_EvtHandler>
 8006f64:	e00f      	b.n	8006f86 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8006f66:	2108      	movs	r1, #8
 8006f68:	4808      	ldr	r0, [pc, #32]	; (8006f8c <HW_IPCC_Rx_Handler+0x6c>)
 8006f6a:	f7ff ffc3 	bl	8006ef4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d009      	beq.n	8006f88 <HW_IPCC_Rx_Handler+0x68>
 8006f74:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <HW_IPCC_Rx_Handler+0x6c>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	f003 0308 	and.w	r3, r3, #8
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8006f82:	f000 f905 	bl	8007190 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8006f86:	bf00      	nop
 8006f88:	bf00      	nop
}
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	58000c00 	.word	0x58000c00

08006f90 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8006f94:	2102      	movs	r1, #2
 8006f96:	481a      	ldr	r0, [pc, #104]	; (8007000 <HW_IPCC_Tx_Handler+0x70>)
 8006f98:	f7ff ff97 	bl	8006eca <LL_C1_IPCC_IsActiveFlag_CHx>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d109      	bne.n	8006fb6 <HW_IPCC_Tx_Handler+0x26>
 8006fa2:	4b17      	ldr	r3, [pc, #92]	; (8007000 <HW_IPCC_Tx_Handler+0x70>)
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	43db      	mvns	r3, r3
 8006fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8006fb0:	f000 f896 	bl	80070e0 <HW_IPCC_SYS_CmdEvtHandler>
 8006fb4:	e020      	b.n	8006ff8 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8006fb6:	2108      	movs	r1, #8
 8006fb8:	4811      	ldr	r0, [pc, #68]	; (8007000 <HW_IPCC_Tx_Handler+0x70>)
 8006fba:	f7ff ff86 	bl	8006eca <LL_C1_IPCC_IsActiveFlag_CHx>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d109      	bne.n	8006fd8 <HW_IPCC_Tx_Handler+0x48>
 8006fc4:	4b0e      	ldr	r3, [pc, #56]	; (8007000 <HW_IPCC_Tx_Handler+0x70>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8006fd2:	f000 f8bf 	bl	8007154 <HW_IPCC_MM_FreeBufHandler>
 8006fd6:	e00f      	b.n	8006ff8 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8006fd8:	2120      	movs	r1, #32
 8006fda:	4809      	ldr	r0, [pc, #36]	; (8007000 <HW_IPCC_Tx_Handler+0x70>)
 8006fdc:	f7ff ff75 	bl	8006eca <LL_C1_IPCC_IsActiveFlag_CHx>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d109      	bne.n	8006ffa <HW_IPCC_Tx_Handler+0x6a>
 8006fe6:	4b06      	ldr	r3, [pc, #24]	; (8007000 <HW_IPCC_Tx_Handler+0x70>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	43db      	mvns	r3, r3
 8006fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8006ff4:	f000 f850 	bl	8007098 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8006ff8:	bf00      	nop
 8006ffa:	bf00      	nop
}
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	58000c00 	.word	0x58000c00

08007004 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8007008:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800700c:	f7ff fecd 	bl	8006daa <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8007010:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007014:	f7ff fe9e 	bl	8006d54 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8007018:	f44f 7000 	mov.w	r0, #512	; 0x200
 800701c:	f7ff fe86 	bl	8006d2c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8007020:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8007022:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8007024:	f7ff fe72 	bl	8006d0c <LL_PWR_EnableBootC2>

  return;
 8007028:	bf00      	nop
}
 800702a:	bd80      	pop	{r7, pc}

0800702c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8007030:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007034:	f7ff fea0 	bl	8006d78 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8007038:	4806      	ldr	r0, [pc, #24]	; (8007054 <HW_IPCC_Init+0x28>)
 800703a:	f7ff fee2 	bl	8006e02 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800703e:	4805      	ldr	r0, [pc, #20]	; (8007054 <HW_IPCC_Init+0x28>)
 8007040:	f7ff fecf 	bl	8006de2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8007044:	202c      	movs	r0, #44	; 0x2c
 8007046:	f7fa fed0 	bl	8001dea <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800704a:	202d      	movs	r0, #45	; 0x2d
 800704c:	f7fa fecd 	bl	8001dea <HAL_NVIC_EnableIRQ>

  return;
 8007050:	bf00      	nop
}
 8007052:	bd80      	pop	{r7, pc}
 8007054:	58000c00 	.word	0x58000c00

08007058 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800705c:	2101      	movs	r1, #1
 800705e:	4802      	ldr	r0, [pc, #8]	; (8007068 <HW_IPCC_BLE_Init+0x10>)
 8007060:	f7ff ff04 	bl	8006e6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007064:	bf00      	nop
}
 8007066:	bd80      	pop	{r7, pc}
 8007068:	58000c00 	.word	0x58000c00

0800706c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8007070:	2101      	movs	r1, #1
 8007072:	4802      	ldr	r0, [pc, #8]	; (800707c <HW_IPCC_BLE_SendCmd+0x10>)
 8007074:	f7ff ff1a 	bl	8006eac <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007078:	bf00      	nop
}
 800707a:	bd80      	pop	{r7, pc}
 800707c:	58000c00 	.word	0x58000c00

08007080 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8007084:	f7fe feea 	bl	8005e5c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007088:	2101      	movs	r1, #1
 800708a:	4802      	ldr	r0, [pc, #8]	; (8007094 <HW_IPCC_BLE_EvtHandler+0x14>)
 800708c:	f7ff ff00 	bl	8006e90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007090:	bf00      	nop
}
 8007092:	bd80      	pop	{r7, pc}
 8007094:	58000c00 	.word	0x58000c00

08007098 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800709c:	2120      	movs	r1, #32
 800709e:	4803      	ldr	r0, [pc, #12]	; (80070ac <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80070a0:	f7ff fed2 	bl	8006e48 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80070a4:	f7fe ff0a 	bl	8005ebc <HW_IPCC_BLE_AclDataAckNot>

  return;
 80070a8:	bf00      	nop
}
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	58000c00 	.word	0x58000c00

080070b0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80070b4:	2102      	movs	r1, #2
 80070b6:	4802      	ldr	r0, [pc, #8]	; (80070c0 <HW_IPCC_SYS_Init+0x10>)
 80070b8:	f7ff fed8 	bl	8006e6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80070bc:	bf00      	nop
}
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	58000c00 	.word	0x58000c00

080070c4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80070c8:	2102      	movs	r1, #2
 80070ca:	4804      	ldr	r0, [pc, #16]	; (80070dc <HW_IPCC_SYS_SendCmd+0x18>)
 80070cc:	f7ff feee 	bl	8006eac <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80070d0:	2102      	movs	r1, #2
 80070d2:	4802      	ldr	r0, [pc, #8]	; (80070dc <HW_IPCC_SYS_SendCmd+0x18>)
 80070d4:	f7ff fea5 	bl	8006e22 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80070d8:	bf00      	nop
}
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	58000c00 	.word	0x58000c00

080070e0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80070e4:	2102      	movs	r1, #2
 80070e6:	4803      	ldr	r0, [pc, #12]	; (80070f4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80070e8:	f7ff feae 	bl	8006e48 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80070ec:	f7fe ff36 	bl	8005f5c <HW_IPCC_SYS_CmdEvtNot>

  return;
 80070f0:	bf00      	nop
}
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	58000c00 	.word	0x58000c00

080070f8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80070fc:	f7fe ff44 	bl	8005f88 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007100:	2102      	movs	r1, #2
 8007102:	4802      	ldr	r0, [pc, #8]	; (800710c <HW_IPCC_SYS_EvtHandler+0x14>)
 8007104:	f7ff fec4 	bl	8006e90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007108:	bf00      	nop
}
 800710a:	bd80      	pop	{r7, pc}
 800710c:	58000c00 	.word	0x58000c00

08007110 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8007118:	2108      	movs	r1, #8
 800711a:	480c      	ldr	r0, [pc, #48]	; (800714c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800711c:	f7ff fed5 	bl	8006eca <LL_C1_IPCC_IsActiveFlag_CHx>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d007      	beq.n	8007136 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8007126:	4a0a      	ldr	r2, [pc, #40]	; (8007150 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800712c:	2108      	movs	r1, #8
 800712e:	4807      	ldr	r0, [pc, #28]	; (800714c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007130:	f7ff fe77 	bl	8006e22 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8007134:	e006      	b.n	8007144 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800713a:	2108      	movs	r1, #8
 800713c:	4803      	ldr	r0, [pc, #12]	; (800714c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800713e:	f7ff feb5 	bl	8006eac <LL_C1_IPCC_SetFlag_CHx>
  return;
 8007142:	bf00      	nop
}
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	58000c00 	.word	0x58000c00
 8007150:	20000398 	.word	0x20000398

08007154 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007158:	2108      	movs	r1, #8
 800715a:	4806      	ldr	r0, [pc, #24]	; (8007174 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800715c:	f7ff fe74 	bl	8006e48 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8007160:	4b05      	ldr	r3, [pc, #20]	; (8007178 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007166:	2108      	movs	r1, #8
 8007168:	4802      	ldr	r0, [pc, #8]	; (8007174 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800716a:	f7ff fe9f 	bl	8006eac <LL_C1_IPCC_SetFlag_CHx>

  return;
 800716e:	bf00      	nop
}
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	58000c00 	.word	0x58000c00
 8007178:	20000398 	.word	0x20000398

0800717c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007180:	2108      	movs	r1, #8
 8007182:	4802      	ldr	r0, [pc, #8]	; (800718c <HW_IPCC_TRACES_Init+0x10>)
 8007184:	f7ff fe72 	bl	8006e6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007188:	bf00      	nop
}
 800718a:	bd80      	pop	{r7, pc}
 800718c:	58000c00 	.word	0x58000c00

08007190 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8007194:	f7fe ffa0 	bl	80060d8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007198:	2108      	movs	r1, #8
 800719a:	4802      	ldr	r0, [pc, #8]	; (80071a4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800719c:	f7ff fe78 	bl	8006e90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80071a0:	bf00      	nop
}
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	58000c00 	.word	0x58000c00

080071a8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <UTIL_LPM_Init+0x1c>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80071b2:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <UTIL_LPM_Init+0x20>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80071b8:	bf00      	nop
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	2000039c 	.word	0x2000039c
 80071c8:	200003a0 	.word	0x200003a0

080071cc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071d8:	f3ef 8310 	mrs	r3, PRIMASK
 80071dc:	613b      	str	r3, [r7, #16]
  return(result);
 80071de:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80071e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80071e2:	b672      	cpsid	i
}
 80071e4:	bf00      	nop
  
  switch(state)
 80071e6:	78fb      	ldrb	r3, [r7, #3]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d008      	beq.n	80071fe <UTIL_LPM_SetOffMode+0x32>
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d10e      	bne.n	800720e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <UTIL_LPM_SetOffMode+0x5c>)
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	4a0b      	ldr	r2, [pc, #44]	; (8007228 <UTIL_LPM_SetOffMode+0x5c>)
 80071fa:	6013      	str	r3, [r2, #0]
      break;
 80071fc:	e008      	b.n	8007210 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	43da      	mvns	r2, r3
 8007202:	4b09      	ldr	r3, [pc, #36]	; (8007228 <UTIL_LPM_SetOffMode+0x5c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4013      	ands	r3, r2
 8007208:	4a07      	ldr	r2, [pc, #28]	; (8007228 <UTIL_LPM_SetOffMode+0x5c>)
 800720a:	6013      	str	r3, [r2, #0]
      break;
 800720c:	e000      	b.n	8007210 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800720e:	bf00      	nop
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f383 8810 	msr	PRIMASK, r3
}
 800721a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800721c:	bf00      	nop
 800721e:	371c      	adds	r7, #28
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	200003a0 	.word	0x200003a0

0800722c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b090      	sub	sp, #64	; 0x40
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8007234:	4b73      	ldr	r3, [pc, #460]	; (8007404 <UTIL_SEQ_Run+0x1d8>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800723a:	4b72      	ldr	r3, [pc, #456]	; (8007404 <UTIL_SEQ_Run+0x1d8>)
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4013      	ands	r3, r2
 8007242:	4a70      	ldr	r2, [pc, #448]	; (8007404 <UTIL_SEQ_Run+0x1d8>)
 8007244:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8007246:	4b70      	ldr	r3, [pc, #448]	; (8007408 <UTIL_SEQ_Run+0x1dc>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800724c:	4b6f      	ldr	r3, [pc, #444]	; (800740c <UTIL_SEQ_Run+0x1e0>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8007252:	4b6f      	ldr	r3, [pc, #444]	; (8007410 <UTIL_SEQ_Run+0x1e4>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8007258:	4b6e      	ldr	r3, [pc, #440]	; (8007414 <UTIL_SEQ_Run+0x1e8>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800725e:	e08d      	b.n	800737c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8007264:	e002      	b.n	800726c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8007266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007268:	3301      	adds	r3, #1
 800726a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800726c:	4a6a      	ldr	r2, [pc, #424]	; (8007418 <UTIL_SEQ_Run+0x1ec>)
 800726e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007270:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007276:	401a      	ands	r2, r3
 8007278:	4b62      	ldr	r3, [pc, #392]	; (8007404 <UTIL_SEQ_Run+0x1d8>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4013      	ands	r3, r2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0f1      	beq.n	8007266 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8007282:	4a65      	ldr	r2, [pc, #404]	; (8007418 <UTIL_SEQ_Run+0x1ec>)
 8007284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007286:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	401a      	ands	r2, r3
 800728e:	4b5d      	ldr	r3, [pc, #372]	; (8007404 <UTIL_SEQ_Run+0x1d8>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4013      	ands	r3, r2
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8007296:	4a60      	ldr	r2, [pc, #384]	; (8007418 <UTIL_SEQ_Run+0x1ec>)
 8007298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	4413      	add	r3, r2
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	4013      	ands	r3, r2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d106      	bne.n	80072b6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80072a8:	4a5b      	ldr	r2, [pc, #364]	; (8007418 <UTIL_SEQ_Run+0x1ec>)
 80072aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ac:	00db      	lsls	r3, r3, #3
 80072ae:	4413      	add	r3, r2
 80072b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072b4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80072b6:	4a58      	ldr	r2, [pc, #352]	; (8007418 <UTIL_SEQ_Run+0x1ec>)
 80072b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	4413      	add	r3, r2
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	4013      	ands	r3, r2
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 f9b3 	bl	8007630 <SEQ_BitPosition>
 80072ca:	4603      	mov	r3, r0
 80072cc:	461a      	mov	r2, r3
 80072ce:	4b53      	ldr	r3, [pc, #332]	; (800741c <UTIL_SEQ_Run+0x1f0>)
 80072d0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80072d2:	4a51      	ldr	r2, [pc, #324]	; (8007418 <UTIL_SEQ_Run+0x1ec>)
 80072d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	4413      	add	r3, r2
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	4b4f      	ldr	r3, [pc, #316]	; (800741c <UTIL_SEQ_Run+0x1f0>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2101      	movs	r1, #1
 80072e2:	fa01 f303 	lsl.w	r3, r1, r3
 80072e6:	43db      	mvns	r3, r3
 80072e8:	401a      	ands	r2, r3
 80072ea:	494b      	ldr	r1, [pc, #300]	; (8007418 <UTIL_SEQ_Run+0x1ec>)
 80072ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	440b      	add	r3, r1
 80072f2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072f4:	f3ef 8310 	mrs	r3, PRIMASK
 80072f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80072fa:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80072fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80072fe:	b672      	cpsid	i
}
 8007300:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8007302:	4b46      	ldr	r3, [pc, #280]	; (800741c <UTIL_SEQ_Run+0x1f0>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2201      	movs	r2, #1
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	43da      	mvns	r2, r3
 800730e:	4b3e      	ldr	r3, [pc, #248]	; (8007408 <UTIL_SEQ_Run+0x1dc>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4013      	ands	r3, r2
 8007314:	4a3c      	ldr	r2, [pc, #240]	; (8007408 <UTIL_SEQ_Run+0x1dc>)
 8007316:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007318:	2302      	movs	r3, #2
 800731a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800731c:	e013      	b.n	8007346 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800731e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007320:	3b01      	subs	r3, #1
 8007322:	4a3d      	ldr	r2, [pc, #244]	; (8007418 <UTIL_SEQ_Run+0x1ec>)
 8007324:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8007328:	4b3c      	ldr	r3, [pc, #240]	; (800741c <UTIL_SEQ_Run+0x1f0>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2201      	movs	r2, #1
 800732e:	fa02 f303 	lsl.w	r3, r2, r3
 8007332:	43da      	mvns	r2, r3
 8007334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007336:	3b01      	subs	r3, #1
 8007338:	400a      	ands	r2, r1
 800733a:	4937      	ldr	r1, [pc, #220]	; (8007418 <UTIL_SEQ_Run+0x1ec>)
 800733c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007342:	3b01      	subs	r3, #1
 8007344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e8      	bne.n	800731e <UTIL_SEQ_Run+0xf2>
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f383 8810 	msr	PRIMASK, r3
}
 8007356:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8007358:	4b30      	ldr	r3, [pc, #192]	; (800741c <UTIL_SEQ_Run+0x1f0>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a30      	ldr	r2, [pc, #192]	; (8007420 <UTIL_SEQ_Run+0x1f4>)
 800735e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007362:	4798      	blx	r3

    local_taskset = TaskSet;
 8007364:	4b28      	ldr	r3, [pc, #160]	; (8007408 <UTIL_SEQ_Run+0x1dc>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800736a:	4b28      	ldr	r3, [pc, #160]	; (800740c <UTIL_SEQ_Run+0x1e0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8007370:	4b27      	ldr	r3, [pc, #156]	; (8007410 <UTIL_SEQ_Run+0x1e4>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8007376:	4b27      	ldr	r3, [pc, #156]	; (8007414 <UTIL_SEQ_Run+0x1e8>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800737c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	401a      	ands	r2, r3
 8007382:	4b20      	ldr	r3, [pc, #128]	; (8007404 <UTIL_SEQ_Run+0x1d8>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4013      	ands	r3, r2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d005      	beq.n	8007398 <UTIL_SEQ_Run+0x16c>
 800738c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007390:	4013      	ands	r3, r2
 8007392:	2b00      	cmp	r3, #0
 8007394:	f43f af64 	beq.w	8007260 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8007398:	4b20      	ldr	r3, [pc, #128]	; (800741c <UTIL_SEQ_Run+0x1f0>)
 800739a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800739e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80073a0:	f000 f938 	bl	8007614 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073a4:	f3ef 8310 	mrs	r3, PRIMASK
 80073a8:	613b      	str	r3, [r7, #16]
  return(result);
 80073aa:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80073ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80073ae:	b672      	cpsid	i
}
 80073b0:	bf00      	nop
  local_taskset = TaskSet;
 80073b2:	4b15      	ldr	r3, [pc, #84]	; (8007408 <UTIL_SEQ_Run+0x1dc>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80073b8:	4b14      	ldr	r3, [pc, #80]	; (800740c <UTIL_SEQ_Run+0x1e0>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80073be:	4b14      	ldr	r3, [pc, #80]	; (8007410 <UTIL_SEQ_Run+0x1e4>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80073c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	401a      	ands	r2, r3
 80073ca:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <UTIL_SEQ_Run+0x1d8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4013      	ands	r3, r2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d107      	bne.n	80073e4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80073d4:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <UTIL_SEQ_Run+0x1e8>)
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073da:	4013      	ands	r3, r2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80073e0:	f7f9 f9c3 	bl	800076a <UTIL_SEQ_Idle>
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f383 8810 	msr	PRIMASK, r3
}
 80073ee:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80073f0:	f000 f917 	bl	8007622 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80073f4:	4a03      	ldr	r2, [pc, #12]	; (8007404 <UTIL_SEQ_Run+0x1d8>)
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	6013      	str	r3, [r2, #0]

  return;
 80073fa:	bf00      	nop
}
 80073fc:	3740      	adds	r7, #64	; 0x40
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20000024 	.word	0x20000024
 8007408:	200003a4 	.word	0x200003a4
 800740c:	200003a8 	.word	0x200003a8
 8007410:	20000020 	.word	0x20000020
 8007414:	200003ac 	.word	0x200003ac
 8007418:	20000434 	.word	0x20000434
 800741c:	200003b0 	.word	0x200003b0
 8007420:	200003b4 	.word	0x200003b4

08007424 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b088      	sub	sp, #32
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007430:	f3ef 8310 	mrs	r3, PRIMASK
 8007434:	617b      	str	r3, [r7, #20]
  return(result);
 8007436:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8007438:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800743a:	b672      	cpsid	i
}
 800743c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 f8f6 	bl	8007630 <SEQ_BitPosition>
 8007444:	4603      	mov	r3, r0
 8007446:	4619      	mov	r1, r3
 8007448:	4a06      	ldr	r2, [pc, #24]	; (8007464 <UTIL_SEQ_RegTask+0x40>)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	f383 8810 	msr	PRIMASK, r3
}
 800745a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800745c:	bf00      	nop
}
 800745e:	3720      	adds	r7, #32
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	200003b4 	.word	0x200003b4

08007468 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007472:	f3ef 8310 	mrs	r3, PRIMASK
 8007476:	60fb      	str	r3, [r7, #12]
  return(result);
 8007478:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800747a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800747c:	b672      	cpsid	i
}
 800747e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8007480:	4b0d      	ldr	r3, [pc, #52]	; (80074b8 <UTIL_SEQ_SetTask+0x50>)
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4313      	orrs	r3, r2
 8007488:	4a0b      	ldr	r2, [pc, #44]	; (80074b8 <UTIL_SEQ_SetTask+0x50>)
 800748a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800748c:	4a0b      	ldr	r2, [pc, #44]	; (80074bc <UTIL_SEQ_SetTask+0x54>)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	431a      	orrs	r2, r3
 8007498:	4908      	ldr	r1, [pc, #32]	; (80074bc <UTIL_SEQ_SetTask+0x54>)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f383 8810 	msr	PRIMASK, r3
}
 80074aa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80074ac:	bf00      	nop
}
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	200003a4 	.word	0x200003a4
 80074bc:	20000434 	.word	0x20000434

080074c0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074c8:	f3ef 8310 	mrs	r3, PRIMASK
 80074cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80074ce:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80074d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80074d2:	b672      	cpsid	i
}
 80074d4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	43da      	mvns	r2, r3
 80074da:	4b08      	ldr	r3, [pc, #32]	; (80074fc <UTIL_SEQ_PauseTask+0x3c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4013      	ands	r3, r2
 80074e0:	4a06      	ldr	r2, [pc, #24]	; (80074fc <UTIL_SEQ_PauseTask+0x3c>)
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f383 8810 	msr	PRIMASK, r3
}
 80074ee:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80074f0:	bf00      	nop
}
 80074f2:	371c      	adds	r7, #28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	20000020 	.word	0x20000020

08007500 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007508:	f3ef 8310 	mrs	r3, PRIMASK
 800750c:	60fb      	str	r3, [r7, #12]
  return(result);
 800750e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007510:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007512:	b672      	cpsid	i
}
 8007514:	bf00      	nop

  TaskMask |= TaskId_bm;
 8007516:	4b09      	ldr	r3, [pc, #36]	; (800753c <UTIL_SEQ_ResumeTask+0x3c>)
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4313      	orrs	r3, r2
 800751e:	4a07      	ldr	r2, [pc, #28]	; (800753c <UTIL_SEQ_ResumeTask+0x3c>)
 8007520:	6013      	str	r3, [r2, #0]
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f383 8810 	msr	PRIMASK, r3
}
 800752c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800752e:	bf00      	nop
}
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	20000020 	.word	0x20000020

08007540 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007548:	f3ef 8310 	mrs	r3, PRIMASK
 800754c:	60fb      	str	r3, [r7, #12]
  return(result);
 800754e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007550:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007552:	b672      	cpsid	i
}
 8007554:	bf00      	nop

  EvtSet |= EvtId_bm;
 8007556:	4b09      	ldr	r3, [pc, #36]	; (800757c <UTIL_SEQ_SetEvt+0x3c>)
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4313      	orrs	r3, r2
 800755e:	4a07      	ldr	r2, [pc, #28]	; (800757c <UTIL_SEQ_SetEvt+0x3c>)
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f383 8810 	msr	PRIMASK, r3
}
 800756c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800756e:	bf00      	nop
}
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	200003a8 	.word	0x200003a8

08007580 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8007588:	4b1f      	ldr	r3, [pc, #124]	; (8007608 <UTIL_SEQ_WaitEvt+0x88>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800758e:	4b1e      	ldr	r3, [pc, #120]	; (8007608 <UTIL_SEQ_WaitEvt+0x88>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007596:	d102      	bne.n	800759e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8007598:	2300      	movs	r3, #0
 800759a:	61fb      	str	r3, [r7, #28]
 800759c:	e005      	b.n	80075aa <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800759e:	4b1a      	ldr	r3, [pc, #104]	; (8007608 <UTIL_SEQ_WaitEvt+0x88>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2201      	movs	r2, #1
 80075a4:	fa02 f303 	lsl.w	r3, r2, r3
 80075a8:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80075aa:	4b18      	ldr	r3, [pc, #96]	; (800760c <UTIL_SEQ_WaitEvt+0x8c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80075b0:	4a16      	ldr	r2, [pc, #88]	; (800760c <UTIL_SEQ_WaitEvt+0x8c>)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80075b6:	e003      	b.n	80075c0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80075b8:	6879      	ldr	r1, [r7, #4]
 80075ba:	69f8      	ldr	r0, [r7, #28]
 80075bc:	f7f9 f8dc 	bl	8000778 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80075c0:	4b13      	ldr	r3, [pc, #76]	; (8007610 <UTIL_SEQ_WaitEvt+0x90>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4013      	ands	r3, r2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d0f5      	beq.n	80075b8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80075cc:	4a0e      	ldr	r2, [pc, #56]	; (8007608 <UTIL_SEQ_WaitEvt+0x88>)
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d2:	f3ef 8310 	mrs	r3, PRIMASK
 80075d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80075d8:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80075da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80075dc:	b672      	cpsid	i
}
 80075de:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	43da      	mvns	r2, r3
 80075e4:	4b0a      	ldr	r3, [pc, #40]	; (8007610 <UTIL_SEQ_WaitEvt+0x90>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4013      	ands	r3, r2
 80075ea:	4a09      	ldr	r2, [pc, #36]	; (8007610 <UTIL_SEQ_WaitEvt+0x90>)
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f383 8810 	msr	PRIMASK, r3
}
 80075f8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80075fa:	4a04      	ldr	r2, [pc, #16]	; (800760c <UTIL_SEQ_WaitEvt+0x8c>)
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	6013      	str	r3, [r2, #0]
  return;
 8007600:	bf00      	nop
}
 8007602:	3720      	adds	r7, #32
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	200003b0 	.word	0x200003b0
 800760c:	200003ac 	.word	0x200003ac
 8007610:	200003a8 	.word	0x200003a8

08007614 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8007614:	b480      	push	{r7}
 8007616:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007618:	bf00      	nop
}
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8007622:	b480      	push	{r7}
 8007624:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007626:	bf00      	nop
}
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	0c1b      	lsrs	r3, r3, #16
 8007644:	041b      	lsls	r3, r3, #16
 8007646:	2b00      	cmp	r3, #0
 8007648:	d104      	bne.n	8007654 <SEQ_BitPosition+0x24>
 800764a:	2310      	movs	r3, #16
 800764c:	73fb      	strb	r3, [r7, #15]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	041b      	lsls	r3, r3, #16
 8007652:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d105      	bne.n	800766a <SEQ_BitPosition+0x3a>
 800765e:	7bfb      	ldrb	r3, [r7, #15]
 8007660:	3308      	adds	r3, #8
 8007662:	73fb      	strb	r3, [r7, #15]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	021b      	lsls	r3, r3, #8
 8007668:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d105      	bne.n	8007680 <SEQ_BitPosition+0x50>
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	3304      	adds	r3, #4
 8007678:	73fb      	strb	r3, [r7, #15]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	011b      	lsls	r3, r3, #4
 800767e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	0f1b      	lsrs	r3, r3, #28
 8007684:	4a07      	ldr	r2, [pc, #28]	; (80076a4 <SEQ_BitPosition+0x74>)
 8007686:	5cd2      	ldrb	r2, [r2, r3]
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	4413      	add	r3, r2
 800768c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	f1c3 031f 	rsb	r3, r3, #31
 8007694:	b2db      	uxtb	r3, r3
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	08007998 	.word	0x08007998

080076a8 <__libc_init_array>:
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	4d0d      	ldr	r5, [pc, #52]	; (80076e0 <__libc_init_array+0x38>)
 80076ac:	4c0d      	ldr	r4, [pc, #52]	; (80076e4 <__libc_init_array+0x3c>)
 80076ae:	1b64      	subs	r4, r4, r5
 80076b0:	10a4      	asrs	r4, r4, #2
 80076b2:	2600      	movs	r6, #0
 80076b4:	42a6      	cmp	r6, r4
 80076b6:	d109      	bne.n	80076cc <__libc_init_array+0x24>
 80076b8:	4d0b      	ldr	r5, [pc, #44]	; (80076e8 <__libc_init_array+0x40>)
 80076ba:	4c0c      	ldr	r4, [pc, #48]	; (80076ec <__libc_init_array+0x44>)
 80076bc:	f000 f82e 	bl	800771c <_init>
 80076c0:	1b64      	subs	r4, r4, r5
 80076c2:	10a4      	asrs	r4, r4, #2
 80076c4:	2600      	movs	r6, #0
 80076c6:	42a6      	cmp	r6, r4
 80076c8:	d105      	bne.n	80076d6 <__libc_init_array+0x2e>
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d0:	4798      	blx	r3
 80076d2:	3601      	adds	r6, #1
 80076d4:	e7ee      	b.n	80076b4 <__libc_init_array+0xc>
 80076d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076da:	4798      	blx	r3
 80076dc:	3601      	adds	r6, #1
 80076de:	e7f2      	b.n	80076c6 <__libc_init_array+0x1e>
 80076e0:	080079a8 	.word	0x080079a8
 80076e4:	080079a8 	.word	0x080079a8
 80076e8:	080079a8 	.word	0x080079a8
 80076ec:	080079ac 	.word	0x080079ac

080076f0 <memcpy>:
 80076f0:	440a      	add	r2, r1
 80076f2:	4291      	cmp	r1, r2
 80076f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80076f8:	d100      	bne.n	80076fc <memcpy+0xc>
 80076fa:	4770      	bx	lr
 80076fc:	b510      	push	{r4, lr}
 80076fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007706:	4291      	cmp	r1, r2
 8007708:	d1f9      	bne.n	80076fe <memcpy+0xe>
 800770a:	bd10      	pop	{r4, pc}

0800770c <memset>:
 800770c:	4402      	add	r2, r0
 800770e:	4603      	mov	r3, r0
 8007710:	4293      	cmp	r3, r2
 8007712:	d100      	bne.n	8007716 <memset+0xa>
 8007714:	4770      	bx	lr
 8007716:	f803 1b01 	strb.w	r1, [r3], #1
 800771a:	e7f9      	b.n	8007710 <memset+0x4>

0800771c <_init>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	bf00      	nop
 8007720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007722:	bc08      	pop	{r3}
 8007724:	469e      	mov	lr, r3
 8007726:	4770      	bx	lr

08007728 <_fini>:
 8007728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772a:	bf00      	nop
 800772c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772e:	bc08      	pop	{r3}
 8007730:	469e      	mov	lr, r3
 8007732:	4770      	bx	lr
